
MotorControl_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000794  00000828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000082c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108d  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9b  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c7  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000302c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ca  00000000  00000000  000039e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_7>
  20:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_8>
  24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e9       	ldi	r30, 0x94	; 148
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
  b2:	0c 94 c8 03 	jmp	0x790	; 0x790 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0d ee       	ldi	r16, 0xED	; 237
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	6f ee       	ldi	r22, 0xEF	; 239
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	4e ee       	ldi	r20, 0xEE	; 238
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	27 ef       	ldi	r18, 0xF7	; 247
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	c6 ef       	ldi	r28, 0xF6	; 246
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	a5 ef       	ldi	r26, 0xF5	; 245
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 ef       	ldi	r31, 0xF4	; 244
  ea:	ef 2e       	mov	r14, r31
  ec:	f1 2c       	mov	r15, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	98 2f       	mov	r25, r24
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	f8 01       	movw	r30, r16
  f8:	90 83       	st	Z, r25
  fa:	fb 01       	movw	r30, r22
  fc:	10 82       	st	Z, r1
  fe:	fa 01       	movw	r30, r20
 100:	10 82       	st	Z, r1
 102:	f9 01       	movw	r30, r18
 104:	10 82       	st	Z, r1
 106:	18 82       	st	Y, r1
 108:	1c 92       	st	X, r1
 10a:	f7 01       	movw	r30, r14
 10c:	10 82       	st	Z, r1
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 120:	83 e1       	ldi	r24, 0x13	; 19
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ff ef       	ldi	r31, 0xFF	; 255
 13a:	20 e7       	ldi	r18, 0x70	; 112
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	f1 50       	subi	r31, 0x01	; 1
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
 148:	00 00       	nop
 14a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 14e:	82 fb       	bst	r24, 2
 150:	88 27       	eor	r24, r24
 152:	80 f9       	bld	r24, 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	89 27       	eor	r24, r25
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <CAN_RXInit>:
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 17a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 17e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 182:	82 2f       	mov	r24, r18
 184:	82 95       	swap	r24
 186:	88 0f       	add	r24, r24
 188:	80 7e       	andi	r24, 0xE0	; 224
 18a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 18e:	da 01       	movw	r26, r20
 190:	c9 01       	movw	r24, r18
 192:	68 94       	set
 194:	12 f8       	bld	r1, 2
 196:	b6 95       	lsr	r27
 198:	a7 95       	ror	r26
 19a:	97 95       	ror	r25
 19c:	87 95       	ror	r24
 19e:	16 94       	lsr	r1
 1a0:	d1 f7       	brne	.-12     	; 0x196 <CAN_RXInit+0x30>
 1a2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1aa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1ae:	8e 2d       	mov	r24, r14
 1b0:	82 95       	swap	r24
 1b2:	88 0f       	add	r24, r24
 1b4:	80 7e       	andi	r24, 0xE0	; 224
 1b6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	68 94       	set
 1c0:	12 f8       	bld	r1, 2
 1c2:	b6 95       	lsr	r27
 1c4:	a7 95       	ror	r26
 1c6:	97 95       	ror	r25
 1c8:	87 95       	ror	r24
 1ca:	16 94       	lsr	r1
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <CAN_RXInit+0x5c>
 1ce:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	c8 9e       	mul	r12, r24
 1d6:	60 01       	movw	r12, r0
 1d8:	11 24       	eor	r1, r1
 1da:	60 68       	ori	r22, 0x80	; 128
 1dc:	c6 2a       	or	r12, r22
 1de:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <setupInverter>:
		}
	}
}

void setupInverter(void)
{
 1f0:	cf 92       	push	r12
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
	DDRB |= 0b11001011;				// make the status LED an output
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	8b 6c       	ori	r24, 0xCB	; 203
 1fe:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 200:	87 b1       	in	r24, 0x07	; 7
 202:	85 60       	ori	r24, 0x05	; 5
 204:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	81 68       	ori	r24, 0x81	; 129
 20a:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	84 73       	andi	r24, 0x34	; 52
 210:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 212:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 214:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 216:	85 b1       	in	r24, 0x05	; 5
 218:	84 62       	ori	r24, 0x24	; 36
 21a:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 21c:	5e 9a       	sbi	0x0b, 6	; 11
	
	
	PLLCSR = 0x02;			//start PLL at INTERRUPTS
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	89 bd       	out	0x29, r24	; 41
	
	//32MHz
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 222:	85 e1       	ldi	r24, 0x15	; 21
 224:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0 TIMER0_OVF_vect
 228:	87 e0       	ldi	r24, 0x07	; 7
 22a:	8d bb       	out	0x1d, r24	; 29

	// start the CAN interface
	CAN_init();		// Initialise CAN
 22c:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);  // Receive a message
 230:	cc 24       	eor	r12, r12
 232:	c3 94       	inc	r12
 234:	e1 2c       	mov	r14, r1
 236:	f1 2c       	mov	r15, r1
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	14 e0       	ldi	r17, 0x04	; 4
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	54 e0       	ldi	r21, 0x04	; 4
 244:	68 e0       	ldi	r22, 0x08	; 8
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>

	// start the interrupts
	sei();
 24c:	78 94       	sei

	//PSC
	// PWM setup code.
	
	POCR_RB = 256;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 256:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 25a:	8c ed       	ldi	r24, 0xDC	; 220
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 262:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 266:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 26a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 26e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 272:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 276:	82 ed       	ldi	r24, 0xD2	; 210
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 27e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 282:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 286:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 28a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 28e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 292:	8c e1       	ldi	r24, 0x1C	; 28
 294:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 298:	81 e2       	ldi	r24, 0x21	; 33
 29a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>

	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 29e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 2a2:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 2a4:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 2a6:	28 98       	cbi	0x05, 0	; 5
}
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	cf 90       	pop	r12
 2b2:	08 95       	ret

000002b4 <__vector_7>:

// skateboard ISRs below  vvv

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
	rotationCounter = 0;
 2c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rotationCounter+0x1>
 2c6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 2ca:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 2ce:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 2d0:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 2d2:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) {
 2d4:	4e 9b       	sbis	0x09, 6	; 9
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <__vector_7+0x56>
		// 3
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 2d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 2dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 2e0:	98 13       	cpse	r25, r24
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <__vector_7+0x3a>
		{
			//anti-clock wise
			PHASE_U_HIGH_ON;
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_W_LOW_ON;
 2ea:	28 9a       	sbi	0x05, 0	; 5
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__vector_7+0x42>
		}else{
			//clock wise
			PHASE_U_LOW_ON;
 2ee:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 3){
 2f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	f1 f4       	brne	.+60     	; 0x33a <__vector_7+0x86>
			revolutions++;
 2fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
 308:	18 c0       	rjmp	.+48     	; 0x33a <__vector_7+0x86>
		}
	} else {
		// 4
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 30a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 30e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 312:	98 13       	cpse	r25, r24
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_7+0x6c>
		{
			//anti-clock wise
			PHASE_U_LOW_ON;
 316:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 318:	80 e3       	ldi	r24, 0x30	; 48
 31a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <__vector_7+0x74>
		}else{
			//clock wise
			PHASE_W_LOW_ON;
 320:	28 9a       	sbi	0x05, 0	; 5
			PHASE_U_HIGH_ON;
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 4){
 328:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	29 f4       	brne	.+10     	; 0x33a <__vector_7+0x86>
			revolutions++;
 330:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
		}
	}
}
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
	rotationCounter = 0;
 356:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rotationCounter+0x1>
 35a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 35e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 362:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 364:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 366:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 368:	1a 9b       	sbis	0x03, 2	; 3
 36a:	19 c0       	rjmp	.+50     	; 0x39e <__vector_8+0x56>
		// 6
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 36c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 370:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 374:	98 13       	cpse	r25, r24
 376:	05 c0       	rjmp	.+10     	; 0x382 <__vector_8+0x3a>
		{
			//anti-clock wise
			PHASE_U_LOW_ON;
 378:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 380:	04 c0       	rjmp	.+8      	; 0x38a <__vector_8+0x42>
		}else{
			//clock wise
			PHASE_V_LOW_ON;
 382:	40 9a       	sbi	0x08, 0	; 8
			PHASE_U_HIGH_ON;
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 6){
 38a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 38e:	86 30       	cpi	r24, 0x06	; 6
 390:	f1 f4       	brne	.+60     	; 0x3ce <__vector_8+0x86>
			revolutions++;
 392:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
 39c:	18 c0       	rjmp	.+48     	; 0x3ce <__vector_8+0x86>
		}
	} else {
		// 1
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 39e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 3a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 3a6:	98 13       	cpse	r25, r24
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <__vector_8+0x6c>
		{
			//anti-clock wise
			PHASE_U_HIGH_ON;
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_V_LOW_ON;
 3b0:	40 9a       	sbi	0x08, 0	; 8
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <__vector_8+0x74>
		}else{
			//clock wise
			PHASE_U_LOW_ON;
 3b4:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 1){
 3bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	29 f4       	brne	.+10     	; 0x3ce <__vector_8+0x86>
			revolutions++;
 3c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
		}
	}
}
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
	rotationCounter = 0;
 3ea:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rotationCounter+0x1>
 3ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 3f2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 3f6:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 3f8:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 3fa:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 3fc:	1d 9b       	sbis	0x03, 5	; 3
 3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		// 5
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 400:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 404:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 408:	98 13       	cpse	r25, r24
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			//anti-clock wise
			PHASE_W_HIGH_ON;
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_V_LOW_ON;
 412:	40 9a       	sbi	0x08, 0	; 8
 414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		}else{
			//clock wise
			PHASE_W_LOW_ON;
 416:	28 9a       	sbi	0x05, 0	; 5
			PHASE_V_HIGH_ON;
 418:	8c e0       	ldi	r24, 0x0C	; 12
 41a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 5){
 41e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 422:	85 30       	cpi	r24, 0x05	; 5
 424:	f1 f4       	brne	.+60     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			revolutions++;
 426:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
 430:	18 c0       	rjmp	.+48     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
	} else {
		// 2
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 432:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 436:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 43a:	98 13       	cpse	r25, r24
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			//anti-clock wise
			PHASE_V_HIGH_ON;
 43e:	8c e0       	ldi	r24, 0x0C	; 12
 440:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_W_LOW_ON;
 444:	28 9a       	sbi	0x05, 0	; 5
 446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}else{
			//clock wise
			PHASE_V_LOW_ON;
 448:	40 9a       	sbi	0x08, 0	; 8
			PHASE_W_HIGH_ON;
 44a:	80 e3       	ldi	r24, 0x30	; 48
 44c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 2){
 450:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	29 f4       	brne	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			revolutions++;
 458:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <revolutions>
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <revolutions>
		}
	}
}
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <getMotorPosition>:
}
// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{		// ((? & 100000) / 8) +  ((? & 100) / 2)   + ((? & 1000000) / 64)
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 470:	23 b1       	in	r18, 0x03	; 3
 472:	93 b1       	in	r25, 0x03	; 3
 474:	89 b1       	in	r24, 0x09	; 9
 476:	20 72       	andi	r18, 0x20	; 32
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	a9 01       	movw	r20, r18
 47c:	55 95       	asr	r21
 47e:	47 95       	ror	r20
 480:	55 95       	asr	r21
 482:	47 95       	ror	r20
 484:	55 95       	asr	r21
 486:	47 95       	ror	r20
 488:	94 70       	andi	r25, 0x04	; 4
 48a:	29 2f       	mov	r18, r25
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	35 95       	asr	r19
 490:	27 95       	ror	r18
 492:	24 0f       	add	r18, r20
 494:	86 fb       	bst	r24, 6
 496:	88 27       	eor	r24, r24
 498:	80 f9       	bld	r24, 0
}
 49a:	82 0f       	add	r24, r18
 49c:	08 95       	ret

0000049e <kickMotor>:
	}
}

void kickMotor(void)
{
	switch (getMotorPosition())
 49e:	0e 94 38 02 	call	0x470	; 0x470 <getMotorPosition>
 4a2:	83 30       	cpi	r24, 0x03	; 3
 4a4:	99 f1       	breq	.+102    	; 0x50c <kickMotor+0x6e>
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <kickMotor+0x14>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	59 f0       	breq	.+22     	; 0x4c2 <kickMotor+0x24>
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	e1 f0       	breq	.+56     	; 0x4e8 <kickMotor+0x4a>
 4b0:	08 95       	ret
 4b2:	85 30       	cpi	r24, 0x05	; 5
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <kickMotor+0x1a>
 4b6:	50 c0       	rjmp	.+160    	; 0x558 <kickMotor+0xba>
 4b8:	e0 f1       	brcs	.+120    	; 0x532 <kickMotor+0x94>
 4ba:	86 30       	cpi	r24, 0x06	; 6
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <kickMotor+0x22>
 4be:	5f c0       	rjmp	.+190    	; 0x57e <kickMotor+0xe0>
 4c0:	08 95       	ret
	{
		case 1:
			// 1
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 4c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 4c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 4ca:	98 13       	cpse	r25, r24
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <kickMotor+0x3a>
			{
				//anti-clock wise
				PHASE_U_HIGH_ON;
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_V_LOW_ON;
 4d4:	40 9a       	sbi	0x08, 0	; 8
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <kickMotor+0x42>
			}else{
				//clock wise
				PHASE_U_LOW_ON;
 4d8:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_V_HIGH_ON;
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
			break;
 4e6:	08 95       	ret
		case 2:
			// 2
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 4e8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 4ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 4f0:	98 13       	cpse	r25, r24
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <kickMotor+0x60>
			{
				//anti-clock wise
				PHASE_V_HIGH_ON;
 4f4:	8c e0       	ldi	r24, 0x0C	; 12
 4f6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 4fa:	28 9a       	sbi	0x05, 0	; 5
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <kickMotor+0x68>
			}else{
				//clock wise
				PHASE_V_LOW_ON;
 4fe:	40 9a       	sbi	0x08, 0	; 8
				PHASE_W_HIGH_ON;
 500:	80 e3       	ldi	r24, 0x30	; 48
 502:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 2;
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		case 3:
			// 3
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 50c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 510:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 514:	98 13       	cpse	r25, r24
 516:	05 c0       	rjmp	.+10     	; 0x522 <kickMotor+0x84>
			{
				//anti-clock wise
				PHASE_U_HIGH_ON;
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 51e:	28 9a       	sbi	0x05, 0	; 5
 520:	04 c0       	rjmp	.+8      	; 0x52a <kickMotor+0x8c>
			}else{
				//clock wise
				PHASE_U_LOW_ON;
 522:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_W_HIGH_ON;
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 3;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 530:	08 95       	ret
		case 4:
			// 4
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 532:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 536:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 53a:	98 13       	cpse	r25, r24
 53c:	05 c0       	rjmp	.+10     	; 0x548 <kickMotor+0xaa>
			{
				//anti-clock wise
				PHASE_U_LOW_ON;
 53e:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_W_HIGH_ON;
 540:	80 e3       	ldi	r24, 0x30	; 48
 542:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 546:	04 c0       	rjmp	.+8      	; 0x550 <kickMotor+0xb2>
			}else{
				//clock wise
				PHASE_W_LOW_ON;
 548:	28 9a       	sbi	0x05, 0	; 5
				PHASE_U_HIGH_ON;
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 4;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 556:	08 95       	ret
		case 5:
			// 5
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 558:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 55c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 560:	98 13       	cpse	r25, r24
 562:	05 c0       	rjmp	.+10     	; 0x56e <kickMotor+0xd0>
			{
				//anti-clock wise
				PHASE_W_HIGH_ON;
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_V_LOW_ON;
 56a:	40 9a       	sbi	0x08, 0	; 8
 56c:	04 c0       	rjmp	.+8      	; 0x576 <kickMotor+0xd8>
			}else{
				//clock wise
				PHASE_W_LOW_ON;
 56e:	28 9a       	sbi	0x05, 0	; 5
				PHASE_V_HIGH_ON;
 570:	8c e0       	ldi	r24, 0x0C	; 12
 572:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 5;
 576:	85 e0       	ldi	r24, 0x05	; 5
 578:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 57c:	08 95       	ret
		case 6:
			// 6
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 57e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <WHICH_DIRECTION>
 582:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ANTI_CLOCK_WISE>
 586:	98 13       	cpse	r25, r24
 588:	05 c0       	rjmp	.+10     	; 0x594 <kickMotor+0xf6>
			{
				//anti-clock wise
				PHASE_U_LOW_ON;
 58a:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_V_HIGH_ON;
 58c:	8c e0       	ldi	r24, 0x0C	; 12
 58e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 592:	04 c0       	rjmp	.+8      	; 0x59c <kickMotor+0xfe>
			}else{
				//clock wise
				PHASE_V_LOW_ON;
 594:	40 9a       	sbi	0x08, 0	; 8
				PHASE_U_HIGH_ON;
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 6;
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
 5a2:	08 95       	ret

000005a4 <main>:
int main(void)
{
	// Choose which direction the motor will spin on
	// CLOCK_WISE
	// ANTI_CLOCK_WISE
	WHICH_DIRECTION = CLOCK_WISE;
 5a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <CLOCK_WISE>
 5a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <WHICH_DIRECTION>
	
	setupInverter();
 5ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <setupInverter>
	
	uint8_t motorState = 0;
 5b0:	30 e0       	ldi	r19, 0x00	; 0
			cleanMotorCommand = 0;
		}
		
		tempStorage = cleanMotorCommand;
		
		motorCommand = 250 - cleanMotorCommand;
 5b2:	0f 2e       	mov	r0, r31
 5b4:	fa ef       	ldi	r31, 0xFA	; 250
 5b6:	5f 2e       	mov	r5, r31
 5b8:	f0 2d       	mov	r31, r0
		
		// Check motor command range
		if(motorCommand < 190){
			motorCommand = 190;
 5ba:	0f 2e       	mov	r0, r31
 5bc:	fe eb       	ldi	r31, 0xBE	; 190
 5be:	2f 2e       	mov	r2, r31
 5c0:	f0 2d       	mov	r31, r0
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		else
		{
			POC = 0b00000000;
 5c2:	c6 eb       	ldi	r28, 0xB6	; 182
 5c4:	d0 e0       	ldi	r29, 0x00	; 0
			PHASE_U_HIGH_ON;
 5c6:	0f 2e       	mov	r0, r31
 5c8:	f3 e0       	ldi	r31, 0x03	; 3
 5ca:	3f 2e       	mov	r3, r31
 5cc:	f0 2d       	mov	r31, r0
		}
		
		if(motorState == 1)
		{
			// PWM code.
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 5ce:	0f 2e       	mov	r0, r31
 5d0:	fc ea       	ldi	r31, 0xAC	; 172
 5d2:	af 2e       	mov	r10, r31
 5d4:	b1 2c       	mov	r11, r1
 5d6:	f0 2d       	mov	r31, r0
 5d8:	0f 2e       	mov	r0, r31
 5da:	f6 ea       	ldi	r31, 0xA6	; 166
 5dc:	cf 2e       	mov	r12, r31
 5de:	d1 2c       	mov	r13, r1
 5e0:	f0 2d       	mov	r31, r0
 5e2:	0f 2e       	mov	r0, r31
 5e4:	f0 ea       	ldi	r31, 0xA0	; 160
 5e6:	ef 2e       	mov	r14, r31
 5e8:	f1 2c       	mov	r15, r1
 5ea:	f0 2d       	mov	r31, r0
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 5ec:	00 eb       	ldi	r16, 0xB0	; 176
 5ee:	10 e0       	ldi	r17, 0x00	; 0
 5f0:	0f 2e       	mov	r0, r31
 5f2:	fa ea       	ldi	r31, 0xAA	; 170
 5f4:	8f 2e       	mov	r8, r31
 5f6:	91 2c       	mov	r9, r1
 5f8:	f0 2d       	mov	r31, r0
 5fa:	0f 2e       	mov	r0, r31
 5fc:	f4 ea       	ldi	r31, 0xA4	; 164
 5fe:	6f 2e       	mov	r6, r31
 600:	71 2c       	mov	r7, r1
 602:	f0 2d       	mov	r31, r0
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 604:	44 24       	eor	r4, r4
 606:	43 94       	inc	r4
	uint8_t motorState = 0;
	uint8_t motorMaxAccelration = 6;
	
	while(1)
	{
		cleanMotorCommand = testChar;
 608:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <testChar>
 60c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <cleanMotorCommand>
			not jump more than 10% in torque power
		
		range: 250 to 190. 10% of the range is 6. thus, the 6.
			Change as and if needed
		*/
		if (cleanMotorCommand - tempStorage > motorMaxAccelration){
 610:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <tempStorage>
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	82 1b       	sub	r24, r18
 618:	91 09       	sbc	r25, r1
 61a:	07 97       	sbiw	r24, 0x07	; 7
 61c:	1c f0       	brlt	.+6      	; 0x624 <main+0x80>
			cleanMotorCommand = tempStorage + motorMaxAccelration;
 61e:	2a 5f       	subi	r18, 0xFA	; 250
 620:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <cleanMotorCommand>
		// Make sure the range is correct
		if (cleanMotorCommand < 0){
			cleanMotorCommand = 0;
		}
		
		tempStorage = cleanMotorCommand;
 624:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <cleanMotorCommand>
 628:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tempStorage>
		
		motorCommand = 250 - cleanMotorCommand;
 62c:	95 2d       	mov	r25, r5
 62e:	98 1b       	sub	r25, r24
 630:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__data_end>
		
		// Check motor command range
		if(motorCommand < 190){
 634:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 638:	8e 3b       	cpi	r24, 0xBE	; 190
 63a:	10 f4       	brcc	.+4      	; 0x640 <main+0x9c>
			motorCommand = 190;
 63c:	20 92 04 01 	sts	0x0104, r2	; 0x800104 <__data_end>
		}
		if(motorCommand > 250){
 640:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 644:	8b 3f       	cpi	r24, 0xFB	; 251
 646:	10 f0       	brcs	.+4      	; 0x64c <main+0xa8>
			motorCommand = 250;
 648:	50 92 04 01 	sts	0x0104, r5	; 0x800104 <__data_end>
		}
		
		if(motorState == 1)
 64c:	31 30       	cpi	r19, 0x01	; 1
 64e:	d1 f4       	brne	.+52     	; 0x684 <main+0xe0>
		{
			// PWM code.
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 650:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	f5 01       	movw	r30, r10
 658:	91 83       	std	Z+1, r25	; 0x01
 65a:	80 83       	st	Z, r24
 65c:	f6 01       	movw	r30, r12
 65e:	91 83       	std	Z+1, r25	; 0x01
 660:	80 83       	st	Z, r24
 662:	f7 01       	movw	r30, r14
 664:	91 83       	std	Z+1, r25	; 0x01
 666:	80 83       	st	Z, r24
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 668:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0a 97       	sbiw	r24, 0x0a	; 10
 670:	f8 01       	movw	r30, r16
 672:	91 83       	std	Z+1, r25	; 0x01
 674:	80 83       	st	Z, r24
 676:	f4 01       	movw	r30, r8
 678:	91 83       	std	Z+1, r25	; 0x01
 67a:	80 83       	st	Z, r24
 67c:	f3 01       	movw	r30, r6
 67e:	91 83       	std	Z+1, r25	; 0x01
 680:	80 83       	st	Z, r24
 682:	04 c0       	rjmp	.+8      	; 0x68c <main+0xe8>
		}
		else
		{
			POC = 0b00000000;
 684:	18 82       	st	Y, r1
			PHASE_U_HIGH_ON;
 686:	38 82       	st	Y, r3
			PHASE_V_LOW_OFF;
 688:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 68a:	28 98       	cbi	0x05, 0	; 5
		}
		
		// Add one to the while-loop-counter signifying no motor movements
		if(rotationCounter < 100)
 68c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rotationCounter>
 690:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rotationCounter+0x1>
 694:	84 36       	cpi	r24, 0x64	; 100
 696:	91 05       	cpc	r25, r1
 698:	48 f4       	brcc	.+18     	; 0x6ac <main+0x108>
		{
			rotationCounter ++;
 69a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rotationCounter>
 69e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rotationCounter+0x1>
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <rotationCounter+0x1>
 6a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <rotationCounter>
		}
		
		// Check if this while loop went 100 times with no motor movements
		if(rotationCounter > 99)
 6ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rotationCounter>
 6b0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rotationCounter+0x1>
 6b4:	84 36       	cpi	r24, 0x64	; 100
 6b6:	91 05       	cpc	r25, r1
 6b8:	38 f0       	brcs	.+14     	; 0x6c8 <main+0x124>
		{
			motorState = 0;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
 6ba:	2b 98       	cbi	0x05, 3	; 5
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
		}

		
		if((motorState == 0) && (motorCommand < 225))
 6bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 6c0:	81 3e       	cpi	r24, 0xE1	; 225
 6c2:	28 f0       	brcs	.+10     	; 0x6ce <main+0x12a>
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	a0 cf       	rjmp	.-192    	; 0x608 <main+0x64>
		{
			motorState = 1;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
 6c8:	2b 9a       	sbi	0x05, 3	; 5
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 6ca:	34 2d       	mov	r19, r4
 6cc:	9d cf       	rjmp	.-198    	; 0x608 <main+0x64>
		}

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
 6ce:	0e 94 4f 02 	call	0x49e	; 0x49e <kickMotor>
			motorState = 1;	
			rotationCounter = 0;
 6d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rotationCounter+0x1>
 6d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <rotationCounter>

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
			motorState = 1;	
 6da:	34 2d       	mov	r19, r4
 6dc:	95 cf       	rjmp	.-214    	; 0x608 <main+0x64>

000006de <toggle_led>:
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
}


void toggle_led(void){
	PORTB ^= 0b00001000;
 6de:	95 b1       	in	r25, 0x05	; 5
 6e0:	88 e0       	ldi	r24, 0x08	; 8
 6e2:	89 27       	eor	r24, r25
 6e4:	85 b9       	out	0x05, r24	; 5
 6e6:	08 95       	ret

000006e8 <__vector_18>:
volatile uint16_t rotationCounter = 0;
volatile uint8_t motorCommand = 0;
//uint8_t tData [1] = {111};

ISR(CAN_INT_vect)
{
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	cf 92       	push	r12
 6f4:	ef 92       	push	r14
 6f6:	ff 92       	push	r15
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
	//uint8_t authority;
	//int8_t mob;
	if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 714:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 718:	85 ff       	sbrs	r24, 5
 71a:	24 c0       	rjmp	.+72     	; 0x764 <__vector_18+0x7c>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 71c:	80 e5       	ldi	r24, 0x50	; 80
 71e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		testChar = CANMSG;
 722:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 726:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <testChar>
		tempChar1 = CANMSG;
		tempChar1 = CANMSG;
		tempChar1 = CANMSG;
		tempChar1 = CANMSG;
		*/
		toggle_led();
 72a:	0e 94 6f 03 	call	0x6de	; 0x6de <toggle_led>
		if(CAN_SEND_BACK_COUNTER >= CAN_SEND_BACK_MAX){
 72e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <CAN_SEND_BACK_COUNTER>
 732:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <CAN_SEND_BACK_MAX>
 736:	98 17       	cp	r25, r24
 738:	10 f0       	brcs	.+4      	; 0x73e <__vector_18+0x56>
			//CAN_TXMOB(1, 1, tData2, 0x5555555, 1);
			CAN_SEND_BACK_COUNTER = 0;
 73a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <CAN_SEND_BACK_COUNTER>
		}
		CAN_SEND_BACK_COUNTER++;
 73e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <CAN_SEND_BACK_COUNTER>
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <CAN_SEND_BACK_COUNTER>
		CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 748:	cc 24       	eor	r12, r12
 74a:	c3 94       	inc	r12
 74c:	e1 2c       	mov	r14, r1
 74e:	f1 2c       	mov	r15, r1
 750:	00 e0       	ldi	r16, 0x00	; 0
 752:	14 e0       	ldi	r17, 0x04	; 4
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	54 e0       	ldi	r21, 0x04	; 4
 75c:	68 e0       	ldi	r22, 0x08	; 8
 75e:	85 e0       	ldi	r24, 0x05	; 5
 760:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
		
	}
}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	cf 90       	pop	r12
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <_exit>:
 790:	f8 94       	cli

00000792 <__stop_program>:
 792:	ff cf       	rjmp	.-2      	; 0x792 <__stop_program>
