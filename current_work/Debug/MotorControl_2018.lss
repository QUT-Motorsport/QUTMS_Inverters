
MotorControl_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000644  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000006da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001048  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb8  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dd  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cc  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000658  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_7>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_8>
  24:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e4       	ldi	r30, 0x44	; 68
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 30       	cpi	r26, 0x08	; 8
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
  b2:	0c 94 20 03 	jmp	0x640	; 0x640 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
/* @Return: Binary ( 0 or 1)                                            */
/*                                                                      */
/* @Note: None                                                          */
/************************************************************************/
uint8_t CAN_init()
{
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
  cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  ce:	0d ee       	ldi	r16, 0xED	; 237
  d0:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  d2:	6f ee       	ldi	r22, 0xEF	; 239
  d4:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
  d6:	4e ee       	ldi	r20, 0xEE	; 238
  d8:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM1 = 0;
  da:	27 ef       	ldi	r18, 0xF7	; 247
  dc:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
  de:	c6 ef       	ldi	r28, 0xF6	; 246
  e0:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
  e2:	a5 ef       	ldi	r26, 0xF5	; 245
  e4:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 ef       	ldi	r31, 0xF4	; 244
  ea:	ef 2e       	mov	r14, r31
  ec:	f1 2c       	mov	r15, r1
  ee:	f0 2d       	mov	r31, r0
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  f0:	98 2f       	mov	r25, r24
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	f8 01       	movw	r30, r16
  f8:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  fa:	fb 01       	movw	r30, r22
  fc:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
  fe:	fa 01       	movw	r30, r20
 100:	10 82       	st	Z, r1
		CANIDM1 = 0;
 102:	f9 01       	movw	r30, r18
 104:	10 82       	st	Z, r1
		CANIDM2 = 0;
 106:	18 82       	st	Y, r1
		CANIDM3 = 0;
 108:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
 10a:	f7 01       	movw	r30, r14
 10c:	10 82       	st	Z, r1
/************************************************************************/
uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps (change above to 0x06 for 500k)
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
 120:	83 e1       	ldi	r24, 0x13	; 19
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANIE2 = (1 << IEMOB5);//|(1 << IEMOB4);		//enable interrupts on MOB 4 and 5 for receiving
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ff ef       	ldi	r31, 0xFF	; 255
 13a:	20 e7       	ldi	r18, 0x70	; 112
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	f1 50       	subi	r31, 0x01	; 1
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
 148:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
 14a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 14e:	82 fb       	bst	r24, 2
 150:	88 27       	eor	r24, r24
 152:	80 f9       	bld	r24, 0
	return 0;
}
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	89 27       	eor	r24, r25
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <CAN_RXInit>:
/* @Return: (type: uint8_t) Index of the mob used                       */
/*                                                                      */
/* @Note: None                                                          */
/************************************************************************/
void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID, uint8_t CanMode)
{
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
//CAN_TXMOB(mob, 2, tData, 0, 2)
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = 0;					//shifts the value sets RTRMSK to zero and IDEMSK to 0
 17a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = 0;
 17e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk<<5) & 0xE0;
 182:	82 2f       	mov	r24, r18
 184:	82 95       	swap	r24
 186:	88 0f       	add	r24, r24
 188:	80 7e       	andi	r24, 0xE0	; 224
 18a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>3) & 0xFF;
 18e:	da 01       	movw	r26, r20
 190:	c9 01       	movw	r24, r18
 192:	68 94       	set
 194:	12 f8       	bld	r1, 2
 196:	b6 95       	lsr	r27
 198:	a7 95       	ror	r26
 19a:	97 95       	ror	r25
 19c:	87 95       	ror	r24
 19e:	16 94       	lsr	r1
 1a0:	d1 f7       	brne	.-12     	; 0x196 <CAN_RXInit+0x30>
 1a2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = 0;					//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
 1a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
 1aa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID<<5) & 0xE0;
 1ae:	8e 2d       	mov	r24, r14
 1b0:	82 95       	swap	r24
 1b2:	88 0f       	add	r24, r24
 1b4:	80 7e       	andi	r24, 0xE0	; 224
 1b6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>3) & 0xFF;
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	68 94       	set
 1c0:	12 f8       	bld	r1, 2
 1c2:	b6 95       	lsr	r27
 1c4:	a7 95       	ror	r26
 1c6:	97 95       	ror	r25
 1c8:	87 95       	ror	r24
 1ca:	16 94       	lsr	r1
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <CAN_RXInit+0x5c>
 1ce:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(CanMode << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	c8 9e       	mul	r12, r24
 1d6:	60 01       	movw	r12, r0
 1d8:	11 24       	eor	r1, r1
 1da:	60 68       	ori	r22, 0x80	; 128
 1dc:	c6 2a       	or	r12, r22
 1de:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <__vector_7>:
}

// skateboard ISRs below  vvv

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
	rotationCounter = 0;
 1fc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotationCounter+0x1>
 200:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 204:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 208:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 20a:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 20c:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) {
 20e:	4e 9b       	sbis	0x09, 6	; 9
 210:	0e c0       	rjmp	.+28     	; 0x22e <__vector_7+0x3e>
		// 3
		PHASE_U_LOW_ON;
 212:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_W_HIGH_ON;
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 3){
 21a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	99 f4       	brne	.+38     	; 0x248 <__vector_7+0x58>
			revolutions++;
 222:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
 22c:	0d c0       	rjmp	.+26     	; 0x248 <__vector_7+0x58>
		}
	} else {
		// 4
		PHASE_W_LOW_ON;
 22e:	28 9a       	sbi	0x05, 0	; 5
		PHASE_U_HIGH_ON;
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 4){
 236:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	29 f4       	brne	.+10     	; 0x248 <__vector_7+0x58>
			revolutions++;
 23e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
		}
	}
}
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
	rotationCounter = 0;
 260:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotationCounter+0x1>
 264:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 268:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 26c:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 26e:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 270:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 272:	1a 9b       	sbis	0x03, 2	; 3
 274:	0e c0       	rjmp	.+28     	; 0x292 <__vector_8+0x3e>
		// 6
		PHASE_V_LOW_ON;
 276:	40 9a       	sbi	0x08, 0	; 8
		PHASE_U_HIGH_ON;
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 6){
 27e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 282:	86 30       	cpi	r24, 0x06	; 6
 284:	99 f4       	brne	.+38     	; 0x2ac <__vector_8+0x58>
			revolutions++;
 286:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__vector_8+0x58>
		}
		} else {
		// 1
		PHASE_U_LOW_ON;
 292:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_V_HIGH_ON;
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 1){
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <__vector_8+0x58>
			revolutions++;
 2a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
		}
	}
}
 2ac:	8f 91       	pop	r24
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	8f 93       	push	r24
	rotationCounter = 0;
 2c4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotationCounter+0x1>
 2c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 2cc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 2d0:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 2d2:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 2d4:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 2d6:	1d 9b       	sbis	0x03, 5	; 3
 2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <__vector_9+0x3e>
		// 5
		PHASE_W_LOW_ON;
 2da:	28 9a       	sbi	0x05, 0	; 5
		PHASE_V_HIGH_ON;
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 5){
 2e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 2e6:	85 30       	cpi	r24, 0x05	; 5
 2e8:	99 f4       	brne	.+38     	; 0x310 <__vector_9+0x58>
			revolutions++;
 2ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <__vector_9+0x58>
		}
		} else {
		// 2
		PHASE_V_LOW_ON;
 2f6:	40 9a       	sbi	0x08, 0	; 8
		PHASE_W_HIGH_ON;
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		if(startPhase == 2){
 2fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <startPhase>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	29 f4       	brne	.+10     	; 0x310 <__vector_9+0x58>
			revolutions++;
 306:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <revolutions>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <revolutions>
		}
	}
}
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <getMotorPosition>:
}
// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{		// ((? & 100000) / 8) +  ((? & 100) / 2)   + ((? & 1000000) / 64)
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 31c:	23 b1       	in	r18, 0x03	; 3
 31e:	93 b1       	in	r25, 0x03	; 3
 320:	89 b1       	in	r24, 0x09	; 9
 322:	20 72       	andi	r18, 0x20	; 32
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	a9 01       	movw	r20, r18
 328:	55 95       	asr	r21
 32a:	47 95       	ror	r20
 32c:	55 95       	asr	r21
 32e:	47 95       	ror	r20
 330:	55 95       	asr	r21
 332:	47 95       	ror	r20
 334:	94 70       	andi	r25, 0x04	; 4
 336:	29 2f       	mov	r18, r25
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	24 0f       	add	r18, r20
 340:	86 fb       	bst	r24, 6
 342:	88 27       	eor	r24, r24
 344:	80 f9       	bld	r24, 0
}
 346:	82 0f       	add	r24, r18
 348:	08 95       	ret

0000034a <kickMotor>:
	}
}

void kickMotor(void)
{
	switch (getMotorPosition())
 34a:	0e 94 8e 01 	call	0x31c	; 0x31c <getMotorPosition>
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	d9 f0       	breq	.+54     	; 0x388 <kickMotor+0x3e>
 352:	28 f4       	brcc	.+10     	; 0x35e <kickMotor+0x14>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	49 f0       	breq	.+18     	; 0x36a <kickMotor+0x20>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	79 f0       	breq	.+30     	; 0x37a <kickMotor+0x30>
 35c:	08 95       	ret
 35e:	85 30       	cpi	r24, 0x05	; 5
 360:	19 f1       	breq	.+70     	; 0x3a8 <kickMotor+0x5e>
 362:	d0 f0       	brcs	.+52     	; 0x398 <kickMotor+0x4e>
 364:	86 30       	cpi	r24, 0x06	; 6
 366:	41 f1       	breq	.+80     	; 0x3b8 <kickMotor+0x6e>
 368:	08 95       	ret
	{
		case 1:
		PHASE_U_LOW_ON;
 36a:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_V_HIGH_ON;
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 378:	08 95       	ret
		case 2:
		PHASE_V_LOW_ON;
 37a:	40 9a       	sbi	0x08, 0	; 8
		PHASE_W_HIGH_ON;
 37c:	80 e3       	ldi	r24, 0x30	; 48
 37e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 2;
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		case 3:
		PHASE_U_LOW_ON;
 388:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_W_HIGH_ON;
 38a:	80 e3       	ldi	r24, 0x30	; 48
 38c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 3;
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 396:	08 95       	ret
		case 4:
		PHASE_W_LOW_ON;
 398:	28 9a       	sbi	0x05, 0	; 5
		PHASE_U_HIGH_ON;
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 4;
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 3a6:	08 95       	ret
		case 5:
		PHASE_W_LOW_ON;
 3a8:	28 9a       	sbi	0x05, 0	; 5
		PHASE_V_HIGH_ON;
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 5;
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
		break;
 3b6:	08 95       	ret
		case 6:
		PHASE_V_LOW_ON;
 3b8:	40 9a       	sbi	0x08, 0	; 8
		PHASE_U_HIGH_ON;
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		startPhase = 6;
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <startPhase>
 3c6:	08 95       	ret

000003c8 <main>:
}


int main(void)
{	
	DDRB |= 0b11001011;				// make the status LED an output
 3c8:	84 b1       	in	r24, 0x04	; 4
 3ca:	8b 6c       	ori	r24, 0xCB	; 203
 3cc:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 3ce:	87 b1       	in	r24, 0x07	; 7
 3d0:	85 60       	ori	r24, 0x05	; 5
 3d2:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 3d4:	8a b1       	in	r24, 0x0a	; 10
 3d6:	81 68       	ori	r24, 0x81	; 129
 3d8:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	84 73       	andi	r24, 0x34	; 52
 3de:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 3e0:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 3e2:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	84 62       	ori	r24, 0x24	; 36
 3e8:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 3ea:	5e 9a       	sbi	0x0b, 6	; 11
	
	PLLCSR = 0x02;			//start PLL at INTERRUPTS
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	89 bd       	out	0x29, r24	; 41
	
	//32MHz
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 3f0:	85 e1       	ldi	r24, 0x15	; 21
 3f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0 TIMER0_OVF_vect
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	8d bb       	out	0x1d, r24	; 29

	// start the CAN interface
	CAN_init();		// Initialise CAN
 3fa:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);  // Receive a message
 3fe:	cc 24       	eor	r12, r12
 400:	c3 94       	inc	r12
 402:	e1 2c       	mov	r14, r1
 404:	f1 2c       	mov	r15, r1
 406:	00 e0       	ldi	r16, 0x00	; 0
 408:	14 e0       	ldi	r17, 0x04	; 4
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	54 e0       	ldi	r21, 0x04	; 4
 412:	68 e0       	ldi	r22, 0x08	; 8
 414:	85 e0       	ldi	r24, 0x05	; 5
 416:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>

	// start the interrupts
	sei();	
 41a:	78 94       	sei

	//PSC
	// PWM setup code.
	
	POCR_RB = 256;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 424:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 428:	8c ed       	ldi	r24, 0xDC	; 220
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 430:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 434:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 438:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 43c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 440:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 444:	82 ed       	ldi	r24, 0xD2	; 210
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 44c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 450:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 454:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 458:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 45c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 460:	8c e1       	ldi	r24, 0x1C	; 28
 462:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 466:	81 e2       	ldi	r24, 0x21	; 33
 468:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>

	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 46c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 470:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 472:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 474:	28 98       	cbi	0x05, 0	; 5

	uint8_t mob = 1;	
	uint8_t motorState = 0;
 476:	80 e0       	ldi	r24, 0x00	; 0
	
	
	while(1)
	{
		motorCommand = 250 - testChar;
 478:	0f 2e       	mov	r0, r31
 47a:	fa ef       	ldi	r31, 0xFA	; 250
 47c:	5f 2e       	mov	r5, r31
 47e:	f0 2d       	mov	r31, r0
		if(motorCommand < 190) motorCommand = 190;
 480:	0f 2e       	mov	r0, r31
 482:	fe eb       	ldi	r31, 0xBE	; 190
 484:	2f 2e       	mov	r2, r31
 486:	f0 2d       	mov	r31, r0
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		
		else
		{
			POC = 0b00000000;
 488:	c6 eb       	ldi	r28, 0xB6	; 182
 48a:	d0 e0       	ldi	r29, 0x00	; 0
			PHASE_U_HIGH_ON;
 48c:	0f 2e       	mov	r0, r31
 48e:	f3 e0       	ldi	r31, 0x03	; 3
 490:	3f 2e       	mov	r3, r31
 492:	f0 2d       	mov	r31, r0
		if(motorCommand < 190) motorCommand = 190;
		if(motorState == 1)
		{
			// PWM code.
			// 
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 494:	0f 2e       	mov	r0, r31
 496:	fc ea       	ldi	r31, 0xAC	; 172
 498:	af 2e       	mov	r10, r31
 49a:	b1 2c       	mov	r11, r1
 49c:	f0 2d       	mov	r31, r0
 49e:	0f 2e       	mov	r0, r31
 4a0:	f6 ea       	ldi	r31, 0xA6	; 166
 4a2:	cf 2e       	mov	r12, r31
 4a4:	d1 2c       	mov	r13, r1
 4a6:	f0 2d       	mov	r31, r0
 4a8:	0f 2e       	mov	r0, r31
 4aa:	f0 ea       	ldi	r31, 0xA0	; 160
 4ac:	ef 2e       	mov	r14, r31
 4ae:	f1 2c       	mov	r15, r1
 4b0:	f0 2d       	mov	r31, r0
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 4b2:	00 eb       	ldi	r16, 0xB0	; 176
 4b4:	10 e0       	ldi	r17, 0x00	; 0
 4b6:	0f 2e       	mov	r0, r31
 4b8:	fa ea       	ldi	r31, 0xAA	; 170
 4ba:	8f 2e       	mov	r8, r31
 4bc:	91 2c       	mov	r9, r1
 4be:	f0 2d       	mov	r31, r0
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f4 ea       	ldi	r31, 0xA4	; 164
 4c4:	6f 2e       	mov	r6, r31
 4c6:	71 2c       	mov	r7, r1
 4c8:	f0 2d       	mov	r31, r0
			// 1000 LED
			PORTB &= 0b00000000;
		}
		else 
		{
			motorState = 1;
 4ca:	44 24       	eor	r4, r4
 4cc:	43 94       	inc	r4
	uint8_t motorState = 0;
	
	
	while(1)
	{
		motorCommand = 250 - testChar;
 4ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <testChar>
 4d2:	25 2d       	mov	r18, r5
 4d4:	29 1b       	sub	r18, r25
 4d6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
		if(motorCommand < 190) motorCommand = 190;
 4da:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 4de:	9e 3b       	cpi	r25, 0xBE	; 190
 4e0:	10 f4       	brcc	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	20 92 02 01 	sts	0x0102, r2	; 0x800102 <__data_end>
		if(motorState == 1)
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	d1 f4       	brne	.+52     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
		{
			// PWM code.
			// 
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 4ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	f5 01       	movw	r30, r10
 4f2:	91 83       	std	Z+1, r25	; 0x01
 4f4:	80 83       	st	Z, r24
 4f6:	f6 01       	movw	r30, r12
 4f8:	91 83       	std	Z+1, r25	; 0x01
 4fa:	80 83       	st	Z, r24
 4fc:	f7 01       	movw	r30, r14
 4fe:	91 83       	std	Z+1, r25	; 0x01
 500:	80 83       	st	Z, r24
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 502:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0a 97       	sbiw	r24, 0x0a	; 10
 50a:	f8 01       	movw	r30, r16
 50c:	91 83       	std	Z+1, r25	; 0x01
 50e:	80 83       	st	Z, r24
 510:	f4 01       	movw	r30, r8
 512:	91 83       	std	Z+1, r25	; 0x01
 514:	80 83       	st	Z, r24
 516:	f3 01       	movw	r30, r6
 518:	91 83       	std	Z+1, r25	; 0x01
 51a:	80 83       	st	Z, r24
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		}
		
		else
		{
			POC = 0b00000000;
 51e:	18 82       	st	Y, r1
			PHASE_U_HIGH_ON;
 520:	38 82       	st	Y, r3
			PHASE_V_LOW_OFF;
 522:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 524:	28 98       	cbi	0x05, 0	; 5
		}
		if(rotationCounter < 100) rotationCounter ++;
 526:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotationCounter>
 52a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotationCounter+0x1>
 52e:	84 36       	cpi	r24, 0x64	; 100
 530:	91 05       	cpc	r25, r1
 532:	48 f4       	brcc	.+18     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 534:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotationCounter>
 538:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotationCounter+0x1>
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotationCounter+0x1>
 542:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotationCounter>
		if(rotationCounter > 99)
 546:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotationCounter>
 54a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotationCounter+0x1>
 54e:	84 36       	cpi	r24, 0x64	; 100
 550:	91 05       	cpc	r25, r1
 552:	40 f0       	brcs	.+16     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			motorState = 0;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB &= ~8; // turn all port B off
			// 1000 LED
			PORTB &= 0b00000000;
 554:	85 b1       	in	r24, 0x05	; 5
 556:	15 b8       	out	0x05, r1	; 5
			// 0000 LED
			PORTB |= 0b11110111;
		}

		
		if((motorState == 0) && (motorCommand < 225))
 558:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 55c:	81 3e       	cpi	r24, 0xE1	; 225
 55e:	38 f0       	brcs	.+14     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	b5 cf       	rjmp	.-150    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
			motorState = 1;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB |= 8; // turn all port B on
			// 0000 LED
			PORTB |= 0b11110111;
 564:	85 b1       	in	r24, 0x05	; 5
 566:	87 6f       	ori	r24, 0xF7	; 247
 568:	85 b9       	out	0x05, r24	; 5
			// 1000 LED
			PORTB &= 0b00000000;
		}
		else 
		{
			motorState = 1;
 56a:	84 2d       	mov	r24, r4
 56c:	b0 cf       	rjmp	.-160    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
 56e:	0e 94 a5 01 	call	0x34a	; 0x34a <kickMotor>
			motorState = 1;	
			rotationCounter = 0;
 572:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <rotationCounter+0x1>
 576:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter>

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
			motorState = 1;	
 57a:	84 2d       	mov	r24, r4
 57c:	a8 cf       	rjmp	.-176    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

0000057e <toggle_led>:
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
}


void toggle_led(void){
	PORTB ^= 0b00001000;
 57e:	95 b1       	in	r25, 0x05	; 5
 580:	88 e0       	ldi	r24, 0x08	; 8
 582:	89 27       	eor	r24, r25
 584:	85 b9       	out	0x05, r24	; 5
 586:	08 95       	ret

00000588 <__vector_18>:
volatile uint16_t rotationCounter = 0;
volatile uint8_t motorCommand = 0;
//uint8_t tData [1] = {111};

ISR(CAN_INT_vect)
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	cf 92       	push	r12
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
	//uint8_t authority;
	//int8_t mob;
	if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 5b4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 5b8:	85 ff       	sbrs	r24, 5
 5ba:	2c c0       	rjmp	.+88     	; 0x614 <__vector_18+0x8c>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 5bc:	80 e5       	ldi	r24, 0x50	; 80
 5be:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		testChar = CANMSG;
 5c2:	ea ef       	ldi	r30, 0xFA	; 250
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <testChar>
		
		uint8_t tempChar1 = CANMSG;
 5cc:	80 81       	ld	r24, Z
		uint8_t tData2 [1] = {tempChar1};
		tempChar1 = CANMSG;
 5ce:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 5d0:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 5d2:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 5d4:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 5d6:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 5d8:	80 81       	ld	r24, Z
		toggle_led();
 5da:	0e 94 bf 02 	call	0x57e	; 0x57e <toggle_led>
		if(CAN_SEND_BACK_COUNTER >= CAN_SEND_BACK_MAX){
 5de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <CAN_SEND_BACK_COUNTER>
 5e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <CAN_SEND_BACK_MAX>
 5e6:	98 17       	cp	r25, r24
 5e8:	10 f0       	brcs	.+4      	; 0x5ee <__vector_18+0x66>
			//CAN_TXMOB(1, 1, tData2, 0x5555555, 1);
			CAN_SEND_BACK_COUNTER = 0;
 5ea:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <CAN_SEND_BACK_COUNTER>
		}
		CAN_SEND_BACK_COUNTER++;
 5ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <CAN_SEND_BACK_COUNTER>
 5f2:	8f 5f       	subi	r24, 0xFF	; 255
 5f4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <CAN_SEND_BACK_COUNTER>
		CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 5f8:	cc 24       	eor	r12, r12
 5fa:	c3 94       	inc	r12
 5fc:	e1 2c       	mov	r14, r1
 5fe:	f1 2c       	mov	r15, r1
 600:	00 e0       	ldi	r16, 0x00	; 0
 602:	14 e0       	ldi	r17, 0x04	; 4
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	54 e0       	ldi	r21, 0x04	; 4
 60c:	68 e0       	ldi	r22, 0x08	; 8
 60e:	85 e0       	ldi	r24, 0x05	; 5
 610:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
		
	}
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	cf 90       	pop	r12
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
