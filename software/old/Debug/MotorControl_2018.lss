
MotorControl_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000008c0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  0000095e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001143  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cba  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a20  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000793  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000730  00000000  00000000  00003c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_7>
  20:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_8>
  24:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ec       	ldi	r30, 0xC0	; 192
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 b4 03 	call	0x768	; 0x768 <main>
  b2:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0d ee       	ldi	r16, 0xED	; 237
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	6f ee       	ldi	r22, 0xEF	; 239
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	4e ee       	ldi	r20, 0xEE	; 238
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	27 ef       	ldi	r18, 0xF7	; 247
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	c6 ef       	ldi	r28, 0xF6	; 246
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	a5 ef       	ldi	r26, 0xF5	; 245
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 ef       	ldi	r31, 0xF4	; 244
  ea:	ef 2e       	mov	r14, r31
  ec:	f1 2c       	mov	r15, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	98 2f       	mov	r25, r24
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	f8 01       	movw	r30, r16
  f8:	90 83       	st	Z, r25
  fa:	fb 01       	movw	r30, r22
  fc:	10 82       	st	Z, r1
  fe:	fa 01       	movw	r30, r20
 100:	10 82       	st	Z, r1
 102:	f9 01       	movw	r30, r18
 104:	10 82       	st	Z, r1
 106:	18 82       	st	Y, r1
 108:	1c 92       	st	X, r1
 10a:	f7 01       	movw	r30, r14
 10c:	10 82       	st	Z, r1
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 120:	83 e1       	ldi	r24, 0x13	; 19
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ff ef       	ldi	r31, 0xFF	; 255
 13a:	20 e7       	ldi	r18, 0x70	; 112
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	f1 50       	subi	r31, 0x01	; 1
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
 148:	00 00       	nop
 14a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 14e:	82 fb       	bst	r24, 2
 150:	88 27       	eor	r24, r24
 152:	80 f9       	bld	r24, 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	89 27       	eor	r24, r25
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <CAN_RXInit>:
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 17a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 17e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 182:	82 2f       	mov	r24, r18
 184:	82 95       	swap	r24
 186:	88 0f       	add	r24, r24
 188:	80 7e       	andi	r24, 0xE0	; 224
 18a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 18e:	da 01       	movw	r26, r20
 190:	c9 01       	movw	r24, r18
 192:	68 94       	set
 194:	12 f8       	bld	r1, 2
 196:	b6 95       	lsr	r27
 198:	a7 95       	ror	r26
 19a:	97 95       	ror	r25
 19c:	87 95       	ror	r24
 19e:	16 94       	lsr	r1
 1a0:	d1 f7       	brne	.-12     	; 0x196 <CAN_RXInit+0x30>
 1a2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1aa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1ae:	8e 2d       	mov	r24, r14
 1b0:	82 95       	swap	r24
 1b2:	88 0f       	add	r24, r24
 1b4:	80 7e       	andi	r24, 0xE0	; 224
 1b6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	68 94       	set
 1c0:	12 f8       	bld	r1, 2
 1c2:	b6 95       	lsr	r27
 1c4:	a7 95       	ror	r26
 1c6:	97 95       	ror	r25
 1c8:	87 95       	ror	r24
 1ca:	16 94       	lsr	r1
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <CAN_RXInit+0x5c>
 1ce:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	c8 9e       	mul	r12, r24
 1d6:	60 01       	movw	r12, r0
 1d8:	11 24       	eor	r1, r1
 1da:	60 68       	ori	r22, 0x80	; 128
 1dc:	c6 2a       	or	r12, r22
 1de:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <CAN_TXMOB>:
 1f0:	ef 92       	push	r14
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	82 95       	swap	r24
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1fe:	ee ee       	ldi	r30, 0xEE	; 238
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8f 7b       	andi	r24, 0xBF	; 191
 206:	80 83       	st	Z, r24
 208:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 20c:	80 2f       	mov	r24, r16
 20e:	88 0f       	add	r24, r24
 210:	88 0f       	add	r24, r24
 212:	88 0f       	add	r24, r24
 214:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 218:	d9 01       	movw	r26, r18
 21a:	c8 01       	movw	r24, r16
 21c:	68 94       	set
 21e:	14 f8       	bld	r1, 4
 220:	b6 95       	lsr	r27
 222:	a7 95       	ror	r26
 224:	97 95       	ror	r25
 226:	87 95       	ror	r24
 228:	16 94       	lsr	r1
 22a:	d1 f7       	brne	.-12     	; 0x220 <CAN_TXMOB+0x30>
 22c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 230:	d9 01       	movw	r26, r18
 232:	c8 01       	movw	r24, r16
 234:	07 2e       	mov	r0, r23
 236:	7d e0       	ldi	r23, 0x0D	; 13
 238:	b6 95       	lsr	r27
 23a:	a7 95       	ror	r26
 23c:	97 95       	ror	r25
 23e:	87 95       	ror	r24
 240:	7a 95       	dec	r23
 242:	d1 f7       	brne	.-12     	; 0x238 <CAN_TXMOB+0x48>
 244:	70 2d       	mov	r23, r0
 246:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 24a:	0f 2e       	mov	r0, r31
 24c:	f5 e1       	ldi	r31, 0x15	; 21
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	17 95       	ror	r17
 254:	07 95       	ror	r16
 256:	fa 95       	dec	r31
 258:	d1 f7       	brne	.-12     	; 0x24e <CAN_TXMOB+0x5e>
 25a:	f0 2d       	mov	r31, r0
 25c:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 260:	66 23       	and	r22, r22
 262:	71 f0       	breq	.+28     	; 0x280 <CAN_TXMOB+0x90>
 264:	fa 01       	movw	r30, r20
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	86 0f       	add	r24, r22
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	48 0f       	add	r20, r24
 270:	59 1f       	adc	r21, r25
 272:	aa ef       	ldi	r26, 0xFA	; 250
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	81 91       	ld	r24, Z+
 278:	8c 93       	st	X, r24
 27a:	e4 17       	cp	r30, r20
 27c:	f5 07       	cpc	r31, r21
 27e:	d9 f7       	brne	.-10     	; 0x276 <CAN_TXMOB+0x86>
 280:	60 65       	ori	r22, 0x50	; 80
 282:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 286:	ee 20       	and	r14, r14
 288:	a1 f0       	breq	.+40     	; 0x2b2 <CAN_TXMOB+0xc2>
 28a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 28e:	86 fd       	sbrc	r24, 6
 290:	10 c0       	rjmp	.+32     	; 0x2b2 <CAN_TXMOB+0xc2>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	ee ee       	ldi	r30, 0xEE	; 238
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <CAN_TXMOB+0xb0>
 29a:	90 81       	ld	r25, Z
 29c:	96 fd       	sbrc	r25, 6
 29e:	09 c0       	rjmp	.+18     	; 0x2b2 <CAN_TXMOB+0xc2>
 2a0:	af e9       	ldi	r26, 0x9F	; 159
 2a2:	bf e0       	ldi	r27, 0x0F	; 15
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <CAN_TXMOB+0xb4>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <CAN_TXMOB+0xba>
 2aa:	00 00       	nop
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	e8 12       	cpse	r14, r24
 2b0:	f4 cf       	rjmp	.-24     	; 0x29a <CAN_TXMOB+0xaa>
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <__vector_18>:
uint8_t tData2[8] = {65,66,67,68,69,70,71,72};
int8_t response_CAN = 0;
//uint8_t tData [1] = {111};

ISR(CAN_INT_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	cf 92       	push	r12
 2c6:	ef 92       	push	r14
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	cf 93       	push	r28
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	int8_t savecanpage;

	savecanpage = CANPAGE;
 2e8:	c0 91 ed 00 	lds	r28, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	if(CANSTMOB & ( 1 << RXOK)){
 2ec:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 2f0:	85 ff       	sbrs	r24, 5
 2f2:	1c c0       	rjmp	.+56     	; 0x32c <__vector_18+0x72>
		if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 2f4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	18 c0       	rjmp	.+48     	; 0x32c <__vector_18+0x72>
		{
		
			CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 2fc:	80 e5       	ldi	r24, 0x50	; 80
 2fe:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			testChar = CANMSG;
 302:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 306:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <testChar>
			response_CAN = 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

			CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 310:	cc 24       	eor	r12, r12
 312:	c3 94       	inc	r12
 314:	e1 2c       	mov	r14, r1
 316:	f1 2c       	mov	r15, r1
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	14 e0       	ldi	r17, 0x04	; 4
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	54 e0       	ldi	r21, 0x04	; 4
 324:	68 e0       	ldi	r22, 0x08	; 8
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
		}
	}

	CANSTMOB = 0x00;
 32c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = savecanpage;
 330:	c0 93 ed 00 	sts	0x00ED, r28	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	cf 91       	pop	r28
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	7f 91       	pop	r23
 344:	6f 91       	pop	r22
 346:	5f 91       	pop	r21
 348:	4f 91       	pop	r20
 34a:	3f 91       	pop	r19
 34c:	2f 91       	pop	r18
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	cf 90       	pop	r12
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
	//oneKHzTimer();
	//uart_puts("HelloWorld!");
	//char msg[12];
	//sprintf(msg, "r: %d", out);
	//uart_puts(msg);
}
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <setupInverter>:
		}
	}
}

void setupInverter(void)
{
 376:	cf 92       	push	r12
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
	DDRB |= 0b11001011;				// make the status LED an output
 380:	84 b1       	in	r24, 0x04	; 4
 382:	8b 6c       	ori	r24, 0xCB	; 203
 384:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 386:	87 b1       	in	r24, 0x07	; 7
 388:	85 60       	ori	r24, 0x05	; 5
 38a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 38c:	8a b1       	in	r24, 0x0a	; 10
 38e:	81 68       	ori	r24, 0x81	; 129
 390:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 392:	85 b1       	in	r24, 0x05	; 5
 394:	84 73       	andi	r24, 0x34	; 52
 396:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 398:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 39a:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	84 62       	ori	r24, 0x24	; 36
 3a0:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 3a2:	5e 9a       	sbi	0x0b, 6	; 11
	
	
	PLLCSR = 0x02;			//start PLL at INTERRUPTS
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	89 bd       	out	0x29, r24	; 41
	
	//32MHz
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 3a8:	85 e1       	ldi	r24, 0x15	; 21
 3aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0 TIMER0_OVF_vect
 3ae:	87 e0       	ldi	r24, 0x07	; 7
 3b0:	8d bb       	out	0x1d, r24	; 29

	// start the CAN interface
	CAN_init();		// Initialise CAN
 3b2:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);  // Receive a message
 3b6:	cc 24       	eor	r12, r12
 3b8:	c3 94       	inc	r12
 3ba:	e1 2c       	mov	r14, r1
 3bc:	f1 2c       	mov	r15, r1
 3be:	00 e0       	ldi	r16, 0x00	; 0
 3c0:	14 e0       	ldi	r17, 0x04	; 4
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	54 e0       	ldi	r21, 0x04	; 4
 3ca:	68 e0       	ldi	r22, 0x08	; 8
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>

	// start the interrupts
	sei();
 3d2:	78 94       	sei

	//PSC
	// PWM setup code.
	
	POCR_RB = 256;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3dc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 3e0:	8c ed       	ldi	r24, 0xDC	; 220
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 3e8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 3ec:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 3f0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 3f4:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 3f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 3fc:	82 ed       	ldi	r24, 0xD2	; 210
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 404:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 408:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 40c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 410:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 414:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 418:	8c e1       	ldi	r24, 0x1C	; 28
 41a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 41e:	81 e2       	ldi	r24, 0x21	; 33
 420:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>

	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 424:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 428:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 42a:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 42c:	28 98       	cbi	0x05, 0	; 5

	//set timer1 interrupt at 1Hz
	TCCR1A = 0;// set entire TCCR1A register to 0
 42e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;// same for TCCR1B
 432:	e1 e8       	ldi	r30, 0x81	; 129
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	10 82       	st	Z, r1
	TCNT1  = 0;//initialize counter value to 0
 438:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 43c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// set compare match register for 1hz increments
	OCR1A = 15624;// = (16*10^6) / (1*1024) - 1 (must be <65536)
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	9d e3       	ldi	r25, 0x3D	; 61
 444:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 448:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// turn on CTC mode
	TCCR1B |= (1 << WGM12);
 44c:	80 81       	ld	r24, Z
 44e:	88 60       	ori	r24, 0x08	; 8
 450:	80 83       	st	Z, r24
	// Set CS12 and CS10 bits for 1024 prescaler
	TCCR1B |= (1 << CS12) | (1 << CS10);
 452:	80 81       	ld	r24, Z
 454:	85 60       	ori	r24, 0x05	; 5
 456:	80 83       	st	Z, r24
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 458:	ef e6       	ldi	r30, 0x6F	; 111
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	80 83       	st	Z, r24
}
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	cf 90       	pop	r12
 46c:	08 95       	ret

0000046e <__vector_7>:

// skateboard ISRs below  vvv

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
	rotationCounter = 0;
 47c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 480:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 484:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 488:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 48a:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 48c:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) {
 48e:	4e 9b       	sbis	0x09, 6	; 9
 490:	19 c0       	rjmp	.+50     	; 0x4c4 <__vector_7+0x56>
		//_delay_ms(0.25);
		// 3
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 492:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 496:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 49a:	98 13       	cpse	r25, r24
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__vector_7+0x3a>
		{
			//anti-clock wise
			PHASE_U_HIGH_ON;
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_W_LOW_ON;
 4a4:	28 9a       	sbi	0x05, 0	; 5
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__vector_7+0x42>
		}else{
			//clock wise
			PHASE_U_LOW_ON;
 4a8:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 3){
 4b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	f1 f4       	brne	.+60     	; 0x4f4 <__vector_7+0x86>
			revolutions++;
 4b8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 4bc:	8f 5f       	subi	r24, 0xFF	; 255
 4be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 4c2:	18 c0       	rjmp	.+48     	; 0x4f4 <__vector_7+0x86>
		}
	} else {
		//_delay_ms(0.25);
		// 4
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 4c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 4c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 4cc:	98 13       	cpse	r25, r24
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__vector_7+0x6c>
		{
			//anti-clock wise
			PHASE_U_LOW_ON;
 4d0:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 4d2:	80 e3       	ldi	r24, 0x30	; 48
 4d4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_7+0x74>
		}else{
			//clock wise
			PHASE_W_LOW_ON;
 4da:	28 9a       	sbi	0x05, 0	; 5
			PHASE_U_HIGH_ON;
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 4){
 4e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 4e6:	84 30       	cpi	r24, 0x04	; 4
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <__vector_7+0x86>
			revolutions++;
 4ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
	rotationCounter = 0;
 510:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 514:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 518:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 51c:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 51e:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 520:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 522:	1a 9b       	sbis	0x03, 2	; 3
 524:	19 c0       	rjmp	.+50     	; 0x558 <__vector_8+0x56>
		// 6
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 526:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 52a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 52e:	98 13       	cpse	r25, r24
 530:	05 c0       	rjmp	.+10     	; 0x53c <__vector_8+0x3a>
		{
			//anti-clock wise
			PHASE_U_LOW_ON;
 532:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 53a:	04 c0       	rjmp	.+8      	; 0x544 <__vector_8+0x42>
		}else{
			//clock wise
			PHASE_V_LOW_ON;
 53c:	40 9a       	sbi	0x08, 0	; 8
			PHASE_U_HIGH_ON;
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 6){
 544:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 548:	86 30       	cpi	r24, 0x06	; 6
 54a:	f1 f4       	brne	.+60     	; 0x588 <__vector_8+0x86>
			revolutions++;
 54c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 556:	18 c0       	rjmp	.+48     	; 0x588 <__vector_8+0x86>
		}
	} else {
		// 1
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 558:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 55c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 560:	98 13       	cpse	r25, r24
 562:	05 c0       	rjmp	.+10     	; 0x56e <__vector_8+0x6c>
		{
			//anti-clock wise
			PHASE_U_HIGH_ON;
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_V_LOW_ON;
 56a:	40 9a       	sbi	0x08, 0	; 8
 56c:	04 c0       	rjmp	.+8      	; 0x576 <__vector_8+0x74>
		}else{
			//clock wise
			PHASE_U_LOW_ON;
 56e:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 570:	8c e0       	ldi	r24, 0x0C	; 12
 572:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 1){
 576:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	29 f4       	brne	.+10     	; 0x588 <__vector_8+0x86>
			revolutions++;
 57e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
	rotationCounter = 0;
 5a4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 5a8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 5ac:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 5b0:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 5b2:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 5b4:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 5b6:	1d 9b       	sbis	0x03, 5	; 3
 5b8:	19 c0       	rjmp	.+50     	; 0x5ec <__vector_9+0x56>
		// 5
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 5ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 5be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 5c2:	98 13       	cpse	r25, r24
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__vector_9+0x3a>
		{
			//anti-clock wise
			PHASE_W_HIGH_ON;
 5c6:	80 e3       	ldi	r24, 0x30	; 48
 5c8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_V_LOW_ON;
 5cc:	40 9a       	sbi	0x08, 0	; 8
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__vector_9+0x42>
		}else{
			//clock wise
			PHASE_W_LOW_ON;
 5d0:	28 9a       	sbi	0x05, 0	; 5
			PHASE_V_HIGH_ON;
 5d2:	8c e0       	ldi	r24, 0x0C	; 12
 5d4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 5){
 5d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 5dc:	85 30       	cpi	r24, 0x05	; 5
 5de:	f1 f4       	brne	.+60     	; 0x61c <__vector_9+0x86>
			revolutions++;
 5e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 5ea:	18 c0       	rjmp	.+48     	; 0x61c <__vector_9+0x86>
		}
	} else {
		// 2
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 5ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 5f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 5f4:	98 13       	cpse	r25, r24
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <__vector_9+0x6c>
		{
			//anti-clock wise
			PHASE_V_HIGH_ON;
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			PHASE_W_LOW_ON;
 5fe:	28 9a       	sbi	0x05, 0	; 5
 600:	04 c0       	rjmp	.+8      	; 0x60a <__vector_9+0x74>
		}else{
			//clock wise
			PHASE_V_LOW_ON;
 602:	40 9a       	sbi	0x08, 0	; 8
			PHASE_W_HIGH_ON;
 604:	80 e3       	ldi	r24, 0x30	; 48
 606:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 2){
 60a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	29 f4       	brne	.+10     	; 0x61c <__vector_9+0x86>
			revolutions++;
 612:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <getMotorPosition>:

// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{		// ((? & 100000) / 8) +  ((? & 100) / 2)   + ((? & 1000000) / 64)
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 62a:	23 b1       	in	r18, 0x03	; 3
 62c:	93 b1       	in	r25, 0x03	; 3
 62e:	89 b1       	in	r24, 0x09	; 9
 630:	20 72       	andi	r18, 0x20	; 32
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	a9 01       	movw	r20, r18
 636:	55 95       	asr	r21
 638:	47 95       	ror	r20
 63a:	55 95       	asr	r21
 63c:	47 95       	ror	r20
 63e:	55 95       	asr	r21
 640:	47 95       	ror	r20
 642:	94 70       	andi	r25, 0x04	; 4
 644:	29 2f       	mov	r18, r25
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	35 95       	asr	r19
 64a:	27 95       	ror	r18
 64c:	24 0f       	add	r18, r20
 64e:	86 fb       	bst	r24, 6
 650:	88 27       	eor	r24, r24
 652:	80 f9       	bld	r24, 0
}
 654:	82 0f       	add	r24, r18
 656:	08 95       	ret

00000658 <kickMotor>:
	}
}

void kickMotor(void)
{
	switch (getMotorPosition())
 658:	0e 94 15 03 	call	0x62a	; 0x62a <getMotorPosition>
 65c:	83 30       	cpi	r24, 0x03	; 3
 65e:	99 f1       	breq	.+102    	; 0x6c6 <kickMotor+0x6e>
 660:	28 f4       	brcc	.+10     	; 0x66c <kickMotor+0x14>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	59 f0       	breq	.+22     	; 0x67c <kickMotor+0x24>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	e1 f0       	breq	.+56     	; 0x6a2 <kickMotor+0x4a>
 66a:	08 95       	ret
 66c:	85 30       	cpi	r24, 0x05	; 5
 66e:	09 f4       	brne	.+2      	; 0x672 <kickMotor+0x1a>
 670:	50 c0       	rjmp	.+160    	; 0x712 <kickMotor+0xba>
 672:	e0 f1       	brcs	.+120    	; 0x6ec <kickMotor+0x94>
 674:	86 30       	cpi	r24, 0x06	; 6
 676:	09 f4       	brne	.+2      	; 0x67a <kickMotor+0x22>
 678:	5f c0       	rjmp	.+190    	; 0x738 <kickMotor+0xe0>
 67a:	08 95       	ret
	{
		case 1:
			// 1
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 67c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 680:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 684:	98 13       	cpse	r25, r24
 686:	05 c0       	rjmp	.+10     	; 0x692 <kickMotor+0x3a>
			{
				//anti-clock wise
				PHASE_U_HIGH_ON;
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_V_LOW_ON;
 68e:	40 9a       	sbi	0x08, 0	; 8
 690:	04 c0       	rjmp	.+8      	; 0x69a <kickMotor+0x42>
			}else{
				//clock wise
				PHASE_U_LOW_ON;
 692:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_V_HIGH_ON;
 694:	8c e0       	ldi	r24, 0x0C	; 12
 696:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
			break;
 6a0:	08 95       	ret
		case 2:
			// 2
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 6a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 6a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 6aa:	98 13       	cpse	r25, r24
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <kickMotor+0x60>
			{
				//anti-clock wise
				PHASE_V_HIGH_ON;
 6ae:	8c e0       	ldi	r24, 0x0C	; 12
 6b0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 6b4:	28 9a       	sbi	0x05, 0	; 5
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <kickMotor+0x68>
			}else{
				//clock wise
				PHASE_V_LOW_ON;
 6b8:	40 9a       	sbi	0x08, 0	; 8
				PHASE_W_HIGH_ON;
 6ba:	80 e3       	ldi	r24, 0x30	; 48
 6bc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 2;
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
		case 3:
			// 3
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 6c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 6ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 6ce:	98 13       	cpse	r25, r24
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <kickMotor+0x84>
			{
				//anti-clock wise
				PHASE_U_HIGH_ON;
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 6d8:	28 9a       	sbi	0x05, 0	; 5
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <kickMotor+0x8c>
			}else{
				//clock wise
				PHASE_U_LOW_ON;
 6dc:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_W_HIGH_ON;
 6de:	80 e3       	ldi	r24, 0x30	; 48
 6e0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 3;
 6e4:	83 e0       	ldi	r24, 0x03	; 3
 6e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
		break;
 6ea:	08 95       	ret
		case 4:
			// 4
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 6ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 6f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 6f4:	98 13       	cpse	r25, r24
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <kickMotor+0xaa>
			{
				//anti-clock wise
				PHASE_U_LOW_ON;
 6f8:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_W_HIGH_ON;
 6fa:	80 e3       	ldi	r24, 0x30	; 48
 6fc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 700:	04 c0       	rjmp	.+8      	; 0x70a <kickMotor+0xb2>
			}else{
				//clock wise
				PHASE_W_LOW_ON;
 702:	28 9a       	sbi	0x05, 0	; 5
				PHASE_U_HIGH_ON;
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 4;
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
		break;
 710:	08 95       	ret
		case 5:
			// 5
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 712:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 716:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 71a:	98 13       	cpse	r25, r24
 71c:	05 c0       	rjmp	.+10     	; 0x728 <kickMotor+0xd0>
			{
				//anti-clock wise
				PHASE_W_HIGH_ON;
 71e:	80 e3       	ldi	r24, 0x30	; 48
 720:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_V_LOW_ON;
 724:	40 9a       	sbi	0x08, 0	; 8
 726:	04 c0       	rjmp	.+8      	; 0x730 <kickMotor+0xd8>
			}else{
				//clock wise
				PHASE_W_LOW_ON;
 728:	28 9a       	sbi	0x05, 0	; 5
				PHASE_V_HIGH_ON;
 72a:	8c e0       	ldi	r24, 0x0C	; 12
 72c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 5;
 730:	85 e0       	ldi	r24, 0x05	; 5
 732:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
		break;
 736:	08 95       	ret
		case 6:
			// 6
			//_delay_ms(0.25);
			if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 738:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 73c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 740:	98 13       	cpse	r25, r24
 742:	05 c0       	rjmp	.+10     	; 0x74e <kickMotor+0xf6>
			{
				//anti-clock wise
				PHASE_U_LOW_ON;
 744:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_V_HIGH_ON;
 746:	8c e0       	ldi	r24, 0x0C	; 12
 748:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 74c:	04 c0       	rjmp	.+8      	; 0x756 <kickMotor+0xfe>
			}else{
				//clock wise
				PHASE_V_LOW_ON;
 74e:	40 9a       	sbi	0x08, 0	; 8
				PHASE_U_HIGH_ON;
 750:	83 e0       	ldi	r24, 0x03	; 3
 752:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			}
			startPhase = 6;
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <startPhase>
 75c:	08 95       	ret

0000075e <toggle_led>:
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
}


void toggle_led(void){
	PORTB ^= 0b00001000;
 75e:	95 b1       	in	r25, 0x05	; 5
 760:	88 e0       	ldi	r24, 0x08	; 8
 762:	89 27       	eor	r24, r25
 764:	85 b9       	out	0x05, r24	; 5
 766:	08 95       	ret

00000768 <main>:
int main(void)
{
	// Choose which direction the motor will spin on
	// CLOCK_WISE
	// ANTI_CLOCK_WISE
	WHICH_DIRECTION = CLOCK_WISE;
 768:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CLOCK_WISE>
 76c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WHICH_DIRECTION>
	
	setupInverter();
 770:	0e 94 bb 01 	call	0x376	; 0x376 <setupInverter>
	
	uint8_t motorState = 0;
 774:	f1 2c       	mov	r15, r1
			cleanMotorCommand = 0;
		}
		
		tempStorage = cleanMotorCommand;
		
		motorCommand = 250 - cleanMotorCommand;
 776:	0f 2e       	mov	r0, r31
 778:	fa ef       	ldi	r31, 0xFA	; 250
 77a:	5f 2e       	mov	r5, r31
 77c:	f0 2d       	mov	r31, r0
		
		// Check motor command range
		if(motorCommand < 190){
			motorCommand = 190;
 77e:	0f 2e       	mov	r0, r31
 780:	fe eb       	ldi	r31, 0xBE	; 190
 782:	2f 2e       	mov	r2, r31
 784:	f0 2d       	mov	r31, r0
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		else
		{
			POC = 0b00000000;
 786:	c6 eb       	ldi	r28, 0xB6	; 182
 788:	d0 e0       	ldi	r29, 0x00	; 0
			PHASE_U_HIGH_ON;
 78a:	0f 2e       	mov	r0, r31
 78c:	f3 e0       	ldi	r31, 0x03	; 3
 78e:	3f 2e       	mov	r3, r31
 790:	f0 2d       	mov	r31, r0
		}
		
		if(motorState == 1)
		{
			// PWM code.
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 792:	0f 2e       	mov	r0, r31
 794:	fc ea       	ldi	r31, 0xAC	; 172
 796:	6f 2e       	mov	r6, r31
 798:	71 2c       	mov	r7, r1
 79a:	f0 2d       	mov	r31, r0
 79c:	0f 2e       	mov	r0, r31
 79e:	f6 ea       	ldi	r31, 0xA6	; 166
 7a0:	8f 2e       	mov	r8, r31
 7a2:	91 2c       	mov	r9, r1
 7a4:	f0 2d       	mov	r31, r0
 7a6:	0f 2e       	mov	r0, r31
 7a8:	f0 ea       	ldi	r31, 0xA0	; 160
 7aa:	af 2e       	mov	r10, r31
 7ac:	b1 2c       	mov	r11, r1
 7ae:	f0 2d       	mov	r31, r0
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 7b0:	dd 24       	eor	r13, r13
 7b2:	d3 94       	inc	r13
 7b4:	41 2c       	mov	r4, r1
	uint8_t motorState = 0;
	uint8_t motorMaxAccelration = 6;
	
	while(1)
	{
		cleanMotorCommand = testChar;
 7b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <testChar>
 7ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cleanMotorCommand>
			not jump more than 10% in torque power
		
		range: 250 to 190. 10% of the range is 6. thus, the 6.
			Change as and if needed
		*/
		if (cleanMotorCommand - tempStorage > motorMaxAccelration){
 7be:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <tempStorage>
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	82 1b       	sub	r24, r18
 7c6:	91 09       	sbc	r25, r1
 7c8:	07 97       	sbiw	r24, 0x07	; 7
 7ca:	1c f0       	brlt	.+6      	; 0x7d2 <main+0x6a>
			cleanMotorCommand = tempStorage + motorMaxAccelration;
 7cc:	2a 5f       	subi	r18, 0xFA	; 250
 7ce:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cleanMotorCommand>
		// Make sure the range is correct
		if (cleanMotorCommand < 0){
			cleanMotorCommand = 0;
		}
		
		tempStorage = cleanMotorCommand;
 7d2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cleanMotorCommand>
 7d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tempStorage>
		
		motorCommand = 250 - cleanMotorCommand;
 7da:	95 2d       	mov	r25, r5
 7dc:	98 1b       	sub	r25, r24
 7de:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <motorCommand>
		
		// Check motor command range
		if(motorCommand < 190){
 7e2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 7e6:	8e 3b       	cpi	r24, 0xBE	; 190
 7e8:	10 f4       	brcc	.+4      	; 0x7ee <main+0x86>
			motorCommand = 190;
 7ea:	20 92 0b 01 	sts	0x010B, r2	; 0x80010b <motorCommand>
		}
		if(motorCommand > 250){
 7ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 7f2:	8b 3f       	cpi	r24, 0xFB	; 251
 7f4:	10 f0       	brcs	.+4      	; 0x7fa <main+0x92>
			motorCommand = 250;
 7f6:	50 92 0b 01 	sts	0x010B, r5	; 0x80010b <motorCommand>
		}
		
		if(motorState == 1)
 7fa:	e1 e0       	ldi	r30, 0x01	; 1
 7fc:	fe 12       	cpse	r15, r30
 7fe:	1d c0       	rjmp	.+58     	; 0x83a <main+0xd2>
		{
			// PWM code.
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 800:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	f3 01       	movw	r30, r6
 808:	91 83       	std	Z+1, r25	; 0x01
 80a:	80 83       	st	Z, r24
 80c:	f4 01       	movw	r30, r8
 80e:	91 83       	std	Z+1, r25	; 0x01
 810:	80 83       	st	Z, r24
 812:	f5 01       	movw	r30, r10
 814:	91 83       	std	Z+1, r25	; 0x01
 816:	80 83       	st	Z, r24
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 818:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0a 97       	sbiw	r24, 0x0a	; 10
 820:	e0 eb       	ldi	r30, 0xB0	; 176
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	91 83       	std	Z+1, r25	; 0x01
 826:	80 83       	st	Z, r24
 828:	ea ea       	ldi	r30, 0xAA	; 170
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	91 83       	std	Z+1, r25	; 0x01
 82e:	80 83       	st	Z, r24
 830:	e4 ea       	ldi	r30, 0xA4	; 164
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	91 83       	std	Z+1, r25	; 0x01
 836:	80 83       	st	Z, r24
 838:	04 c0       	rjmp	.+8      	; 0x842 <main+0xda>
		}
		else
		{
			POC = 0b00000000;
 83a:	18 82       	st	Y, r1
			PHASE_U_HIGH_ON;
 83c:	38 82       	st	Y, r3
			PHASE_V_LOW_OFF;
 83e:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 840:	28 98       	cbi	0x05, 0	; 5
		}
		
		// Add one to the while-loop-counter signifying no motor movements
		if(rotationCounter < 100)
 842:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 846:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 84a:	84 36       	cpi	r24, 0x64	; 100
 84c:	91 05       	cpc	r25, r1
 84e:	48 f4       	brcc	.+18     	; 0x862 <main+0xfa>
		{
			rotationCounter ++;
 850:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 854:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rotationCounter+0x1>
 85e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rotationCounter>
		}
		
		// Check if this while loop went 100 times with no motor movements
		if(rotationCounter > 99)
 862:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 866:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 86a:	84 36       	cpi	r24, 0x64	; 100
 86c:	91 05       	cpc	r25, r1
 86e:	38 f0       	brcs	.+14     	; 0x87e <main+0x116>
		{
			motorState = 0;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
 870:	2b 98       	cbi	0x05, 3	; 5
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
		}

		
		if((motorState == 0) && (motorCommand < 225))
 872:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 876:	81 3e       	cpi	r24, 0xE1	; 225
 878:	28 f0       	brcs	.+10     	; 0x884 <main+0x11c>
 87a:	f4 2c       	mov	r15, r4
 87c:	0a c0       	rjmp	.+20     	; 0x892 <main+0x12a>
		{
			motorState = 1;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
 87e:	2b 9a       	sbi	0x05, 3	; 5
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 880:	fd 2c       	mov	r15, r13
 882:	07 c0       	rjmp	.+14     	; 0x892 <main+0x12a>
		}

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
 884:	0e 94 2c 03 	call	0x658	; 0x658 <kickMotor>
			motorState = 1;	
			rotationCounter = 0;
 888:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 88c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>

		
		if((motorState == 0) && (motorCommand < 225))
		{
			kickMotor();
			motorState = 1;	
 890:	fd 2c       	mov	r15, r13
			rotationCounter = 0;
		}

		if(response_CAN == 1){
 892:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	09 f0       	breq	.+2      	; 0x89c <main+0x134>
 89a:	8d cf       	rjmp	.-230    	; 0x7b6 <main+0x4e>
			CAN_TXMOB(1, 8, tData2, 0x5555555, 0x0100);
 89c:	e4 2c       	mov	r14, r4
 89e:	05 e5       	ldi	r16, 0x55	; 85
 8a0:	15 e5       	ldi	r17, 0x55	; 85
 8a2:	25 e5       	ldi	r18, 0x55	; 85
 8a4:	35 e0       	ldi	r19, 0x05	; 5
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	51 e0       	ldi	r21, 0x01	; 1
 8aa:	68 e0       	ldi	r22, 0x08	; 8
 8ac:	8d 2d       	mov	r24, r13
 8ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CAN_TXMOB>
			response_CAN = 0;
 8b2:	40 92 0a 01 	sts	0x010A, r4	; 0x80010a <__data_end>
			toggle_led();
 8b6:	0e 94 af 03 	call	0x75e	; 0x75e <toggle_led>
 8ba:	7d cf       	rjmp	.-262    	; 0x7b6 <main+0x4e>

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
