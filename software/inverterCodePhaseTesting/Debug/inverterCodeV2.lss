
inverterCodeV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e38  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b36  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ed  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024e  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 30       	cpi	r26, 0x00	; 0
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9c:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <kickMotorSelect>:


void kickMotorSelect(uint8_t caseSelect)
{

	PHASES_ALL_HIGH_OFF;
  a4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
  a8:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
  aa:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
  ac:	28 98       	cbi	0x05, 0	; 5

	switch (caseSelect)
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	b1 f0       	breq	.+44     	; 0xde <kickMotorSelect+0x3a>
  b2:	28 f4       	brcc	.+10     	; 0xbe <kickMotorSelect+0x1a>
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <kickMotorSelect+0x26>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	61 f0       	breq	.+24     	; 0xd4 <kickMotorSelect+0x30>
  bc:	08 95       	ret
  be:	85 30       	cpi	r24, 0x05	; 5
  c0:	c1 f0       	breq	.+48     	; 0xf2 <kickMotorSelect+0x4e>
  c2:	90 f0       	brcs	.+36     	; 0xe8 <kickMotorSelect+0x44>
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	d1 f0       	breq	.+52     	; 0xfc <kickMotorSelect+0x58>
  c8:	08 95       	ret
	{
		case 1:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 1
					PHASE_V_LOW_ON;
  ca:	40 9a       	sbi	0x08, 0	; 8
					PHASE_W_HIGH_ON;
  cc:	80 e3       	ldi	r24, 0x30	; 48
  ce:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#endif
				#ifndef CLOCKWISE // Running Anti-Clockwise
		
				#endif
			#endif
			break;
  d2:	08 95       	ret
		case 2:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 5
					PHASE_U_HIGH_ON;
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
					PHASE_W_LOW_ON;
  da:	28 9a       	sbi	0x05, 0	; 5
				#endif
				#ifndef CLOCKWISE // Running Anti-Clockwise
		
				#endif
			#endif
		break;
  dc:	08 95       	ret
		case 3:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 6
					PHASE_U_HIGH_ON;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
					PHASE_V_LOW_ON;
  e4:	40 9a       	sbi	0x08, 0	; 8
				#endif
				#ifndef CLOCKWISE // Running Anti-Clockwise
		
				#endif
			#endif
			break;
  e6:	08 95       	ret
		case 4:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 3
					PHASE_U_LOW_ON;
  e8:	58 9a       	sbi	0x0b, 0	; 11
					PHASE_V_HIGH_ON;
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#endif
				#ifndef CLOCKWISE // Running Anti-Clockwise
		
				#endif
			#endif
			break;
  f0:	08 95       	ret
		case 5:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 2
					PHASE_U_LOW_ON;
  f2:	58 9a       	sbi	0x0b, 0	; 11
					PHASE_W_HIGH_ON;
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#endif
				#ifndef CLOCKWISE // Running Anti-Clockwise
		
				#endif
			#endif
			break;
  fa:	08 95       	ret
		case 6:
			#ifdef TESTMOTOR // THe Skateboard Motor
				#ifdef CLOCKWISE // Running Clockwise			> 4
					PHASE_W_LOW_ON;
  fc:	28 9a       	sbi	0x05, 0	; 5
					PHASE_V_HIGH_ON;
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 104:	08 95       	ret

00000106 <main>:
	}
}*/

int main(void)
{
	DDRB |= 0b11001011;				// make the status LED an output
 106:	84 b1       	in	r24, 0x04	; 4
 108:	8b 6c       	ori	r24, 0xCB	; 203
 10a:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	85 60       	ori	r24, 0x05	; 5
 110:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	81 68       	ori	r24, 0x81	; 129
 116:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	84 73       	andi	r24, 0x34	; 52
 11c:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 11e:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 120:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 122:	85 b1       	in	r24, 0x05	; 5
 124:	84 62       	ori	r24, 0x24	; 36
 126:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 128:	5e 9a       	sbi	0x0b, 6	; 11
	
	//PLL
	PLLCSR = 0x02;			//start PLL at 32MHz
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	89 bd       	out	0x29, r24	; 41
	
	//INTERRUPTS
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 12e:	85 e1       	ldi	r24, 0x15	; 21
 130:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	8d bb       	out	0x1d, r24	; 29
	
	//PSC
	POCR_RB = 256;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 140:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 144:	8c ed       	ldi	r24, 0xDC	; 220
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 14c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 150:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 154:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 158:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 15c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 160:	82 ed       	ldi	r24, 0xD2	; 210
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 168:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 16c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 170:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 174:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 178:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 17c:	8c e1       	ldi	r24, 0x1C	; 28
 17e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 182:	81 e2       	ldi	r24, 0x21	; 33
 184:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>
	
	// start the interrupts
	// sei();	
	
	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 188:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 18c:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 18e:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 190:	28 98       	cbi	0x05, 0	; 5
	
	while(1)
	{

		kickMotorSelect(1); // First Actual Order
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 e2       	ldi	r24, 0x23	; 35
 19e:	94 ef       	ldi	r25, 0xF4	; 244
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x9a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xa4>
 1aa:	00 00       	nop
		_delay_ms(PHASE_PULSE_DELAY);
		kickMotorSelect(5); // Second Actual Order
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	83 e2       	ldi	r24, 0x23	; 35
 1b8:	94 ef       	ldi	r25, 0xF4	; 244
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xb4>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xbe>
 1c4:	00 00       	nop
		_delay_ms(PHASE_PULSE_DELAY);
		kickMotorSelect(4); // Thrid Actual Order
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 e2       	ldi	r24, 0x23	; 35
 1d2:	94 ef       	ldi	r25, 0xF4	; 244
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xce>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xd8>
 1de:	00 00       	nop
		_delay_ms(PHASE_PULSE_DELAY);
		kickMotorSelect(6); // Fourth Actual Order
 1e0:	86 e0       	ldi	r24, 0x06	; 6
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	83 e2       	ldi	r24, 0x23	; 35
 1ec:	94 ef       	ldi	r25, 0xF4	; 244
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0xe8>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0xf2>
 1f8:	00 00       	nop
		_delay_ms(PHASE_PULSE_DELAY);
		kickMotorSelect(2); // Fifth Actual Order
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 e2       	ldi	r24, 0x23	; 35
 206:	94 ef       	ldi	r25, 0xF4	; 244
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x102>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x10c>
 212:	00 00       	nop
		_delay_ms(PHASE_PULSE_DELAY);
		kickMotorSelect(3); // Sixth Actual Order
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 52 00 	call	0xa4	; 0xa4 <kickMotorSelect>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	83 e2       	ldi	r24, 0x23	; 35
 220:	94 ef       	ldi	r25, 0xF4	; 244
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x11c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x126>
 22c:	00 00       	nop
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	83 e2       	ldi	r24, 0x23	; 35
 232:	94 ef       	ldi	r25, 0xF4	; 244
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x12e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x138>
 23e:	00 00       	nop
 240:	a8 cf       	rjmp	.-176    	; 0x192 <main+0x8c>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
