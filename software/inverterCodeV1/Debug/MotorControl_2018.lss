
MotorControl_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000692  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000730  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001116  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca2  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d9  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000780  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061a  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_7>
  20:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_8>
  24:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e9       	ldi	r30, 0x92	; 146
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  b2:	0c 94 47 03 	jmp	0x68e	; 0x68e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0d ee       	ldi	r16, 0xED	; 237
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	6f ee       	ldi	r22, 0xEF	; 239
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	4e ee       	ldi	r20, 0xEE	; 238
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	27 ef       	ldi	r18, 0xF7	; 247
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	c6 ef       	ldi	r28, 0xF6	; 246
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	a5 ef       	ldi	r26, 0xF5	; 245
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	0f 2e       	mov	r0, r31
  e8:	f4 ef       	ldi	r31, 0xF4	; 244
  ea:	ef 2e       	mov	r14, r31
  ec:	f1 2c       	mov	r15, r1
  ee:	f0 2d       	mov	r31, r0
  f0:	98 2f       	mov	r25, r24
  f2:	92 95       	swap	r25
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	f8 01       	movw	r30, r16
  f8:	90 83       	st	Z, r25
  fa:	fb 01       	movw	r30, r22
  fc:	10 82       	st	Z, r1
  fe:	fa 01       	movw	r30, r20
 100:	10 82       	st	Z, r1
 102:	f9 01       	movw	r30, r18
 104:	10 82       	st	Z, r1
 106:	18 82       	st	Y, r1
 108:	1c 92       	st	X, r1
 10a:	f7 01       	movw	r30, r14
 10c:	10 82       	st	Z, r1
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 120:	83 e1       	ldi	r24, 0x13	; 19
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ff ef       	ldi	r31, 0xFF	; 255
 13a:	20 e7       	ldi	r18, 0x70	; 112
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	f1 50       	subi	r31, 0x01	; 1
 140:	20 40       	sbci	r18, 0x00	; 0
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
 146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
 148:	00 00       	nop
 14a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 14e:	82 fb       	bst	r24, 2
 150:	88 27       	eor	r24, r24
 152:	80 f9       	bld	r24, 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	89 27       	eor	r24, r25
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <CAN_RXInit>:
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 17a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 17e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 182:	82 2f       	mov	r24, r18
 184:	82 95       	swap	r24
 186:	88 0f       	add	r24, r24
 188:	80 7e       	andi	r24, 0xE0	; 224
 18a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 18e:	da 01       	movw	r26, r20
 190:	c9 01       	movw	r24, r18
 192:	68 94       	set
 194:	12 f8       	bld	r1, 2
 196:	b6 95       	lsr	r27
 198:	a7 95       	ror	r26
 19a:	97 95       	ror	r25
 19c:	87 95       	ror	r24
 19e:	16 94       	lsr	r1
 1a0:	d1 f7       	brne	.-12     	; 0x196 <CAN_RXInit+0x30>
 1a2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1aa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1ae:	8e 2d       	mov	r24, r14
 1b0:	82 95       	swap	r24
 1b2:	88 0f       	add	r24, r24
 1b4:	80 7e       	andi	r24, 0xE0	; 224
 1b6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1ba:	d8 01       	movw	r26, r16
 1bc:	c7 01       	movw	r24, r14
 1be:	68 94       	set
 1c0:	12 f8       	bld	r1, 2
 1c2:	b6 95       	lsr	r27
 1c4:	a7 95       	ror	r26
 1c6:	97 95       	ror	r25
 1c8:	87 95       	ror	r24
 1ca:	16 94       	lsr	r1
 1cc:	d1 f7       	brne	.-12     	; 0x1c2 <CAN_RXInit+0x5c>
 1ce:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	c8 9e       	mul	r12, r24
 1d6:	60 01       	movw	r12, r0
 1d8:	11 24       	eor	r1, r1
 1da:	60 68       	ori	r22, 0x80	; 128
 1dc:	c6 2a       	or	r12, r22
 1de:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <CAN_TXMOB>:
 1f0:	ef 92       	push	r14
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	82 95       	swap	r24
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1fe:	ee ee       	ldi	r30, 0xEE	; 238
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8f 7b       	andi	r24, 0xBF	; 191
 206:	80 83       	st	Z, r24
 208:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 20c:	80 2f       	mov	r24, r16
 20e:	88 0f       	add	r24, r24
 210:	88 0f       	add	r24, r24
 212:	88 0f       	add	r24, r24
 214:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 218:	d9 01       	movw	r26, r18
 21a:	c8 01       	movw	r24, r16
 21c:	68 94       	set
 21e:	14 f8       	bld	r1, 4
 220:	b6 95       	lsr	r27
 222:	a7 95       	ror	r26
 224:	97 95       	ror	r25
 226:	87 95       	ror	r24
 228:	16 94       	lsr	r1
 22a:	d1 f7       	brne	.-12     	; 0x220 <CAN_TXMOB+0x30>
 22c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 230:	d9 01       	movw	r26, r18
 232:	c8 01       	movw	r24, r16
 234:	07 2e       	mov	r0, r23
 236:	7d e0       	ldi	r23, 0x0D	; 13
 238:	b6 95       	lsr	r27
 23a:	a7 95       	ror	r26
 23c:	97 95       	ror	r25
 23e:	87 95       	ror	r24
 240:	7a 95       	dec	r23
 242:	d1 f7       	brne	.-12     	; 0x238 <CAN_TXMOB+0x48>
 244:	70 2d       	mov	r23, r0
 246:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 24a:	0f 2e       	mov	r0, r31
 24c:	f5 e1       	ldi	r31, 0x15	; 21
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	17 95       	ror	r17
 254:	07 95       	ror	r16
 256:	fa 95       	dec	r31
 258:	d1 f7       	brne	.-12     	; 0x24e <CAN_TXMOB+0x5e>
 25a:	f0 2d       	mov	r31, r0
 25c:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 260:	66 23       	and	r22, r22
 262:	71 f0       	breq	.+28     	; 0x280 <CAN_TXMOB+0x90>
 264:	fa 01       	movw	r30, r20
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	86 0f       	add	r24, r22
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	48 0f       	add	r20, r24
 270:	59 1f       	adc	r21, r25
 272:	aa ef       	ldi	r26, 0xFA	; 250
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	81 91       	ld	r24, Z+
 278:	8c 93       	st	X, r24
 27a:	e4 17       	cp	r30, r20
 27c:	f5 07       	cpc	r31, r21
 27e:	d9 f7       	brne	.-10     	; 0x276 <CAN_TXMOB+0x86>
 280:	60 65       	ori	r22, 0x50	; 80
 282:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 286:	ee 20       	and	r14, r14
 288:	a1 f0       	breq	.+40     	; 0x2b2 <CAN_TXMOB+0xc2>
 28a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 28e:	86 fd       	sbrc	r24, 6
 290:	10 c0       	rjmp	.+32     	; 0x2b2 <CAN_TXMOB+0xc2>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	ee ee       	ldi	r30, 0xEE	; 238
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <CAN_TXMOB+0xb0>
 29a:	90 81       	ld	r25, Z
 29c:	96 fd       	sbrc	r25, 6
 29e:	09 c0       	rjmp	.+18     	; 0x2b2 <CAN_TXMOB+0xc2>
 2a0:	af e9       	ldi	r26, 0x9F	; 159
 2a2:	bf e0       	ldi	r27, 0x0F	; 15
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <CAN_TXMOB+0xb4>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <CAN_TXMOB+0xba>
 2aa:	00 00       	nop
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	e8 12       	cpse	r14, r24
 2b0:	f4 cf       	rjmp	.-24     	; 0x29a <CAN_TXMOB+0xaa>
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <__vector_18>:
#define LED_STATUS_ON		PORTB |= 0b00001000		// Status LED ON (Port B3)
#define LED_STATUS_OFF		PORTB &= ~(0b00001000)	// Status LED OFF (Port B3)
#define LED_STATUS_TOGGLE	PORTB ^= 0b00001000		// Status LED Toggle (Port B3)

ISR(CAN_INT_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
	int8_t savecanpage;

	savecanpage = CANPAGE;
 2c8:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	if(CANSTMOB & ( 1 << RXOK)){
 2cc:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 2d0:	95 ff       	sbrs	r25, 5
 2d2:	0e c0       	rjmp	.+28     	; 0x2f0 <__vector_18+0x36>
		if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 2d4:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 2d8:	95 ff       	sbrs	r25, 5
 2da:	0a c0       	rjmp	.+20     	; 0x2f0 <__vector_18+0x36>
		{
		
			CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 2dc:	90 e5       	ldi	r25, 0x50	; 80
 2de:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			testChar = CANMSG;
 2e2:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 2e6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <testChar>
			response_CAN = 1;
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>

			//CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
		}
	}

	CANSTMOB = 0x00;
 2f0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANPAGE = savecanpage;
 2f4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
}
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <setupInverter>:
		
	}
}

void setupInverter(void)
{
 306:	cf 92       	push	r12
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
	DDRB |= 0b11001011;				// make the status LED an output
 310:	84 b1       	in	r24, 0x04	; 4
 312:	8b 6c       	ori	r24, 0xCB	; 203
 314:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 316:	87 b1       	in	r24, 0x07	; 7
 318:	85 60       	ori	r24, 0x05	; 5
 31a:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 31c:	8a b1       	in	r24, 0x0a	; 10
 31e:	81 68       	ori	r24, 0x81	; 129
 320:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 322:	85 b1       	in	r24, 0x05	; 5
 324:	84 73       	andi	r24, 0x34	; 52
 326:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 328:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 32a:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	84 62       	ori	r24, 0x24	; 36
 330:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 332:	5e 9a       	sbi	0x0b, 6	; 11
	
	
	PLLCSR = 0x02;			//start PLL at INTERRUPTS
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	89 bd       	out	0x29, r24	; 41
	
	//32MHz
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 338:	85 e1       	ldi	r24, 0x15	; 21
 33a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0 TIMER0_OVF_vect
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	8d bb       	out	0x1d, r24	; 29

	// start the CAN interface
	CAN_init();		// Initialise CAN
 342:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);  // Receive a message
 346:	cc 24       	eor	r12, r12
 348:	c3 94       	inc	r12
 34a:	e1 2c       	mov	r14, r1
 34c:	f1 2c       	mov	r15, r1
 34e:	00 e0       	ldi	r16, 0x00	; 0
 350:	14 e0       	ldi	r17, 0x04	; 4
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	54 e0       	ldi	r21, 0x04	; 4
 35a:	68 e0       	ldi	r22, 0x08	; 8
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>

	// start the interrupts
	sei();
 362:	78 94       	sei

	//PSC
	// PWM setup code.
	
	POCR_RB = 256;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 36c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 370:	8c ed       	ldi	r24, 0xDC	; 220
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 378:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 37c:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 380:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 384:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 388:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 38c:	82 ed       	ldi	r24, 0xD2	; 210
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 394:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 398:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 39c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 3a0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 3a4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 3a8:	8c e1       	ldi	r24, 0x1C	; 28
 3aa:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 3ae:	81 e2       	ldi	r24, 0x21	; 33
 3b0:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>

	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 3b4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 3b8:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 3ba:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 3bc:	28 98       	cbi	0x05, 0	; 5
	// Set CS12 and CS10 bits for 1024 prescaler
	TCCR1B |= (1 << CS12) | (1 << CS10);
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
	*/
}
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	cf 90       	pop	r12
 3c8:	08 95       	ret

000003ca <main>:
int main(void)
{
	// Choose which direction the motor will spin on
	// CLOCK_WISE
	// ANTI_CLOCK_WISE
	WHICH_DIRECTION = CLOCK_WISE;
 3ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CLOCK_WISE>
 3ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <WHICH_DIRECTION>
	
	setupInverter();
 3d2:	0e 94 83 01 	call	0x306	; 0x306 <setupInverter>
	
	uint8_t motorState = 0;
 3d6:	d1 2c       	mov	r13, r1
			cleanMotorCommand = 0;
		}

		tempStorage = cleanMotorCommand; // 250
		
		motorCommand = 250 - cleanMotorCommand;
 3d8:	0f 2e       	mov	r0, r31
 3da:	fa ef       	ldi	r31, 0xFA	; 250
 3dc:	bf 2e       	mov	r11, r31
 3de:	f0 2d       	mov	r31, r0
		
		// Check motor command range
		if(motorCommand < 190){
			motorCommand = 190;
 3e0:	0f 2e       	mov	r0, r31
 3e2:	fe eb       	ldi	r31, 0xBE	; 190
 3e4:	9f 2e       	mov	r9, r31
 3e6:	f0 2d       	mov	r31, r0
			//POCR0SA = POCR1SA = POCR2SA = motorCommand;
			//POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		else
		{
			POC = 0b00000000;
 3e8:	c6 eb       	ldi	r28, 0xB6	; 182
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
			PHASE_U_HIGH_ON;
 3ec:	0f 2e       	mov	r0, r31
 3ee:	f3 e0       	ldi	r31, 0x03	; 3
 3f0:	af 2e       	mov	r10, r31
 3f2:	f0 2d       	mov	r31, r0
	uint8_t motorState = 0;
	uint8_t motorMaxAccelration = 6;
	
	while(1)
	{
		if(response_CAN == 1){
 3f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	d1 f4       	brne	.+52     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			CAN_TXMOB(1, 8, tData2, 0x5555555, 0x0100);
 3fc:	e1 2c       	mov	r14, r1
 3fe:	05 e5       	ldi	r16, 0x55	; 85
 400:	15 e5       	ldi	r17, 0x55	; 85
 402:	25 e5       	ldi	r18, 0x55	; 85
 404:	35 e0       	ldi	r19, 0x05	; 5
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	51 e0       	ldi	r21, 0x01	; 1
 40a:	68 e0       	ldi	r22, 0x08	; 8
 40c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CAN_TXMOB>
			CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 410:	cc 24       	eor	r12, r12
 412:	c3 94       	inc	r12
 414:	e1 2c       	mov	r14, r1
 416:	f1 2c       	mov	r15, r1
 418:	00 e0       	ldi	r16, 0x00	; 0
 41a:	14 e0       	ldi	r17, 0x04	; 4
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	54 e0       	ldi	r21, 0x04	; 4
 424:	68 e0       	ldi	r22, 0x08	; 8
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
			response_CAN = 0;
 42c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			//toggle_led();
		}

		cleanMotorCommand = testChar;
 430:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <testChar>
 434:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cleanMotorCommand>
			not jump more than 10% in torque power
		
		range: 250 to 190. 10% of the range is 6. thus, the 6.
			Change as and if needed
		*/
		if (cleanMotorCommand - tempStorage > motorMaxAccelration){
 438:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <tempStorage>
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	82 1b       	sub	r24, r18
 440:	91 09       	sbc	r25, r1
 442:	07 97       	sbiw	r24, 0x07	; 7
 444:	1c f0       	brlt	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			cleanMotorCommand = tempStorage + motorMaxAccelration;
 446:	2a 5f       	subi	r18, 0xFA	; 250
 448:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cleanMotorCommand>
		// Make sure the range is correct
		if (cleanMotorCommand < 0){
			cleanMotorCommand = 0;
		}

		tempStorage = cleanMotorCommand; // 250
 44c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cleanMotorCommand>
 450:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tempStorage>
		
		motorCommand = 250 - cleanMotorCommand;
 454:	9b 2d       	mov	r25, r11
 456:	98 1b       	sub	r25, r24
 458:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <motorCommand>
		
		// Check motor command range
		if(motorCommand < 190){
 45c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 460:	8e 3b       	cpi	r24, 0xBE	; 190
 462:	10 f4       	brcc	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			motorCommand = 190;
 464:	90 92 0b 01 	sts	0x010B, r9	; 0x80010b <motorCommand>
		}
		if(motorCommand > 250){
 468:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 46c:	8b 3f       	cpi	r24, 0xFB	; 251
 46e:	10 f0       	brcs	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			motorCommand = 250;
 470:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <motorCommand>
		}
		
		if(motorState == 1)
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	d8 16       	cp	r13, r24
 478:	21 f0       	breq	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			//POCR0SA = POCR1SA = POCR2SA = motorCommand;
			//POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		else
		{
			POC = 0b00000000;
 47a:	18 82       	st	Y, r1
			PHASE_U_HIGH_ON;
 47c:	a8 82       	st	Y, r10
			PHASE_V_LOW_OFF;
 47e:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 480:	28 98       	cbi	0x05, 0	; 5
		}
		
		// Add one to the while-loop-counter signifying no motor movements
		if(rotationCounter < 100)
 482:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 486:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 48a:	84 36       	cpi	r24, 0x64	; 100
 48c:	91 05       	cpc	r25, r1
 48e:	48 f4       	brcc	.+18     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			rotationCounter ++;
 490:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 494:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rotationCounter+0x1>
 49e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rotationCounter>
		}
		
		// Check if this while loop went 100 times with no motor movements
		if(rotationCounter > 99)
 4a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotationCounter>
 4a6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rotationCounter+0x1>
 4aa:	84 36       	cpi	r24, 0x64	; 100
 4ac:	91 05       	cpc	r25, r1
 4ae:	38 f0       	brcs	.+14     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			motorState = 0;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
 4b0:	2b 98       	cbi	0x05, 3	; 5
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
		}

		
		if((motorState == 0) && (motorCommand < 225))
 4b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorCommand>
 4b6:	81 3e       	cpi	r24, 0xE1	; 225
 4b8:	30 f0       	brcs	.+12     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ba:	d1 2c       	mov	r13, r1
 4bc:	9b cf       	rjmp	.-202    	; 0x3f4 <main+0x2a>
		{
			motorState = 1;
			//toggle_led();
			//CAN_TXMOB(mob, 1, &POCR0SA, 0, 2); //transmit registration and do not wait for finish
			//PORTB |= 8; // turn all port B on
			PORTB |= 8;
 4be:	2b 9a       	sbi	0x05, 3	; 5
			//PORTB &= ~8; // turn all port B off
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 4c0:	dd 24       	eor	r13, r13
 4c2:	d3 94       	inc	r13
 4c4:	97 cf       	rjmp	.-210    	; 0x3f4 <main+0x2a>
		
		if((motorState == 0) && (motorCommand < 225))
		{
			//kickMotor();
			//motorState = 1;
			rotationCounter = 0;
 4c6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 4ca:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
 4ce:	d1 2c       	mov	r13, r1
 4d0:	91 cf       	rjmp	.-222    	; 0x3f4 <main+0x2a>

000004d2 <__vector_7>:
}

// skateboard ISRs below  vvv

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
	//LED_STATUS_TOGGLE;
	//_delay_ms(500);
	//LED_STATUS_TOGGLE;


	rotationCounter = 0;
 4e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 4e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 4e8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 4ec:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 4ee:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 4f0:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) {
 4f2:	4e 9b       	sbis	0x09, 6	; 9
 4f4:	19 c0       	rjmp	.+50     	; 0x528 <__vector_7+0x56>
		//_delay_ms(0.25);
		// 3
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 4f6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 4fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 4fe:	98 13       	cpse	r25, r24
 500:	05 c0       	rjmp	.+10     	; 0x50c <__vector_7+0x3a>
		{
			//anti-clock wise
			//PHASE_U_HIGH_ON;
			//PHASE_W_LOW_ON;
			PHASE_V_LOW_ON;
 502:	40 9a       	sbi	0x08, 0	; 8
			PHASE_U_HIGH_ON;
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__vector_7+0x42>
		}else{
			//clock wise
			//PHASE_U_LOW_ON;
			//PHASE_W_HIGH_ON;
			PHASE_U_LOW_ON;
 50c:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 50e:	8c e0       	ldi	r24, 0x0C	; 12
 510:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 3){
 514:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 518:	83 30       	cpi	r24, 0x03	; 3
 51a:	f1 f4       	brne	.+60     	; 0x558 <__vector_7+0x86>
			revolutions++;
 51c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 520:	8f 5f       	subi	r24, 0xFF	; 255
 522:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 526:	18 c0       	rjmp	.+48     	; 0x558 <__vector_7+0x86>
		}
	} else {
		//_delay_ms(0.25);
		// 4
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 528:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 52c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 530:	98 13       	cpse	r25, r24
 532:	05 c0       	rjmp	.+10     	; 0x53e <__vector_7+0x6c>
		{
			//anti-clock wise
			//PHASE_U_LOW_ON;
			//PHASE_W_HIGH_ON;
			PHASE_V_LOW_ON;
 534:	40 9a       	sbi	0x08, 0	; 8
			PHASE_W_HIGH_ON;
 536:	80 e3       	ldi	r24, 0x30	; 48
 538:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 53c:	04 c0       	rjmp	.+8      	; 0x546 <__vector_7+0x74>
		}else{
			//clock wise
			//PHASE_W_LOW_ON;
			//PHASE_U_HIGH_ON;
			PHASE_W_LOW_ON;
 53e:	28 9a       	sbi	0x05, 0	; 5
			PHASE_V_HIGH_ON;
 540:	8c e0       	ldi	r24, 0x0C	; 12
 542:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 4){
 546:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 54a:	84 30       	cpi	r24, 0x04	; 4
 54c:	29 f4       	brne	.+10     	; 0x558 <__vector_7+0x86>
			revolutions++;
 54e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
	rotationCounter = 0;
 574:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 578:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 57c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 580:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 582:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 584:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 586:	1a 9b       	sbis	0x03, 2	; 3
 588:	19 c0       	rjmp	.+50     	; 0x5bc <__vector_8+0x56>
		// 6
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 58a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 58e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 592:	98 13       	cpse	r25, r24
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <__vector_8+0x3a>
		{
			//anti-clock wise
			//PHASE_U_LOW_ON;
			//PHASE_V_HIGH_ON;
			PHASE_U_LOW_ON;
 596:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_HIGH_ON;
 598:	8c e0       	ldi	r24, 0x0C	; 12
 59a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__vector_8+0x42>
		}else{
			//clock wise
			//PHASE_V_LOW_ON;
			//PHASE_U_HIGH_ON;
			PHASE_V_LOW_ON;
 5a0:	40 9a       	sbi	0x08, 0	; 8
			PHASE_U_HIGH_ON;
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 6){
 5a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 5ac:	86 30       	cpi	r24, 0x06	; 6
 5ae:	f1 f4       	brne	.+60     	; 0x5ec <__vector_8+0x86>
			revolutions++;
 5b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 5ba:	18 c0       	rjmp	.+48     	; 0x5ec <__vector_8+0x86>
		}
	} else {
		// 1
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 5bc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 5c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 5c4:	98 13       	cpse	r25, r24
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_8+0x6c>
		{
			//anti-clock wise
			//PHASE_U_HIGH_ON;
			//PHASE_V_LOW_ON;
			PHASE_W_LOW_ON;
 5c8:	28 9a       	sbi	0x05, 0	; 5
			PHASE_V_HIGH_ON;
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <__vector_8+0x74>
		}else{
			//clock wise
			//PHASE_U_LOW_ON;
			//PHASE_V_HIGH_ON;
			PHASE_V_LOW_ON;
 5d2:	40 9a       	sbi	0x08, 0	; 8
			PHASE_W_HIGH_ON;
 5d4:	80 e3       	ldi	r24, 0x30	; 48
 5d6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 1){
 5da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	29 f4       	brne	.+10     	; 0x5ec <__vector_8+0x86>
			revolutions++;
 5e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 5e6:	8f 5f       	subi	r24, 0xFF	; 255
 5e8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
	rotationCounter = 0;
 608:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter+0x1>
 60c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 610:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 614:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 616:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 618:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 61a:	1d 9b       	sbis	0x03, 5	; 3
 61c:	19 c0       	rjmp	.+50     	; 0x650 <__vector_9+0x56>
		// 5
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 61e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 622:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 626:	98 13       	cpse	r25, r24
 628:	05 c0       	rjmp	.+10     	; 0x634 <__vector_9+0x3a>
		{
			//anti-clock wise
			//PHASE_W_HIGH_ON;
			//PHASE_V_LOW_ON;
			PHASE_U_LOW_ON;
 62a:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 62c:	80 e3       	ldi	r24, 0x30	; 48
 62e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 632:	04 c0       	rjmp	.+8      	; 0x63c <__vector_9+0x42>
		}else{
			//clock wise
			//PHASE_W_LOW_ON;
			//PHASE_V_HIGH_ON;
			PHASE_W_LOW_ON;
 634:	28 9a       	sbi	0x05, 0	; 5
			PHASE_U_HIGH_ON;
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 5){
 63c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 640:	85 30       	cpi	r24, 0x05	; 5
 642:	f1 f4       	brne	.+60     	; 0x680 <__vector_9+0x86>
			revolutions++;
 644:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 648:	8f 5f       	subi	r24, 0xFF	; 255
 64a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
 64e:	18 c0       	rjmp	.+48     	; 0x680 <__vector_9+0x86>
		}
	} else {
		// 2
		//_delay_ms(0.25);
		if (WHICH_DIRECTION == ANTI_CLOCK_WISE)
 650:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <WHICH_DIRECTION>
 654:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ANTI_CLOCK_WISE>
 658:	98 13       	cpse	r25, r24
 65a:	05 c0       	rjmp	.+10     	; 0x666 <__vector_9+0x6c>
		{
			//anti-clock wise
			//PHASE_V_HIGH_ON;
			//PHASE_W_LOW_ON;
			PHASE_W_LOW_ON;
 65c:	28 9a       	sbi	0x05, 0	; 5
			PHASE_U_HIGH_ON;
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 664:	04 c0       	rjmp	.+8      	; 0x66e <__vector_9+0x74>
		}else{
			//clock wise
			//PHASE_V_LOW_ON;
			//PHASE_W_HIGH_ON;
			PHASE_U_LOW_ON;
 666:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_W_HIGH_ON;
 668:	80 e3       	ldi	r24, 0x30	; 48
 66a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
		}
		if(startPhase == 2){
 66e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <startPhase>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	29 f4       	brne	.+10     	; 0x680 <__vector_9+0x86>
			revolutions++;
 676:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <revolutions>
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <revolutions>
		}
	}
}
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
