
MotorControl_2018.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104b  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb5  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e3  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000671  00000000  00000000  000031d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_7>
  20:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_8>
  24:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_9>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a3 30       	cpi	r26, 0x03	; 3
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  9c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 2); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
  b6:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  b8:	0d ee       	ldi	r16, 0xED	; 237
  ba:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  bc:	6f ee       	ldi	r22, 0xEF	; 239
  be:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
  c0:	4e ee       	ldi	r20, 0xEE	; 238
  c2:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM1 = 0;
  c4:	27 ef       	ldi	r18, 0xF7	; 247
  c6:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
  c8:	c6 ef       	ldi	r28, 0xF6	; 246
  ca:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
  cc:	a5 ef       	ldi	r26, 0xF5	; 245
  ce:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
  d0:	0f 2e       	mov	r0, r31
  d2:	f4 ef       	ldi	r31, 0xF4	; 244
  d4:	ef 2e       	mov	r14, r31
  d6:	f1 2c       	mov	r15, r1
  d8:	f0 2d       	mov	r31, r0
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
  da:	98 2f       	mov	r25, r24
  dc:	92 95       	swap	r25
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	f8 01       	movw	r30, r16
  e2:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
  e4:	fb 01       	movw	r30, r22
  e6:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
  e8:	fa 01       	movw	r30, r20
  ea:	10 82       	st	Z, r1
		CANIDM1 = 0;
  ec:	f9 01       	movw	r30, r18
  ee:	10 82       	st	Z, r1
		CANIDM2 = 0;
  f0:	18 82       	st	Y, r1
		CANIDM3 = 0;
  f2:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
  f4:	f7 01       	movw	r30, r14
  f6:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	86 30       	cpi	r24, 0x06	; 6
  fc:	71 f7       	brne	.-36     	; 0xda <CAN_init+0x36>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps (change above to 0x06 for 500k)
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANIE2 = (1 << IEMOB5);//|(1 << IEMOB4);		//enable interrupts on MOB 4 and 5 for receiving
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
 116:	80 ea       	ldi	r24, 0xA0	; 160
 118:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	20 e7       	ldi	r18, 0x70	; 112
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	f1 50       	subi	r31, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <CAN_init+0x84>
 130:	00 c0       	rjmp	.+0      	; 0x132 <CAN_init+0x8e>
 132:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
 134:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 138:	82 fb       	bst	r24, 2
 13a:	88 27       	eor	r24, r24
 13c:	80 f9       	bld	r24, 0
	return 0;
}
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	89 27       	eor	r24, r25
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID, uint8_t CanMode)
{
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
 15c:	82 95       	swap	r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = 0;					//shifts the value sets RTRMSK to zero and IDEMSK to 0
 164:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = 0;
 168:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk<<5) & 0xE0;
 16c:	82 2f       	mov	r24, r18
 16e:	82 95       	swap	r24
 170:	88 0f       	add	r24, r24
 172:	80 7e       	andi	r24, 0xE0	; 224
 174:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>3) & 0xFF;
 178:	da 01       	movw	r26, r20
 17a:	c9 01       	movw	r24, r18
 17c:	68 94       	set
 17e:	12 f8       	bld	r1, 2
 180:	b6 95       	lsr	r27
 182:	a7 95       	ror	r26
 184:	97 95       	ror	r25
 186:	87 95       	ror	r24
 188:	16 94       	lsr	r1
 18a:	d1 f7       	brne	.-12     	; 0x180 <CAN_RXInit+0x30>
 18c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = 0;					//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
 190:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = 0;
 194:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID<<5) & 0xE0;
 198:	8e 2d       	mov	r24, r14
 19a:	82 95       	swap	r24
 19c:	88 0f       	add	r24, r24
 19e:	80 7e       	andi	r24, 0xE0	; 224
 1a0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>3) & 0xFF;
 1a4:	d8 01       	movw	r26, r16
 1a6:	c7 01       	movw	r24, r14
 1a8:	68 94       	set
 1aa:	12 f8       	bld	r1, 2
 1ac:	b6 95       	lsr	r27
 1ae:	a7 95       	ror	r26
 1b0:	97 95       	ror	r25
 1b2:	87 95       	ror	r24
 1b4:	16 94       	lsr	r1
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <CAN_RXInit+0x5c>
 1b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(CanMode << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	c8 9e       	mul	r12, r24
 1c0:	60 01       	movw	r12, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	60 68       	ori	r22, 0x80	; 128
 1c6:	c6 2a       	or	r12, r22
 1c8:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <__vector_18>:
uint8_t testChar = 0;

volatile uint16_t rotationCounter = 0;
volatile uint8_t motorCommand = 0;
ISR(CAN_INT_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	cf 92       	push	r12
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	//CAN_RXInit(5,8,0x0000000, 0x4000000, 1);
	//uint8_t authority;
	int8_t mob;
	if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 206:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 20a:	85 ff       	sbrs	r24, 5
 20c:	1d c0       	rjmp	.+58     	; 0x248 <__vector_18+0x6e>
	{
		//LED_STATUS_TOGGLE;
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 20e:	80 e5       	ldi	r24, 0x50	; 80
 210:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		testChar = CANMSG;
 214:	ea ef       	ldi	r30, 0xFA	; 250
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <testChar>
		uint8_t tempChar1 = CANMSG;
 21e:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 220:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 222:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 224:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 226:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 228:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 22a:	80 81       	ld	r24, Z

		CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 22c:	cc 24       	eor	r12, r12
 22e:	c3 94       	inc	r12
 230:	e1 2c       	mov	r14, r1
 232:	f1 2c       	mov	r15, r1
 234:	00 e0       	ldi	r16, 0x00	; 0
 236:	14 e0       	ldi	r17, 0x04	; 4
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	54 e0       	ldi	r21, 0x04	; 4
 240:	68 e0       	ldi	r22, 0x08	; 8
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	}
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	cf 90       	pop	r12
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <main>:

int main(void)
{
	DDRB |= 0b11001011;				// make the status LED an output
 274:	84 b1       	in	r24, 0x04	; 4
 276:	8b 6c       	ori	r24, 0xCB	; 203
 278:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000101;
 27a:	87 b1       	in	r24, 0x07	; 7
 27c:	85 60       	ori	r24, 0x05	; 5
 27e:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 280:	8a b1       	in	r24, 0x0a	; 10
 282:	81 68       	ori	r24, 0x81	; 129
 284:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 286:	85 b1       	in	r24, 0x05	; 5
 288:	84 73       	andi	r24, 0x34	; 52
 28a:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;
 28c:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 28e:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 290:	85 b1       	in	r24, 0x05	; 5
 292:	84 62       	ori	r24, 0x24	; 36
 294:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 296:	5e 9a       	sbi	0x0b, 6	; 11
	
	//PLL
	PLLCSR = 0x02;			//start PLL at 32MHz
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	89 bd       	out	0x29, r24	; 41
	
	//INTERRUPTS
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 29c:	85 e1       	ldi	r24, 0x15	; 21
 29e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0
 2a2:	87 e0       	ldi	r24, 0x07	; 7
 2a4:	8d bb       	out	0x1d, r24	; 29
	
	//PSC
	POCR_RB = 256;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 2ae:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 2b2:	8c ed       	ldi	r24, 0xDC	; 220
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 2ba:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 2be:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 2c2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 2c6:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 2ca:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 2ce:	82 ed       	ldi	r24, 0xD2	; 210
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 2d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2da:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 2de:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 2e2:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 2e6:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 2ea:	8c e1       	ldi	r24, 0x1C	; 28
 2ec:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 2f0:	81 e2       	ldi	r24, 0x21	; 33
 2f2:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>
	
	// start the CAN interface
	CAN_init(); // Initialise CAN
 2f6:	0e 94 52 00 	call	0xa4	; 0xa4 <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 2fa:	cc 24       	eor	r12, r12
 2fc:	c3 94       	inc	r12
 2fe:	e1 2c       	mov	r14, r1
 300:	f1 2c       	mov	r15, r1
 302:	00 e0       	ldi	r16, 0x00	; 0
 304:	14 e0       	ldi	r17, 0x04	; 4
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	54 e0       	ldi	r21, 0x04	; 4
 30e:	68 e0       	ldi	r22, 0x08	; 8
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	
	// start the interrupts
	sei();	
 316:	78 94       	sei
	
	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 318:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 31c:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 31e:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 320:	28 98       	cbi	0x05, 0	; 5
	uint8_t motorState = 0;
	
	while(1)
	{
		_delay_ms(500);
		LED_STATUS_TOGGLE;
 322:	98 e0       	ldi	r25, 0x08	; 8
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	39 e6       	ldi	r19, 0x69	; 105
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	30 40       	sbci	r19, 0x00	; 0
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0xb6>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0xc0>
 334:	00 00       	nop
 336:	85 b1       	in	r24, 0x05	; 5
 338:	89 27       	eor	r24, r25
 33a:	85 b9       	out	0x05, r24	; 5
 33c:	f3 cf       	rjmp	.-26     	; 0x324 <main+0xb0>

0000033e <__vector_7>:
}

// skateboard ISRs below \/\/\/

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{	
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	8f 93       	push	r24
	rotationCounter = 0;
 34a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 34e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PHASES_ALL_HIGH_OFF;
 352:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 356:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 358:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 35a:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) {
 35c:	4e 9b       	sbis	0x09, 6	; 9
 35e:	05 c0       	rjmp	.+10     	; 0x36a <__vector_7+0x2c>
		PHASE_U_LOW_ON;
 360:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_W_HIGH_ON;
 362:	80 e3       	ldi	r24, 0x30	; 48
 364:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 368:	04 c0       	rjmp	.+8      	; 0x372 <__vector_7+0x34>
		} else {
		PHASE_W_LOW_ON;
 36a:	28 9a       	sbi	0x05, 0	; 5
		PHASE_U_HIGH_ON;
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	}
}
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	8f 93       	push	r24
	rotationCounter = 0;
 38a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 38e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PHASES_ALL_HIGH_OFF;
 392:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 396:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 398:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 39a:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 39c:	1a 9b       	sbis	0x03, 2	; 3
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <__vector_8+0x2c>
		PHASE_V_LOW_ON;
 3a0:	40 9a       	sbi	0x08, 0	; 8
		PHASE_U_HIGH_ON;
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_8+0x34>
		} else {
		PHASE_U_LOW_ON;
 3aa:	58 9a       	sbi	0x0b, 0	; 11
		PHASE_V_HIGH_ON;
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	}
}
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	8f 93       	push	r24
	rotationCounter = 0;
 3ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	PHASES_ALL_HIGH_OFF;
 3d2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 3d6:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 3d8:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 3da:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 3dc:	1d 9b       	sbis	0x03, 5	; 3
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <__vector_9+0x2c>
		PHASE_W_LOW_ON;
 3e0:	28 9a       	sbi	0x05, 0	; 5
		PHASE_V_HIGH_ON;
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <__vector_9+0x34>
		} else {
		PHASE_V_LOW_ON;
 3ea:	40 9a       	sbi	0x08, 0	; 8
		PHASE_W_HIGH_ON;
 3ec:	80 e3       	ldi	r24, 0x30	; 48
 3ee:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	}
}
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
