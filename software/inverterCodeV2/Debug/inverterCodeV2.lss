
inverterCodeV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000adc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000b50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012db  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d66  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b0  00000000  00000000  00002cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000745  00000000  00000000  00004015  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000475a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_7>
  20:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_8>
  24:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_9>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a0 31       	cpi	r26, 0x10	; 16
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 b3 02 	call	0x566	; 0x566 <main>
  9c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <adc_init>:
    ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}

void adc_set_prescalar(uint8_t prescalar) {
    //ADCSRA &= ADC_PRESCALAR_MASK;
    ADCSRA |= prescalar;
  a4:	aa e7       	ldi	r26, 0x7A	; 122
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	1c 92       	st	X, r1
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	80 6c       	ori	r24, 0xC0	; 192
  b8:	80 83       	st	Z, r24
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  c0:	8c 91       	ld	r24, X
  c2:	87 68       	ori	r24, 0x87	; 135
  c4:	8c 93       	st	X, r24
  c6:	08 95       	ret

000000c8 <adc_read>:
Returns :   result - pass the 10 bit ADC number to requesting function
Notes   :
============================================================================*/
uint16_t adc_read(uint8_t adc_channel) {
    uint16_t result = 0;
    adc_channel = (ADMUX & 0b11100000) | (adc_channel & 0b00011111);
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	90 7e       	andi	r25, 0xE0	; 224
  d0:	8f 71       	andi	r24, 0x1F	; 31
  d2:	89 2b       	or	r24, r25
    ADMUX = adc_channel;
  d4:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
    while(!(ADCSRA & (1 << ADIF)));
  e0:	80 81       	ld	r24, Z
  e2:	84 ff       	sbrs	r24, 4
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <adc_read+0x18>
    result = ADCL;
  e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    result |= ((0b00000011 & ADCH) << 0b00001000);
  ea:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    ADCSRA |= (1 << ADIF);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	90 61       	ori	r25, 0x10	; 16
  f6:	90 83       	st	Z, r25
    return result;
  f8:	23 70       	andi	r18, 0x03	; 3
  fa:	90 e0       	ldi	r25, 0x00	; 0
}
  fc:	92 2b       	or	r25, r18
  fe:	08 95       	ret

00000100 <CAN_init>:
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0d ee       	ldi	r16, 0xED	; 237
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	6f ee       	ldi	r22, 0xEF	; 239
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	4e ee       	ldi	r20, 0xEE	; 238
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	27 ef       	ldi	r18, 0xF7	; 247
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	c6 ef       	ldi	r28, 0xF6	; 246
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	a5 ef       	ldi	r26, 0xF5	; 245
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	0f 2e       	mov	r0, r31
 12e:	f4 ef       	ldi	r31, 0xF4	; 244
 130:	ef 2e       	mov	r14, r31
 132:	f1 2c       	mov	r15, r1
 134:	f0 2d       	mov	r31, r0
 136:	98 2f       	mov	r25, r24
 138:	92 95       	swap	r25
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	f8 01       	movw	r30, r16
 13e:	90 83       	st	Z, r25
 140:	fb 01       	movw	r30, r22
 142:	10 82       	st	Z, r1
 144:	fa 01       	movw	r30, r20
 146:	10 82       	st	Z, r1
 148:	f9 01       	movw	r30, r18
 14a:	10 82       	st	Z, r1
 14c:	18 82       	st	Y, r1
 14e:	1c 92       	st	X, r1
 150:	f7 01       	movw	r30, r14
 152:	10 82       	st	Z, r1
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	71 f7       	brne	.-36     	; 0x136 <CAN_init+0x36>
 15a:	8e e0       	ldi	r24, 0x0E	; 14
 15c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 166:	83 e1       	ldi	r24, 0x13	; 19
 168:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 172:	80 ea       	ldi	r24, 0xA0	; 160
 174:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 17e:	ff ef       	ldi	r31, 0xFF	; 255
 180:	20 e7       	ldi	r18, 0x70	; 112
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	f1 50       	subi	r31, 0x01	; 1
 186:	20 40       	sbci	r18, 0x00	; 0
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <CAN_init+0x84>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <CAN_init+0x8e>
 18e:	00 00       	nop
 190:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 194:	82 fb       	bst	r24, 2
 196:	88 27       	eor	r24, r24
 198:	80 f9       	bld	r24, 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	89 27       	eor	r24, r25
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <CAN_RXInit>:
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	82 95       	swap	r24
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1c0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1c4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1c8:	82 2f       	mov	r24, r18
 1ca:	82 95       	swap	r24
 1cc:	88 0f       	add	r24, r24
 1ce:	80 7e       	andi	r24, 0xE0	; 224
 1d0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1d4:	da 01       	movw	r26, r20
 1d6:	c9 01       	movw	r24, r18
 1d8:	68 94       	set
 1da:	12 f8       	bld	r1, 2
 1dc:	b6 95       	lsr	r27
 1de:	a7 95       	ror	r26
 1e0:	97 95       	ror	r25
 1e2:	87 95       	ror	r24
 1e4:	16 94       	lsr	r1
 1e6:	d1 f7       	brne	.-12     	; 0x1dc <CAN_RXInit+0x30>
 1e8:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1ec:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1f0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1f4:	8e 2d       	mov	r24, r14
 1f6:	82 95       	swap	r24
 1f8:	88 0f       	add	r24, r24
 1fa:	80 7e       	andi	r24, 0xE0	; 224
 1fc:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 200:	d8 01       	movw	r26, r16
 202:	c7 01       	movw	r24, r14
 204:	68 94       	set
 206:	12 f8       	bld	r1, 2
 208:	b6 95       	lsr	r27
 20a:	a7 95       	ror	r26
 20c:	97 95       	ror	r25
 20e:	87 95       	ror	r24
 210:	16 94       	lsr	r1
 212:	d1 f7       	brne	.-12     	; 0x208 <CAN_RXInit+0x5c>
 214:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	c8 9e       	mul	r12, r24
 21c:	60 01       	movw	r12, r0
 21e:	11 24       	eor	r1, r1
 220:	60 68       	ori	r22, 0x80	; 128
 222:	c6 2a       	or	r12, r22
 224:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	08 95       	ret

00000236 <CAN_TXMOB>:
 236:	ef 92       	push	r14
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	82 95       	swap	r24
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 244:	ee ee       	ldi	r30, 0xEE	; 238
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	8f 7b       	andi	r24, 0xBF	; 191
 24c:	80 83       	st	Z, r24
 24e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 252:	80 2f       	mov	r24, r16
 254:	88 0f       	add	r24, r24
 256:	88 0f       	add	r24, r24
 258:	88 0f       	add	r24, r24
 25a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 25e:	d9 01       	movw	r26, r18
 260:	c8 01       	movw	r24, r16
 262:	68 94       	set
 264:	14 f8       	bld	r1, 4
 266:	b6 95       	lsr	r27
 268:	a7 95       	ror	r26
 26a:	97 95       	ror	r25
 26c:	87 95       	ror	r24
 26e:	16 94       	lsr	r1
 270:	d1 f7       	brne	.-12     	; 0x266 <CAN_TXMOB+0x30>
 272:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 276:	d9 01       	movw	r26, r18
 278:	c8 01       	movw	r24, r16
 27a:	07 2e       	mov	r0, r23
 27c:	7d e0       	ldi	r23, 0x0D	; 13
 27e:	b6 95       	lsr	r27
 280:	a7 95       	ror	r26
 282:	97 95       	ror	r25
 284:	87 95       	ror	r24
 286:	7a 95       	dec	r23
 288:	d1 f7       	brne	.-12     	; 0x27e <CAN_TXMOB+0x48>
 28a:	70 2d       	mov	r23, r0
 28c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 290:	0f 2e       	mov	r0, r31
 292:	f5 e1       	ldi	r31, 0x15	; 21
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	17 95       	ror	r17
 29a:	07 95       	ror	r16
 29c:	fa 95       	dec	r31
 29e:	d1 f7       	brne	.-12     	; 0x294 <CAN_TXMOB+0x5e>
 2a0:	f0 2d       	mov	r31, r0
 2a2:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 2a6:	66 23       	and	r22, r22
 2a8:	71 f0       	breq	.+28     	; 0x2c6 <CAN_TXMOB+0x90>
 2aa:	fa 01       	movw	r30, r20
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	86 0f       	add	r24, r22
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	48 0f       	add	r20, r24
 2b6:	59 1f       	adc	r21, r25
 2b8:	aa ef       	ldi	r26, 0xFA	; 250
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	81 91       	ld	r24, Z+
 2be:	8c 93       	st	X, r24
 2c0:	e4 17       	cp	r30, r20
 2c2:	f5 07       	cpc	r31, r21
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <CAN_TXMOB+0x86>
 2c6:	60 65       	ori	r22, 0x50	; 80
 2c8:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2cc:	ee 20       	and	r14, r14
 2ce:	a1 f0       	breq	.+40     	; 0x2f8 <CAN_TXMOB+0xc2>
 2d0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 2d4:	86 fd       	sbrc	r24, 6
 2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <CAN_TXMOB+0xc2>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	ee ee       	ldi	r30, 0xEE	; 238
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <CAN_TXMOB+0xb0>
 2e0:	90 81       	ld	r25, Z
 2e2:	96 fd       	sbrc	r25, 6
 2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <CAN_TXMOB+0xc2>
 2e6:	af e9       	ldi	r26, 0x9F	; 159
 2e8:	bf e0       	ldi	r27, 0x0F	; 15
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <CAN_TXMOB+0xb4>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <CAN_TXMOB+0xba>
 2f0:	00 00       	nop
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	e8 12       	cpse	r14, r24
 2f6:	f4 cf       	rjmp	.-24     	; 0x2e0 <CAN_TXMOB+0xaa>
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <CAN_findFreeTXMOB>:
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 308:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 30c:	86 fd       	sbrc	r24, 6
 30e:	16 c0       	rjmp	.+44     	; 0x33c <CAN_findFreeTXMOB+0x3c>
 310:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 314:	86 ff       	sbrs	r24, 6
 316:	14 c0       	rjmp	.+40     	; 0x340 <CAN_findFreeTXMOB+0x40>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	ad ee       	ldi	r26, 0xED	; 237
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	ee ee       	ldi	r30, 0xEE	; 238
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	cf ee       	ldi	r28, 0xEF	; 239
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	98 2f       	mov	r25, r24
 328:	92 95       	swap	r25
 32a:	90 7f       	andi	r25, 0xF0	; 240
 32c:	9c 93       	st	X, r25
 32e:	90 81       	ld	r25, Z
 330:	96 fd       	sbrc	r25, 6
 332:	0c c0       	rjmp	.+24     	; 0x34c <CAN_findFreeTXMOB+0x4c>
 334:	98 81       	ld	r25, Y
 336:	96 fd       	sbrc	r25, 6
 338:	05 c0       	rjmp	.+10     	; 0x344 <CAN_findFreeTXMOB+0x44>
 33a:	08 c0       	rjmp	.+16     	; 0x34c <CAN_findFreeTXMOB+0x4c>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	06 c0       	rjmp	.+12     	; 0x34c <CAN_findFreeTXMOB+0x4c>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	04 c0       	rjmp	.+8      	; 0x34c <CAN_findFreeTXMOB+0x4c>
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	71 f7       	brne	.-36     	; 0x326 <CAN_findFreeTXMOB+0x26>
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <__vector_18>:
	currentPowerB = ADC_read_power_B();
	currentPhaseU = currentPowerB - (currentPhaseW + currentPhaseV);
} */

ISR(CAN_INT_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	cf 92       	push	r12
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
    //uint8_t authority;
    //uint8_t mob;
    if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 37e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 382:	85 ff       	sbrs	r24, 5
 384:	1d c0       	rjmp	.+58     	; 0x3c0 <__vector_18+0x6e>
    {

        CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 386:	80 e5       	ldi	r24, 0x50	; 80
 388:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
        testChar = CANMSG;
 38c:	ea ef       	ldi	r30, 0xFA	; 250
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <testChar>
        uint8_t tempChar1 = CANMSG;
 396:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 398:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 39a:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 39c:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 39e:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 3a0:	80 81       	ld	r24, Z
        tempChar1 = CANMSG;
 3a2:	80 81       	ld	r24, Z

        // canFlag = 1;

        CAN_RXInit(5, 8, 0x4000000, 0x4000000, 1);
 3a4:	cc 24       	eor	r12, r12
 3a6:	c3 94       	inc	r12
 3a8:	e1 2c       	mov	r14, r1
 3aa:	f1 2c       	mov	r15, r1
 3ac:	00 e0       	ldi	r16, 0x00	; 0
 3ae:	14 e0       	ldi	r17, 0x04	; 4
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	54 e0       	ldi	r21, 0x04	; 4
 3b8:	68 e0       	ldi	r22, 0x08	; 8
 3ba:	85 e0       	ldi	r24, 0x05	; 5
 3bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CAN_RXInit>
    }
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	cf 90       	pop	r12
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <readVoltage>:

uint16_t readVoltage() {
    uint16_t adcRawValue = adc_read(10);
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_read>
    // 2560 is ref voltage from datasheet lol
    uint16_t analogeMV = adcRawValue * (2560) / 1024;
    return analogeMV;
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	3a e0       	ldi	r19, 0x0A	; 10
 3f6:	ac 01       	movw	r20, r24
 3f8:	42 9f       	mul	r20, r18
 3fa:	c0 01       	movw	r24, r0
 3fc:	43 9f       	mul	r20, r19
 3fe:	90 0d       	add	r25, r0
 400:	52 9f       	mul	r21, r18
 402:	90 0d       	add	r25, r0
 404:	11 24       	eor	r1, r1
}
 406:	89 2f       	mov	r24, r25
 408:	86 95       	lsr	r24
 40a:	86 95       	lsr	r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	08 95       	ret

00000410 <__vector_7>:
        // }
    }
}

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
    PORTB ^= 8;
 41e:	95 b1       	in	r25, 0x05	; 5
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	89 27       	eor	r24, r25
 424:	85 b9       	out	0x05, r24	; 5
    rotationCounter = 0;
 426:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rotationCounter+0x1>
 42a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter>
    PHASES_ALL_HIGH_OFF;
 42e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    PHASE_U_LOW_OFF;
 432:	58 98       	cbi	0x0b, 0	; 11
    PHASE_V_LOW_OFF;
 434:	40 98       	cbi	0x08, 0	; 8
    PHASE_W_LOW_OFF;
 436:	28 98       	cbi	0x05, 0	; 5

    if ((PIND & 64) == 64) { // GOING HIGH
 438:	4e 9b       	sbis	0x09, 6	; 9
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__vector_7+0x36>
#ifdef CLOCKWISE // Running Clockwise				> STEP 4
        PHASE_U_LOW_ON;
        PHASE_W_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 2
        PHASE_V_LOW_ON;
 43c:	40 9a       	sbi	0x08, 0	; 8
        PHASE_W_HIGH_ON;
 43e:	80 e3       	ldi	r24, 0x30	; 48
 440:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 444:	04 c0       	rjmp	.+8      	; 0x44e <__vector_7+0x3e>
#ifdef CLOCKWISE // Running Clockwise				> STEP 1
        PHASE_W_LOW_ON;
        PHASE_U_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 5
        PHASE_V_HIGH_ON;
 446:	8c e0       	ldi	r24, 0x0C	; 12
 448:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_W_LOW_ON;
 44c:	28 9a       	sbi	0x05, 0	; 5
#endif
#endif
    }
}
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
    rotationCounter = 0;
 468:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rotationCounter+0x1>
 46c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter>
    PHASES_ALL_HIGH_OFF;
 470:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    PHASE_U_LOW_OFF;
 474:	58 98       	cbi	0x0b, 0	; 11
    PHASE_V_LOW_OFF;
 476:	40 98       	cbi	0x08, 0	; 8
    PHASE_W_LOW_OFF;
 478:	28 98       	cbi	0x05, 0	; 5

    if ((PINB & 4) == 4) {
 47a:	1a 9b       	sbis	0x03, 2	; 3
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__vector_8+0x2c>
#ifdef CLOCKWISE // Running Clockwise				> STEP 6
        PHASE_V_LOW_ON;
        PHASE_U_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 6
        PHASE_U_HIGH_ON;
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_W_LOW_ON;
 484:	28 9a       	sbi	0x05, 0	; 5
 486:	04 c0       	rjmp	.+8      	; 0x490 <__vector_8+0x34>
#ifdef CLOCKWISE // Running Clockwise				> STEP 3
        PHASE_U_LOW_ON;
        PHASE_V_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 3
        PHASE_W_HIGH_ON;
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_U_LOW_ON;
 48e:	58 9a       	sbi	0x0b, 0	; 11
#endif
#endif
    }
}
 490:	8f 91       	pop	r24
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	8f 93       	push	r24
    rotationCounter = 0;
 4a8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rotationCounter+0x1>
 4ac:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter>
    PHASES_ALL_HIGH_OFF;
 4b0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    PHASE_U_LOW_OFF;
 4b4:	58 98       	cbi	0x0b, 0	; 11
    PHASE_V_LOW_OFF;
 4b6:	40 98       	cbi	0x08, 0	; 8
    PHASE_W_LOW_OFF;
 4b8:	28 98       	cbi	0x05, 0	; 5

    if ((PINB & 32) == 32) {
 4ba:	1d 9b       	sbis	0x03, 5	; 3
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__vector_9+0x2c>
#ifdef CLOCKWISE // Running Clockwise
        PHASE_W_LOW_ON;
        PHASE_V_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 4
        PHASE_V_HIGH_ON;
 4be:	8c e0       	ldi	r24, 0x0C	; 12
 4c0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_U_LOW_ON;
 4c4:	58 9a       	sbi	0x0b, 0	; 11
 4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__vector_9+0x34>
#ifdef CLOCKWISE // Running Clockwise				> STEP 5
        PHASE_V_LOW_ON;
        PHASE_W_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 1
        PHASE_V_LOW_ON;
 4c8:	40 9a       	sbi	0x08, 0	; 8
        PHASE_U_HIGH_ON;
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
#endif
#endif
    }
}
 4d0:	8f 91       	pop	r24
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <getMotorPosition>:
}
// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{
    return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 4dc:	23 b1       	in	r18, 0x03	; 3
 4de:	93 b1       	in	r25, 0x03	; 3
 4e0:	89 b1       	in	r24, 0x09	; 9
 4e2:	20 72       	andi	r18, 0x20	; 32
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	a9 01       	movw	r20, r18
 4e8:	55 95       	asr	r21
 4ea:	47 95       	ror	r20
 4ec:	55 95       	asr	r21
 4ee:	47 95       	ror	r20
 4f0:	55 95       	asr	r21
 4f2:	47 95       	ror	r20
 4f4:	94 70       	andi	r25, 0x04	; 4
 4f6:	29 2f       	mov	r18, r25
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	35 95       	asr	r19
 4fc:	27 95       	ror	r18
 4fe:	24 0f       	add	r18, r20
 500:	86 fb       	bst	r24, 6
 502:	88 27       	eor	r24, r24
 504:	80 f9       	bld	r24, 0
 506:	82 0f       	add	r24, r18
 508:	08 95       	ret

0000050a <kickMotor>:
    }
}

void kickMotor(void)
{
    switch (getMotorPosition())
 50a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <getMotorPosition>
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	b1 f0       	breq	.+44     	; 0x53e <kickMotor+0x34>
 512:	28 f4       	brcc	.+10     	; 0x51e <kickMotor+0x14>
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	49 f0       	breq	.+18     	; 0x52a <kickMotor+0x20>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	61 f0       	breq	.+24     	; 0x534 <kickMotor+0x2a>
 51c:	08 95       	ret
 51e:	85 30       	cpi	r24, 0x05	; 5
 520:	c1 f0       	breq	.+48     	; 0x552 <kickMotor+0x48>
 522:	90 f0       	brcs	.+36     	; 0x548 <kickMotor+0x3e>
 524:	86 30       	cpi	r24, 0x06	; 6
 526:	d1 f0       	breq	.+52     	; 0x55c <kickMotor+0x52>
 528:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 3
        PHASE_U_LOW_ON;
        PHASE_V_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 3
        PHASE_U_HIGH_ON;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_V_LOW_ON;
 530:	40 9a       	sbi	0x08, 0	; 8
#endif
#endif
        break;
 532:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 5
        PHASE_V_LOW_ON;
        PHASE_W_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 1
        PHASE_W_LOW_ON;
 534:	28 9a       	sbi	0x05, 0	; 5
        PHASE_V_HIGH_ON;
 536:	8c e0       	ldi	r24, 0x0C	; 12
 538:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
#endif
#endif
        break;
 53c:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 4
        PHASE_U_LOW_ON;
        PHASE_W_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 2
        PHASE_W_LOW_ON;
 53e:	28 9a       	sbi	0x05, 0	; 5
        PHASE_U_HIGH_ON;
 540:	83 e0       	ldi	r24, 0x03	; 3
 542:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
#endif
#endif
        break;
 546:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 1
        PHASE_W_LOW_ON;
        PHASE_U_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 5
        PHASE_W_HIGH_ON;
 548:	80 e3       	ldi	r24, 0x30	; 48
 54a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_U_LOW_ON;
 54e:	58 9a       	sbi	0x0b, 0	; 11
#endif
#endif
        break;
 550:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 2
        PHASE_W_LOW_ON;
        PHASE_V_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 4
        PHASE_W_HIGH_ON;
 552:	80 e3       	ldi	r24, 0x30	; 48
 554:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
        PHASE_V_LOW_ON;
 558:	40 9a       	sbi	0x08, 0	; 8
#endif
#endif
        break;
 55a:	08 95       	ret
#ifdef CLOCKWISE // Running Clockwise				> STEP 6
        PHASE_V_LOW_ON;
        PHASE_U_HIGH_ON;
#endif
#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 6
        PHASE_U_LOW_ON;
 55c:	58 9a       	sbi	0x0b, 0	; 11
        PHASE_V_HIGH_ON;
 55e:	8c e0       	ldi	r24, 0x0C	; 12
 560:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 564:	08 95       	ret

00000566 <main>:
uint16_t canCount = 0;
uint8_t tempCount = 0;

int main(void)
{
    DDRB |= 0b11001011;				// make the status LED an output
 566:	84 b1       	in	r24, 0x04	; 4
 568:	8b 6c       	ori	r24, 0xCB	; 203
 56a:	84 b9       	out	0x04, r24	; 4
    DDRC |= 0b10000101;
 56c:	87 b1       	in	r24, 0x07	; 7
 56e:	85 68       	ori	r24, 0x85	; 133
 570:	87 b9       	out	0x07, r24	; 7
    DDRD |= 0b10000001;				// PD7 is CAN STB
 572:	8a b1       	in	r24, 0x0a	; 10
 574:	81 68       	ori	r24, 0x81	; 129
 576:	8a b9       	out	0x0a, r24	; 10

    PORTB &= ~0b11001011;
 578:	85 b1       	in	r24, 0x05	; 5
 57a:	84 73       	andi	r24, 0x34	; 52
 57c:	85 b9       	out	0x05, r24	; 5
    PORTC &= ~0b00000001;		// Byte 7 = ADC_CS pin
 57e:	40 98       	cbi	0x08, 0	; 8
    PORTD &= ~0b00000001;
 580:	58 98       	cbi	0x0b, 0	; 11

    PORTB |= 0b00100100;	//turn hall pullups on
 582:	85 b1       	in	r24, 0x05	; 5
 584:	84 62       	ori	r24, 0x24	; 36
 586:	85 b9       	out	0x05, r24	; 5
    PORTD |= 0b01000000;
 588:	5e 9a       	sbi	0x0b, 6	; 11

    //PLL
    PLLCSR = 0x02;			//start PLL at 32MHz
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	89 bd       	out	0x29, r24	; 41

    //INTERRUPTS
    EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 58e:	85 e1       	ldi	r24, 0x15	; 21
 590:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    EIMSK = 0b00000111;		//enable INTs 2, 1, 0
 594:	87 e0       	ldi	r24, 0x07	; 7
 596:	8d bb       	out	0x1d, r24	; 29

    //PSC
    POCR_RB = 256;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 5a0:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    POCR0SA = POCR1SA = POCR2SA = 220;
 5a4:	8c ed       	ldi	r24, 0xDC	; 220
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 5ac:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 5b0:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 5b4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 5b8:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 5bc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
    POCR0SB = POCR1SB = POCR2SB = 210;
 5c0:	82 ed       	ldi	r24, 0xD2	; 210
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 5c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 5cc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 5d0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 5d4:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 5d8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
    PCNF = 0b00011100;						//centre-aligned mode
 5dc:	8c e1       	ldi	r24, 0x1C	; 28
 5de:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
    PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 5e2:	81 e2       	ldi	r24, 0x21	; 33
 5e4:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>

    adc_init();
 5e8:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_init>
    // ADC_init();
    // Init SPI
    // spi_init();

    // start the CAN interface
    CAN_init();		// Initialise CAN
 5ec:	0e 94 80 00 	call	0x100	; 0x100 <CAN_init>
    CAN_RXInit(5, 8, 0x4000000, 0x4000000, 1);
 5f0:	cc 24       	eor	r12, r12
 5f2:	c3 94       	inc	r12
 5f4:	e1 2c       	mov	r14, r1
 5f6:	f1 2c       	mov	r15, r1
 5f8:	00 e0       	ldi	r16, 0x00	; 0
 5fa:	14 e0       	ldi	r17, 0x04	; 4
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	54 e0       	ldi	r21, 0x04	; 4
 604:	68 e0       	ldi	r22, 0x08	; 8
 606:	85 e0       	ldi	r24, 0x05	; 5
 608:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CAN_RXInit>

    // start the interrupts
    sei();
 60c:	78 94       	sei

    //turn the outputs off
    PHASES_ALL_HIGH_OFF;
 60e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
    PHASE_U_LOW_OFF;
 612:	58 98       	cbi	0x0b, 0	; 11
    PHASE_V_LOW_OFF;
 614:	40 98       	cbi	0x08, 0	; 8
    PHASE_W_LOW_OFF;
 616:	28 98       	cbi	0x05, 0	; 5
            // Set PWM, dead time etc to motor speed command
            POCR0SA = POCR1SA = POCR2SA = motorCommand;
            POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
        } else {
            // else  off all outputs now
            POC = 0b00000000;
 618:	c6 eb       	ldi	r28, 0xB6	; 182
 61a:	d0 e0       	ldi	r29, 0x00	; 0
        motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
        if(motorCommand < 20) motorCommand = 20; // Limit for power applied
        // If we are spinning the motor
        if(motorState == 1) {
            // Set PWM, dead time etc to motor speed command
            POCR0SA = POCR1SA = POCR2SA = motorCommand;
 61c:	0f 2e       	mov	r0, r31
 61e:	fc ea       	ldi	r31, 0xAC	; 172
 620:	6f 2e       	mov	r6, r31
 622:	71 2c       	mov	r7, r1
 624:	f0 2d       	mov	r31, r0
 626:	0f 2e       	mov	r0, r31
 628:	f6 ea       	ldi	r31, 0xA6	; 166
 62a:	8f 2e       	mov	r8, r31
 62c:	91 2c       	mov	r9, r1
 62e:	f0 2d       	mov	r31, r0
 630:	0f 2e       	mov	r0, r31
 632:	f0 ea       	ldi	r31, 0xA0	; 160
 634:	af 2e       	mov	r10, r31
 636:	b1 2c       	mov	r11, r1
 638:	f0 2d       	mov	r31, r0
            POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 63a:	0f 2e       	mov	r0, r31
 63c:	f0 eb       	ldi	r31, 0xB0	; 176
 63e:	4f 2e       	mov	r4, r31
 640:	51 2c       	mov	r5, r1
 642:	f0 2d       	mov	r31, r0
 644:	0f 2e       	mov	r0, r31
 646:	fa ea       	ldi	r31, 0xAA	; 170
 648:	2f 2e       	mov	r2, r31
 64a:	31 2c       	mov	r3, r1
 64c:	f0 2d       	mov	r31, r0
        canCount++;

        if(canCount > 100) {
            canCount = 0;
            uint16_t voltVal = readVoltage();
            canArray[0] = voltVal >> 8;
 64e:	0f 2e       	mov	r0, r31
 650:	f3 e0       	ldi	r31, 0x03	; 3
 652:	cf 2e       	mov	r12, r31
 654:	f1 e0       	ldi	r31, 0x01	; 1
 656:	df 2e       	mov	r13, r31
 658:	f0 2d       	mov	r31, r0
    {
        // Motor Speed Calculation
        // --------------------------------------------------------------------

        motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
        if(motorCommand < 20) motorCommand = 20; // Limit for power applied
 65a:	0f 2e       	mov	r0, r31
 65c:	f4 e1       	ldi	r31, 0x14	; 20
 65e:	ef 2e       	mov	r14, r31
 660:	f0 2d       	mov	r31, r0
        // If we are spinning the motor
        if(motorState == 1) {
            // Set PWM, dead time etc to motor speed command
            POCR0SA = POCR1SA = POCR2SA = motorCommand;
            POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 662:	04 ea       	ldi	r16, 0xA4	; 164
 664:	10 e0       	ldi	r17, 0x00	; 0
            motorState = 0;
            // Turn on LED
            PORTB &= ~8;
        } else {
            // else (less than 1000) Turn on motor state machine
            motorState = 1;
 666:	ff 24       	eor	r15, r15
 668:	f3 94       	inc	r15
    while(1)
    {
        // Motor Speed Calculation
        // --------------------------------------------------------------------

        motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
 66a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <testChar>
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__floatsisf>
 678:	2d ec       	ldi	r18, 0xCD	; 205
 67a:	3c ec       	ldi	r19, 0xCC	; 204
 67c:	4c e0       	ldi	r20, 0x0C	; 12
 67e:	50 e4       	ldi	r21, 0x40	; 64
 680:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3>
 684:	9b 01       	movw	r18, r22
 686:	ac 01       	movw	r20, r24
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	8a e7       	ldi	r24, 0x7A	; 122
 68e:	93 e4       	ldi	r25, 0x43	; 67
 690:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__subsf3>
 694:	0e 94 42 04 	call	0x884	; 0x884 <__fixunssfsi>
 698:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <motorCommand>
        if(motorCommand < 20) motorCommand = 20; // Limit for power applied
 69c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorCommand>
 6a0:	84 31       	cpi	r24, 0x14	; 20
 6a2:	10 f4       	brcc	.+4      	; 0x6a8 <main+0x142>
 6a4:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <motorCommand>
        // If we are spinning the motor
        if(motorState == 1) {
 6a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorState>
 6ac:	81 30       	cpi	r24, 0x01	; 1
 6ae:	d1 f4       	brne	.+52     	; 0x6e4 <main+0x17e>
            // Set PWM, dead time etc to motor speed command
            POCR0SA = POCR1SA = POCR2SA = motorCommand;
 6b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorCommand>
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	f3 01       	movw	r30, r6
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
 6bc:	f4 01       	movw	r30, r8
 6be:	91 83       	std	Z+1, r25	; 0x01
 6c0:	80 83       	st	Z, r24
 6c2:	f5 01       	movw	r30, r10
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	80 83       	st	Z, r24
            POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 6c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorCommand>
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0a 97       	sbiw	r24, 0x0a	; 10
 6d0:	f2 01       	movw	r30, r4
 6d2:	91 83       	std	Z+1, r25	; 0x01
 6d4:	80 83       	st	Z, r24
 6d6:	f1 01       	movw	r30, r2
 6d8:	91 83       	std	Z+1, r25	; 0x01
 6da:	80 83       	st	Z, r24
 6dc:	f8 01       	movw	r30, r16
 6de:	91 83       	std	Z+1, r25	; 0x01
 6e0:	80 83       	st	Z, r24
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <main+0x186>
        } else {
            // else  off all outputs now
            POC = 0b00000000;
 6e4:	18 82       	st	Y, r1
            PHASE_U_LOW_OFF;
 6e6:	58 98       	cbi	0x0b, 0	; 11
            PHASE_V_LOW_OFF;
 6e8:	40 98       	cbi	0x08, 0	; 8
            PHASE_W_LOW_OFF;
 6ea:	28 98       	cbi	0x05, 0	; 5

        // Roll stop code
        // --------------------------------------------------------------------

        // If counter is under 1000, increment.
        if(rotationCounter < 1000) rotationCounter ++;
 6ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rotationCounter>
 6f0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rotationCounter+0x1>
 6f4:	88 3e       	cpi	r24, 0xE8	; 232
 6f6:	93 40       	sbci	r25, 0x03	; 3
 6f8:	48 f4       	brcc	.+18     	; 0x70c <main+0x1a6>
 6fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rotationCounter>
 6fe:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rotationCounter+0x1>
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <rotationCounter+0x1>
 708:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rotationCounter>
        // If rotation counter is at or greater than 1000
        if(rotationCounter > 999) {
 70c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rotationCounter>
 710:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rotationCounter+0x1>
 714:	88 3e       	cpi	r24, 0xE8	; 232
 716:	93 40       	sbci	r25, 0x03	; 3
 718:	20 f0       	brcs	.+8      	; 0x722 <main+0x1bc>
            // (at 1000) Turn of motor state machine
            motorState = 0;
 71a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <motorState>
            // Turn on LED
            PORTB &= ~8;
 71e:	2b 98       	cbi	0x05, 3	; 5
 720:	03 c0       	rjmp	.+6      	; 0x728 <main+0x1c2>
        } else {
            // else (less than 1000) Turn on motor state machine
            motorState = 1;
 722:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <motorState>
            PORTB |= 8;
 726:	2b 9a       	sbi	0x05, 3	; 5

        // Start up code
        // --------------------------------------------------------------------

        // IF statement to handle start up
        if((motorState == 0) && (motorCommand < 150)) { // If we are 'off' and the motor is not spinning at some 'fast speed'. Was motorCommand < 225, but assmed for high speed 90V testing
 728:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorState>
 72c:	81 11       	cpse	r24, r1
 72e:	0c c0       	rjmp	.+24     	; 0x748 <main+0x1e2>
 730:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorCommand>
 734:	86 39       	cpi	r24, 0x96	; 150
 736:	40 f4       	brcc	.+16     	; 0x748 <main+0x1e2>
            // This function would run always, but its not supposed to run at high speeds to save clock cycles for the interupt driven operation
            kickMotor(); // Run the low speed force sense and rotate function
 738:	0e 94 85 02 	call	0x50a	; 0x50a <kickMotor>
            motorState = 1;	// We are now running
 73c:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <motorState>
            rotationCounter = 0; // Reset rotation counter
 740:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rotationCounter+0x1>
 744:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rotationCounter>
        }


        canCount++;
 748:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <canCount>
 74c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <canCount+0x1>
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <canCount+0x1>
 756:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <canCount>

        if(canCount > 100) {
 75a:	85 36       	cpi	r24, 0x65	; 101
 75c:	91 05       	cpc	r25, r1
 75e:	08 f4       	brcc	.+2      	; 0x762 <main+0x1fc>
 760:	84 cf       	rjmp	.-248    	; 0x66a <main+0x104>
            canCount = 0;
 762:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <canCount+0x1>
 766:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <canCount>
            uint16_t voltVal = readVoltage();
 76a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <readVoltage>
            canArray[0] = voltVal >> 8;
 76e:	f6 01       	movw	r30, r12
 770:	90 83       	st	Z, r25
            canArray[1] = voltVal;
 772:	81 83       	std	Z+1, r24	; 0x01
            canArray[2] = 0x01;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	82 83       	std	Z+2, r24	; 0x02
            canArray[3] = tempCount;
 778:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 77c:	83 83       	std	Z+3, r24	; 0x03
            CANGCON &= ~(1 << ABRQ);
 77e:	e8 ed       	ldi	r30, 0xD8	; 216
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	8f 77       	andi	r24, 0x7F	; 127
 786:	80 83       	st	Z, r24
            CAN_TXMOB(CAN_findFreeTXMOB(), 4, canArray, CAN_INV_ID, 0x0100);
 788:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
 78c:	e1 2c       	mov	r14, r1
 78e:	00 e0       	ldi	r16, 0x00	; 0
 790:	10 e0       	ldi	r17, 0x00	; 0
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	34 e0       	ldi	r19, 0x04	; 4
 796:	a6 01       	movw	r20, r12
 798:	64 e0       	ldi	r22, 0x04	; 4
 79a:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
            tempCount++;
 79e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 7a2:	8f 5f       	subi	r24, 0xFF	; 255
 7a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 7a8:	58 cf       	rjmp	.-336    	; 0x65a <main+0xf4>

000007aa <__subsf3>:
 7aa:	50 58       	subi	r21, 0x80	; 128

000007ac <__addsf3>:
 7ac:	bb 27       	eor	r27, r27
 7ae:	aa 27       	eor	r26, r26
 7b0:	0e 94 ed 03 	call	0x7da	; 0x7da <__addsf3x>
 7b4:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_round>
 7b8:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_pscA>
 7bc:	38 f0       	brcs	.+14     	; 0x7cc <__addsf3+0x20>
 7be:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_pscB>
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3+0x20>
 7c4:	39 f4       	brne	.+14     	; 0x7d4 <__addsf3+0x28>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	19 f4       	brne	.+6      	; 0x7d0 <__addsf3+0x24>
 7ca:	26 f4       	brtc	.+8      	; 0x7d4 <__addsf3+0x28>
 7cc:	0c 94 b4 04 	jmp	0x968	; 0x968 <__fp_nan>
 7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3+0x28>
 7d2:	e0 95       	com	r30
 7d4:	e7 fb       	bst	r30, 7
 7d6:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>

000007da <__addsf3x>:
 7da:	e9 2f       	mov	r30, r25
 7dc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_split3>
 7e0:	58 f3       	brcs	.-42     	; 0x7b8 <__addsf3+0xc>
 7e2:	ba 17       	cp	r27, r26
 7e4:	62 07       	cpc	r22, r18
 7e6:	73 07       	cpc	r23, r19
 7e8:	84 07       	cpc	r24, r20
 7ea:	95 07       	cpc	r25, r21
 7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__addsf3x+0x1c>
 7ee:	79 f4       	brne	.+30     	; 0x80e <__addsf3x+0x34>
 7f0:	a6 f5       	brtc	.+104    	; 0x85a <__addsf3x+0x80>
 7f2:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_zero>
 7f6:	0e f4       	brtc	.+2      	; 0x7fa <__addsf3x+0x20>
 7f8:	e0 95       	com	r30
 7fa:	0b 2e       	mov	r0, r27
 7fc:	ba 2f       	mov	r27, r26
 7fe:	a0 2d       	mov	r26, r0
 800:	0b 01       	movw	r0, r22
 802:	b9 01       	movw	r22, r18
 804:	90 01       	movw	r18, r0
 806:	0c 01       	movw	r0, r24
 808:	ca 01       	movw	r24, r20
 80a:	a0 01       	movw	r20, r0
 80c:	11 24       	eor	r1, r1
 80e:	ff 27       	eor	r31, r31
 810:	59 1b       	sub	r21, r25
 812:	99 f0       	breq	.+38     	; 0x83a <__addsf3x+0x60>
 814:	59 3f       	cpi	r21, 0xF9	; 249
 816:	50 f4       	brcc	.+20     	; 0x82c <__addsf3x+0x52>
 818:	50 3e       	cpi	r21, 0xE0	; 224
 81a:	68 f1       	brcs	.+90     	; 0x876 <__addsf3x+0x9c>
 81c:	1a 16       	cp	r1, r26
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	a2 2f       	mov	r26, r18
 822:	23 2f       	mov	r18, r19
 824:	34 2f       	mov	r19, r20
 826:	44 27       	eor	r20, r20
 828:	58 5f       	subi	r21, 0xF8	; 248
 82a:	f3 cf       	rjmp	.-26     	; 0x812 <__addsf3x+0x38>
 82c:	46 95       	lsr	r20
 82e:	37 95       	ror	r19
 830:	27 95       	ror	r18
 832:	a7 95       	ror	r26
 834:	f0 40       	sbci	r31, 0x00	; 0
 836:	53 95       	inc	r21
 838:	c9 f7       	brne	.-14     	; 0x82c <__addsf3x+0x52>
 83a:	7e f4       	brtc	.+30     	; 0x85a <__addsf3x+0x80>
 83c:	1f 16       	cp	r1, r31
 83e:	ba 0b       	sbc	r27, r26
 840:	62 0b       	sbc	r22, r18
 842:	73 0b       	sbc	r23, r19
 844:	84 0b       	sbc	r24, r20
 846:	ba f0       	brmi	.+46     	; 0x876 <__addsf3x+0x9c>
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	a1 f0       	breq	.+40     	; 0x874 <__addsf3x+0x9a>
 84c:	ff 0f       	add	r31, r31
 84e:	bb 1f       	adc	r27, r27
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	c2 f7       	brpl	.-16     	; 0x848 <__addsf3x+0x6e>
 858:	0e c0       	rjmp	.+28     	; 0x876 <__addsf3x+0x9c>
 85a:	ba 0f       	add	r27, r26
 85c:	62 1f       	adc	r22, r18
 85e:	73 1f       	adc	r23, r19
 860:	84 1f       	adc	r24, r20
 862:	48 f4       	brcc	.+18     	; 0x876 <__addsf3x+0x9c>
 864:	87 95       	ror	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	08 f0       	brcs	.+2      	; 0x874 <__addsf3x+0x9a>
 872:	b0 cf       	rjmp	.-160    	; 0x7d4 <__addsf3+0x28>
 874:	93 95       	inc	r25
 876:	88 0f       	add	r24, r24
 878:	08 f0       	brcs	.+2      	; 0x87c <__addsf3x+0xa2>
 87a:	99 27       	eor	r25, r25
 87c:	ee 0f       	add	r30, r30
 87e:	97 95       	ror	r25
 880:	87 95       	ror	r24
 882:	08 95       	ret

00000884 <__fixunssfsi>:
 884:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_splitA>
 888:	88 f0       	brcs	.+34     	; 0x8ac <__fixunssfsi+0x28>
 88a:	9f 57       	subi	r25, 0x7F	; 127
 88c:	98 f0       	brcs	.+38     	; 0x8b4 <__fixunssfsi+0x30>
 88e:	b9 2f       	mov	r27, r25
 890:	99 27       	eor	r25, r25
 892:	b7 51       	subi	r27, 0x17	; 23
 894:	b0 f0       	brcs	.+44     	; 0x8c2 <__fixunssfsi+0x3e>
 896:	e1 f0       	breq	.+56     	; 0x8d0 <__fixunssfsi+0x4c>
 898:	66 0f       	add	r22, r22
 89a:	77 1f       	adc	r23, r23
 89c:	88 1f       	adc	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	1a f0       	brmi	.+6      	; 0x8a8 <__fixunssfsi+0x24>
 8a2:	ba 95       	dec	r27
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__fixunssfsi+0x14>
 8a6:	14 c0       	rjmp	.+40     	; 0x8d0 <__fixunssfsi+0x4c>
 8a8:	b1 30       	cpi	r27, 0x01	; 1
 8aa:	91 f0       	breq	.+36     	; 0x8d0 <__fixunssfsi+0x4c>
 8ac:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_zero>
 8b0:	b1 e0       	ldi	r27, 0x01	; 1
 8b2:	08 95       	ret
 8b4:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__fp_zero>
 8b8:	67 2f       	mov	r22, r23
 8ba:	78 2f       	mov	r23, r24
 8bc:	88 27       	eor	r24, r24
 8be:	b8 5f       	subi	r27, 0xF8	; 248
 8c0:	39 f0       	breq	.+14     	; 0x8d0 <__fixunssfsi+0x4c>
 8c2:	b9 3f       	cpi	r27, 0xF9	; 249
 8c4:	cc f3       	brlt	.-14     	; 0x8b8 <__fixunssfsi+0x34>
 8c6:	86 95       	lsr	r24
 8c8:	77 95       	ror	r23
 8ca:	67 95       	ror	r22
 8cc:	b3 95       	inc	r27
 8ce:	d9 f7       	brne	.-10     	; 0x8c6 <__fixunssfsi+0x42>
 8d0:	3e f4       	brtc	.+14     	; 0x8e0 <__fixunssfsi+0x5c>
 8d2:	90 95       	com	r25
 8d4:	80 95       	com	r24
 8d6:	70 95       	com	r23
 8d8:	61 95       	neg	r22
 8da:	7f 4f       	sbci	r23, 0xFF	; 255
 8dc:	8f 4f       	sbci	r24, 0xFF	; 255
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	08 95       	ret

000008e2 <__floatunsisf>:
 8e2:	e8 94       	clt
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__floatsisf+0x12>

000008e6 <__floatsisf>:
 8e6:	97 fb       	bst	r25, 7
 8e8:	3e f4       	brtc	.+14     	; 0x8f8 <__floatsisf+0x12>
 8ea:	90 95       	com	r25
 8ec:	80 95       	com	r24
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	99 23       	and	r25, r25
 8fa:	a9 f0       	breq	.+42     	; 0x926 <__floatsisf+0x40>
 8fc:	f9 2f       	mov	r31, r25
 8fe:	96 e9       	ldi	r25, 0x96	; 150
 900:	bb 27       	eor	r27, r27
 902:	93 95       	inc	r25
 904:	f6 95       	lsr	r31
 906:	87 95       	ror	r24
 908:	77 95       	ror	r23
 90a:	67 95       	ror	r22
 90c:	b7 95       	ror	r27
 90e:	f1 11       	cpse	r31, r1
 910:	f8 cf       	rjmp	.-16     	; 0x902 <__floatsisf+0x1c>
 912:	fa f4       	brpl	.+62     	; 0x952 <__floatsisf+0x6c>
 914:	bb 0f       	add	r27, r27
 916:	11 f4       	brne	.+4      	; 0x91c <__floatsisf+0x36>
 918:	60 ff       	sbrs	r22, 0
 91a:	1b c0       	rjmp	.+54     	; 0x952 <__floatsisf+0x6c>
 91c:	6f 5f       	subi	r22, 0xFF	; 255
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	16 c0       	rjmp	.+44     	; 0x952 <__floatsisf+0x6c>
 926:	88 23       	and	r24, r24
 928:	11 f0       	breq	.+4      	; 0x92e <__floatsisf+0x48>
 92a:	96 e9       	ldi	r25, 0x96	; 150
 92c:	11 c0       	rjmp	.+34     	; 0x950 <__floatsisf+0x6a>
 92e:	77 23       	and	r23, r23
 930:	21 f0       	breq	.+8      	; 0x93a <__floatsisf+0x54>
 932:	9e e8       	ldi	r25, 0x8E	; 142
 934:	87 2f       	mov	r24, r23
 936:	76 2f       	mov	r23, r22
 938:	05 c0       	rjmp	.+10     	; 0x944 <__floatsisf+0x5e>
 93a:	66 23       	and	r22, r22
 93c:	71 f0       	breq	.+28     	; 0x95a <__floatsisf+0x74>
 93e:	96 e8       	ldi	r25, 0x86	; 134
 940:	86 2f       	mov	r24, r22
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	2a f0       	brmi	.+10     	; 0x952 <__floatsisf+0x6c>
 948:	9a 95       	dec	r25
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	da f7       	brpl	.-10     	; 0x948 <__floatsisf+0x62>
 952:	88 0f       	add	r24, r24
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <__fp_inf>:
 95c:	97 f9       	bld	r25, 7
 95e:	9f 67       	ori	r25, 0x7F	; 127
 960:	80 e8       	ldi	r24, 0x80	; 128
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	08 95       	ret

00000968 <__fp_nan>:
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	80 ec       	ldi	r24, 0xC0	; 192
 96c:	08 95       	ret

0000096e <__fp_pscA>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	16 16       	cp	r1, r22
 974:	17 06       	cpc	r1, r23
 976:	18 06       	cpc	r1, r24
 978:	09 06       	cpc	r0, r25
 97a:	08 95       	ret

0000097c <__fp_pscB>:
 97c:	00 24       	eor	r0, r0
 97e:	0a 94       	dec	r0
 980:	12 16       	cp	r1, r18
 982:	13 06       	cpc	r1, r19
 984:	14 06       	cpc	r1, r20
 986:	05 06       	cpc	r0, r21
 988:	08 95       	ret

0000098a <__fp_round>:
 98a:	09 2e       	mov	r0, r25
 98c:	03 94       	inc	r0
 98e:	00 0c       	add	r0, r0
 990:	11 f4       	brne	.+4      	; 0x996 <__fp_round+0xc>
 992:	88 23       	and	r24, r24
 994:	52 f0       	brmi	.+20     	; 0x9aa <__fp_round+0x20>
 996:	bb 0f       	add	r27, r27
 998:	40 f4       	brcc	.+16     	; 0x9aa <__fp_round+0x20>
 99a:	bf 2b       	or	r27, r31
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__fp_round+0x18>
 99e:	60 ff       	sbrs	r22, 0
 9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__fp_round+0x20>
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	08 95       	ret

000009ac <__fp_split3>:
 9ac:	57 fd       	sbrc	r21, 7
 9ae:	90 58       	subi	r25, 0x80	; 128
 9b0:	44 0f       	add	r20, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	59 f0       	breq	.+22     	; 0x9cc <__fp_splitA+0x10>
 9b6:	5f 3f       	cpi	r21, 0xFF	; 255
 9b8:	71 f0       	breq	.+28     	; 0x9d6 <__fp_splitA+0x1a>
 9ba:	47 95       	ror	r20

000009bc <__fp_splitA>:
 9bc:	88 0f       	add	r24, r24
 9be:	97 fb       	bst	r25, 7
 9c0:	99 1f       	adc	r25, r25
 9c2:	61 f0       	breq	.+24     	; 0x9dc <__fp_splitA+0x20>
 9c4:	9f 3f       	cpi	r25, 0xFF	; 255
 9c6:	79 f0       	breq	.+30     	; 0x9e6 <__fp_splitA+0x2a>
 9c8:	87 95       	ror	r24
 9ca:	08 95       	ret
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	14 06       	cpc	r1, r20
 9d2:	55 1f       	adc	r21, r21
 9d4:	f2 cf       	rjmp	.-28     	; 0x9ba <__fp_split3+0xe>
 9d6:	46 95       	lsr	r20
 9d8:	f1 df       	rcall	.-30     	; 0x9bc <__fp_splitA>
 9da:	08 c0       	rjmp	.+16     	; 0x9ec <__fp_splitA+0x30>
 9dc:	16 16       	cp	r1, r22
 9de:	17 06       	cpc	r1, r23
 9e0:	18 06       	cpc	r1, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	f1 cf       	rjmp	.-30     	; 0x9c8 <__fp_splitA+0xc>
 9e6:	86 95       	lsr	r24
 9e8:	71 05       	cpc	r23, r1
 9ea:	61 05       	cpc	r22, r1
 9ec:	08 94       	sec
 9ee:	08 95       	ret

000009f0 <__fp_zero>:
 9f0:	e8 94       	clt

000009f2 <__fp_szero>:
 9f2:	bb 27       	eor	r27, r27
 9f4:	66 27       	eor	r22, r22
 9f6:	77 27       	eor	r23, r23
 9f8:	cb 01       	movw	r24, r22
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret

000009fe <__mulsf3>:
 9fe:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulsf3x>
 a02:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_round>
 a06:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_pscA>
 a0a:	38 f0       	brcs	.+14     	; 0xa1a <__mulsf3+0x1c>
 a0c:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_pscB>
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__mulsf3+0x1c>
 a12:	95 23       	and	r25, r21
 a14:	11 f0       	breq	.+4      	; 0xa1a <__mulsf3+0x1c>
 a16:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 a1a:	0c 94 b4 04 	jmp	0x968	; 0x968 <__fp_nan>
 a1e:	11 24       	eor	r1, r1
 a20:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_szero>

00000a24 <__mulsf3x>:
 a24:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_split3>
 a28:	70 f3       	brcs	.-36     	; 0xa06 <__mulsf3+0x8>

00000a2a <__mulsf3_pse>:
 a2a:	95 9f       	mul	r25, r21
 a2c:	c1 f3       	breq	.-16     	; 0xa1e <__mulsf3+0x20>
 a2e:	95 0f       	add	r25, r21
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	55 1f       	adc	r21, r21
 a34:	62 9f       	mul	r22, r18
 a36:	f0 01       	movw	r30, r0
 a38:	72 9f       	mul	r23, r18
 a3a:	bb 27       	eor	r27, r27
 a3c:	f0 0d       	add	r31, r0
 a3e:	b1 1d       	adc	r27, r1
 a40:	63 9f       	mul	r22, r19
 a42:	aa 27       	eor	r26, r26
 a44:	f0 0d       	add	r31, r0
 a46:	b1 1d       	adc	r27, r1
 a48:	aa 1f       	adc	r26, r26
 a4a:	64 9f       	mul	r22, r20
 a4c:	66 27       	eor	r22, r22
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	66 1f       	adc	r22, r22
 a54:	82 9f       	mul	r24, r18
 a56:	22 27       	eor	r18, r18
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	62 1f       	adc	r22, r18
 a5e:	73 9f       	mul	r23, r19
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	62 1f       	adc	r22, r18
 a66:	83 9f       	mul	r24, r19
 a68:	a0 0d       	add	r26, r0
 a6a:	61 1d       	adc	r22, r1
 a6c:	22 1f       	adc	r18, r18
 a6e:	74 9f       	mul	r23, r20
 a70:	33 27       	eor	r19, r19
 a72:	a0 0d       	add	r26, r0
 a74:	61 1d       	adc	r22, r1
 a76:	23 1f       	adc	r18, r19
 a78:	84 9f       	mul	r24, r20
 a7a:	60 0d       	add	r22, r0
 a7c:	21 1d       	adc	r18, r1
 a7e:	82 2f       	mov	r24, r18
 a80:	76 2f       	mov	r23, r22
 a82:	6a 2f       	mov	r22, r26
 a84:	11 24       	eor	r1, r1
 a86:	9f 57       	subi	r25, 0x7F	; 127
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	9a f0       	brmi	.+38     	; 0xab2 <__mulsf3_pse+0x88>
 a8c:	f1 f0       	breq	.+60     	; 0xaca <__mulsf3_pse+0xa0>
 a8e:	88 23       	and	r24, r24
 a90:	4a f0       	brmi	.+18     	; 0xaa4 <__mulsf3_pse+0x7a>
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	bb 1f       	adc	r27, r27
 a98:	66 1f       	adc	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	91 50       	subi	r25, 0x01	; 1
 aa0:	50 40       	sbci	r21, 0x00	; 0
 aa2:	a9 f7       	brne	.-22     	; 0xa8e <__mulsf3_pse+0x64>
 aa4:	9e 3f       	cpi	r25, 0xFE	; 254
 aa6:	51 05       	cpc	r21, r1
 aa8:	80 f0       	brcs	.+32     	; 0xaca <__mulsf3_pse+0xa0>
 aaa:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_inf>
 aae:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_szero>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	e4 f3       	brlt	.-8      	; 0xaae <__mulsf3_pse+0x84>
 ab6:	98 3e       	cpi	r25, 0xE8	; 232
 ab8:	d4 f3       	brlt	.-12     	; 0xaae <__mulsf3_pse+0x84>
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f7 95       	ror	r31
 ac4:	e7 95       	ror	r30
 ac6:	9f 5f       	subi	r25, 0xFF	; 255
 ac8:	c1 f7       	brne	.-16     	; 0xaba <__mulsf3_pse+0x90>
 aca:	fe 2b       	or	r31, r30
 acc:	88 0f       	add	r24, r24
 ace:	91 1d       	adc	r25, r1
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
