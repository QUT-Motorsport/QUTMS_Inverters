
inverterCodeV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010dd  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000718  00000000  00000000  000027a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_7>
  20:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_8>
  24:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_9>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a5 30       	cpi	r26, 0x05	; 5
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  9c:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <CAN_init>:
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0d ee       	ldi	r16, 0xED	; 237
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	6f ee       	ldi	r22, 0xEF	; 239
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	4e ee       	ldi	r20, 0xEE	; 238
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	27 ef       	ldi	r18, 0xF7	; 247
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	c6 ef       	ldi	r28, 0xF6	; 246
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	a5 ef       	ldi	r26, 0xF5	; 245
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0f 2e       	mov	r0, r31
  d2:	f4 ef       	ldi	r31, 0xF4	; 244
  d4:	ef 2e       	mov	r14, r31
  d6:	f1 2c       	mov	r15, r1
  d8:	f0 2d       	mov	r31, r0
  da:	98 2f       	mov	r25, r24
  dc:	92 95       	swap	r25
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	f8 01       	movw	r30, r16
  e2:	90 83       	st	Z, r25
  e4:	fb 01       	movw	r30, r22
  e6:	10 82       	st	Z, r1
  e8:	fa 01       	movw	r30, r20
  ea:	10 82       	st	Z, r1
  ec:	f9 01       	movw	r30, r18
  ee:	10 82       	st	Z, r1
  f0:	18 82       	st	Y, r1
  f2:	1c 92       	st	X, r1
  f4:	f7 01       	movw	r30, r14
  f6:	10 82       	st	Z, r1
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	86 30       	cpi	r24, 0x06	; 6
  fc:	71 f7       	brne	.-36     	; 0xda <CAN_init+0x36>
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 116:	80 ea       	ldi	r24, 0xA0	; 160
 118:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	20 e7       	ldi	r18, 0x70	; 112
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	f1 50       	subi	r31, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <CAN_init+0x84>
 130:	00 c0       	rjmp	.+0      	; 0x132 <CAN_init+0x8e>
 132:	00 00       	nop
 134:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 138:	82 fb       	bst	r24, 2
 13a:	88 27       	eor	r24, r24
 13c:	80 f9       	bld	r24, 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	89 27       	eor	r24, r25
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <CAN_RXInit>:
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	82 95       	swap	r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 164:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 168:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 16c:	82 2f       	mov	r24, r18
 16e:	82 95       	swap	r24
 170:	88 0f       	add	r24, r24
 172:	80 7e       	andi	r24, 0xE0	; 224
 174:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 178:	da 01       	movw	r26, r20
 17a:	c9 01       	movw	r24, r18
 17c:	68 94       	set
 17e:	12 f8       	bld	r1, 2
 180:	b6 95       	lsr	r27
 182:	a7 95       	ror	r26
 184:	97 95       	ror	r25
 186:	87 95       	ror	r24
 188:	16 94       	lsr	r1
 18a:	d1 f7       	brne	.-12     	; 0x180 <CAN_RXInit+0x30>
 18c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 190:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 194:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 198:	8e 2d       	mov	r24, r14
 19a:	82 95       	swap	r24
 19c:	88 0f       	add	r24, r24
 19e:	80 7e       	andi	r24, 0xE0	; 224
 1a0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1a4:	d8 01       	movw	r26, r16
 1a6:	c7 01       	movw	r24, r14
 1a8:	68 94       	set
 1aa:	12 f8       	bld	r1, 2
 1ac:	b6 95       	lsr	r27
 1ae:	a7 95       	ror	r26
 1b0:	97 95       	ror	r25
 1b2:	87 95       	ror	r24
 1b4:	16 94       	lsr	r1
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <CAN_RXInit+0x5c>
 1b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	c8 9e       	mul	r12, r24
 1c0:	60 01       	movw	r12, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	60 68       	ori	r22, 0x80	; 128
 1c6:	c6 2a       	or	r12, r22
 1c8:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <__vector_18>:
	currentPowerB = ADC_read_power_B();
	currentPhaseU = currentPowerB - (currentPhaseW + currentPhaseV);
} */

ISR(CAN_INT_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	cf 92       	push	r12
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	//uint8_t authority;
	//uint8_t mob;
	if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 206:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 20a:	85 ff       	sbrs	r24, 5
 20c:	1d c0       	rjmp	.+58     	; 0x248 <__vector_18+0x6e>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 20e:	80 e5       	ldi	r24, 0x50	; 80
 210:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		testChar = CANMSG;
 214:	ea ef       	ldi	r30, 0xFA	; 250
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <testChar>
		uint8_t tempChar1 = CANMSG;
 21e:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 220:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 222:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 224:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 226:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 228:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 22a:	80 81       	ld	r24, Z

		// canFlag = 1;

		CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 22c:	cc 24       	eor	r12, r12
 22e:	c3 94       	inc	r12
 230:	e1 2c       	mov	r14, r1
 232:	f1 2c       	mov	r15, r1
 234:	00 e0       	ldi	r16, 0x00	; 0
 236:	14 e0       	ldi	r17, 0x04	; 4
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	54 e0       	ldi	r21, 0x04	; 4
 240:	68 e0       	ldi	r22, 0x08	; 8
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	}
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	cf 90       	pop	r12
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_7>:
		// }
	}
}

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{	
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
	PORTB ^= 8;
 282:	95 b1       	in	r25, 0x05	; 5
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	89 27       	eor	r24, r25
 288:	85 b9       	out	0x05, r24	; 5
	rotationCounter = 0;
 28a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter+0x1>
 28e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 292:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 296:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 298:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 29a:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) { // GOING HIGH
 29c:	4e 9b       	sbis	0x09, 6	; 9
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <__vector_7+0x36>
			#ifdef CLOCKWISE // Running Clockwise				> STEP 4
				PHASE_U_LOW_ON;
				PHASE_W_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 2
				PHASE_V_LOW_ON;
 2a0:	40 9a       	sbi	0x08, 0	; 8
				PHASE_W_HIGH_ON;
 2a2:	80 e3       	ldi	r24, 0x30	; 48
 2a4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <__vector_7+0x3e>
			#ifdef CLOCKWISE // Running Clockwise				> STEP 1
				PHASE_W_LOW_ON;
				PHASE_U_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 5
				PHASE_V_HIGH_ON;
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 2b0:	28 9a       	sbi	0x05, 0	; 5
			#endif
		#endif
	}
}
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
	rotationCounter = 0;
 2cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter+0x1>
 2d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 2d4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 2d8:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 2da:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 2dc:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 2de:	1a 9b       	sbis	0x03, 2	; 3
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <__vector_8+0x2c>
			#ifdef CLOCKWISE // Running Clockwise				> STEP 6
				PHASE_V_LOW_ON;
				PHASE_U_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 6
				PHASE_U_HIGH_ON;
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_W_LOW_ON;
 2e8:	28 9a       	sbi	0x05, 0	; 5
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <__vector_8+0x34>
			#ifdef CLOCKWISE // Running Clockwise				> STEP 3
				PHASE_U_LOW_ON;
				PHASE_V_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 3
				PHASE_W_HIGH_ON;
 2ec:	80 e3       	ldi	r24, 0x30	; 48
 2ee:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_U_LOW_ON;
 2f2:	58 9a       	sbi	0x0b, 0	; 11
			#endif
		#endif
	}
}
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	8f 93       	push	r24
	rotationCounter = 0;
 30c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter+0x1>
 310:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 314:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 318:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 31a:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 31c:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 31e:	1d 9b       	sbis	0x03, 5	; 3
 320:	05 c0       	rjmp	.+10     	; 0x32c <__vector_9+0x2c>
			#ifdef CLOCKWISE // Running Clockwise
				PHASE_W_LOW_ON;
				PHASE_V_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 4
				PHASE_V_HIGH_ON;
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_U_LOW_ON;
 328:	58 9a       	sbi	0x0b, 0	; 11
 32a:	04 c0       	rjmp	.+8      	; 0x334 <__vector_9+0x34>
			#ifdef CLOCKWISE // Running Clockwise				> STEP 5
				PHASE_V_LOW_ON;
				PHASE_W_HIGH_ON;
			#endif
			#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 1
				PHASE_V_LOW_ON;
 32c:	40 9a       	sbi	0x08, 0	; 8
				PHASE_U_HIGH_ON;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
			#endif
		#endif
	}
}
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <getMotorPosition>:
}
// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 340:	23 b1       	in	r18, 0x03	; 3
 342:	93 b1       	in	r25, 0x03	; 3
 344:	89 b1       	in	r24, 0x09	; 9
 346:	20 72       	andi	r18, 0x20	; 32
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	a9 01       	movw	r20, r18
 34c:	55 95       	asr	r21
 34e:	47 95       	ror	r20
 350:	55 95       	asr	r21
 352:	47 95       	ror	r20
 354:	55 95       	asr	r21
 356:	47 95       	ror	r20
 358:	94 70       	andi	r25, 0x04	; 4
 35a:	29 2f       	mov	r18, r25
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	35 95       	asr	r19
 360:	27 95       	ror	r18
 362:	24 0f       	add	r18, r20
 364:	86 fb       	bst	r24, 6
 366:	88 27       	eor	r24, r24
 368:	80 f9       	bld	r24, 0
 36a:	82 0f       	add	r24, r18
 36c:	08 95       	ret

0000036e <kickMotor>:
	}
}

void kickMotor(void)
{
	switch (getMotorPosition())
 36e:	0e 94 a0 01 	call	0x340	; 0x340 <getMotorPosition>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	b1 f0       	breq	.+44     	; 0x3a2 <kickMotor+0x34>
 376:	28 f4       	brcc	.+10     	; 0x382 <kickMotor+0x14>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	49 f0       	breq	.+18     	; 0x38e <kickMotor+0x20>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	61 f0       	breq	.+24     	; 0x398 <kickMotor+0x2a>
 380:	08 95       	ret
 382:	85 30       	cpi	r24, 0x05	; 5
 384:	c1 f0       	breq	.+48     	; 0x3b6 <kickMotor+0x48>
 386:	90 f0       	brcs	.+36     	; 0x3ac <kickMotor+0x3e>
 388:	86 30       	cpi	r24, 0x06	; 6
 38a:	d1 f0       	breq	.+52     	; 0x3c0 <kickMotor+0x52>
 38c:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 3
					PHASE_U_LOW_ON;
					PHASE_V_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 3
					PHASE_U_HIGH_ON;
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
					PHASE_V_LOW_ON;
 394:	40 9a       	sbi	0x08, 0	; 8
				#endif
			#endif
			break;
 396:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 5
					PHASE_V_LOW_ON;
					PHASE_W_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 1
					PHASE_W_LOW_ON;
 398:	28 9a       	sbi	0x05, 0	; 5
					PHASE_V_HIGH_ON;
 39a:	8c e0       	ldi	r24, 0x0C	; 12
 39c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#endif
			#endif
			break;
 3a0:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 4
					PHASE_U_LOW_ON;
					PHASE_W_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 2
					PHASE_W_LOW_ON;
 3a2:	28 9a       	sbi	0x05, 0	; 5
					PHASE_U_HIGH_ON;
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#endif
			#endif
			break;
 3aa:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 1
					PHASE_W_LOW_ON;
					PHASE_U_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 5
					PHASE_W_HIGH_ON;
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
					PHASE_U_LOW_ON;
 3b2:	58 9a       	sbi	0x0b, 0	; 11
				#endif
			#endif
			break;
 3b4:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 2
					PHASE_W_LOW_ON;
					PHASE_V_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 4
					PHASE_W_HIGH_ON;
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
					PHASE_V_LOW_ON;
 3bc:	40 9a       	sbi	0x08, 0	; 8
				#endif
			#endif
			break;
 3be:	08 95       	ret
				#ifdef CLOCKWISE // Running Clockwise				> STEP 6
					PHASE_V_LOW_ON;
					PHASE_U_HIGH_ON;
				#endif
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 6
					PHASE_U_LOW_ON;
 3c0:	58 9a       	sbi	0x0b, 0	; 11
					PHASE_V_HIGH_ON;
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 3c8:	08 95       	ret

000003ca <main>:
	}
}

int main(void)
{
	DDRB |= 0b11001011;				// make the status LED an output
 3ca:	84 b1       	in	r24, 0x04	; 4
 3cc:	8b 6c       	ori	r24, 0xCB	; 203
 3ce:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b10000101;
 3d0:	87 b1       	in	r24, 0x07	; 7
 3d2:	85 68       	ori	r24, 0x85	; 133
 3d4:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 3d6:	8a b1       	in	r24, 0x0a	; 10
 3d8:	81 68       	ori	r24, 0x81	; 129
 3da:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	84 73       	andi	r24, 0x34	; 52
 3e0:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;		// Byte 7 = ADC_CS pin
 3e2:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 3e4:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 3e6:	85 b1       	in	r24, 0x05	; 5
 3e8:	84 62       	ori	r24, 0x24	; 36
 3ea:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 3ec:	5e 9a       	sbi	0x0b, 6	; 11
	
	//PLL
	PLLCSR = 0x02;			//start PLL at 32MHz
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	89 bd       	out	0x29, r24	; 41
	
	//INTERRUPTS
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 3f2:	85 e1       	ldi	r24, 0x15	; 21
 3f4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0
 3f8:	87 e0       	ldi	r24, 0x07	; 7
 3fa:	8d bb       	out	0x1d, r24	; 29
	
	//PSC
	POCR_RB = 256;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 404:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 408:	8c ed       	ldi	r24, 0xDC	; 220
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 410:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 414:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 418:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 41c:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 420:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 424:	82 ed       	ldi	r24, 0xD2	; 210
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 42c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 430:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 434:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 438:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 43c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 440:	8c e1       	ldi	r24, 0x1C	; 28
 442:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 446:	81 e2       	ldi	r24, 0x21	; 33
 448:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>
	// ADC_init();
	// Init SPI
	// spi_init();

	// start the CAN interface
	CAN_init();		// Initialise CAN
 44c:	0e 94 52 00 	call	0xa4	; 0xa4 <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 450:	cc 24       	eor	r12, r12
 452:	c3 94       	inc	r12
 454:	e1 2c       	mov	r14, r1
 456:	f1 2c       	mov	r15, r1
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	14 e0       	ldi	r17, 0x04	; 4
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	54 e0       	ldi	r21, 0x04	; 4
 464:	68 e0       	ldi	r22, 0x08	; 8
 466:	85 e0       	ldi	r24, 0x05	; 5
 468:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	
	// start the interrupts
	sei();	
 46c:	78 94       	sei
	
	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 46e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 472:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 474:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 476:	28 98       	cbi	0x05, 0	; 5
	{
		// Motor Speed Calculation
		// --------------------------------------------------------------------
		
		motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
		if(motorCommand < 20) motorCommand = 20; // Limit for power applied
 478:	0f 2e       	mov	r0, r31
 47a:	f4 e1       	ldi	r31, 0x14	; 20
 47c:	4f 2e       	mov	r4, r31
 47e:	f0 2d       	mov	r31, r0
			// Set PWM, dead time etc to motor speed command
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		} else {
			// else  off all outputs now
			POC = 0b00000000;
 480:	c6 eb       	ldi	r28, 0xB6	; 182
 482:	d0 e0       	ldi	r29, 0x00	; 0
		motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
		if(motorCommand < 20) motorCommand = 20; // Limit for power applied
		// If we are spinning the motor
		if(motorState == 1) {
			// Set PWM, dead time etc to motor speed command
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 484:	0f 2e       	mov	r0, r31
 486:	fc ea       	ldi	r31, 0xAC	; 172
 488:	8f 2e       	mov	r8, r31
 48a:	91 2c       	mov	r9, r1
 48c:	f0 2d       	mov	r31, r0
 48e:	0f 2e       	mov	r0, r31
 490:	f6 ea       	ldi	r31, 0xA6	; 166
 492:	af 2e       	mov	r10, r31
 494:	b1 2c       	mov	r11, r1
 496:	f0 2d       	mov	r31, r0
 498:	0f 2e       	mov	r0, r31
 49a:	f0 ea       	ldi	r31, 0xA0	; 160
 49c:	cf 2e       	mov	r12, r31
 49e:	d1 2c       	mov	r13, r1
 4a0:	f0 2d       	mov	r31, r0
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 4a2:	0f 2e       	mov	r0, r31
 4a4:	f0 eb       	ldi	r31, 0xB0	; 176
 4a6:	ef 2e       	mov	r14, r31
 4a8:	f1 2c       	mov	r15, r1
 4aa:	f0 2d       	mov	r31, r0
 4ac:	0a ea       	ldi	r16, 0xAA	; 170
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	0f 2e       	mov	r0, r31
 4b2:	f4 ea       	ldi	r31, 0xA4	; 164
 4b4:	6f 2e       	mov	r6, r31
 4b6:	71 2c       	mov	r7, r1
 4b8:	f0 2d       	mov	r31, r0
			motorState = 0;
			// Turn on LED
			PORTB &= ~8;
		} else {
			// else (less than 1000) Turn on motor state machine
			motorState = 1;
 4ba:	55 24       	eor	r5, r5
 4bc:	53 94       	inc	r5
	while(1)
	{
		// Motor Speed Calculation
		// --------------------------------------------------------------------
		
		motorCommand = 250 - (testChar * 2.2); // Generating PWM duty cycle - Lower value = more on time cycle wise
 4be:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <testChar>
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__floatsisf>
 4cc:	2d ec       	ldi	r18, 0xCD	; 205
 4ce:	3c ec       	ldi	r19, 0xCC	; 204
 4d0:	4c e0       	ldi	r20, 0x0C	; 12
 4d2:	50 e4       	ldi	r21, 0x40	; 64
 4d4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsf3>
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	8a e7       	ldi	r24, 0x7A	; 122
 4e2:	93 e4       	ldi	r25, 0x43	; 67
 4e4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__subsf3>
 4e8:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
 4ec:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <motorCommand>
		if(motorCommand < 20) motorCommand = 20; // Limit for power applied
 4f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorCommand>
 4f4:	84 31       	cpi	r24, 0x14	; 20
 4f6:	10 f4       	brcc	.+4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f8:	40 92 01 01 	sts	0x0101, r4	; 0x800101 <motorCommand>
		// If we are spinning the motor
		if(motorState == 1) {
 4fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	d1 f4       	brne	.+52     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			// Set PWM, dead time etc to motor speed command
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 504:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorCommand>
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	f4 01       	movw	r30, r8
 50c:	91 83       	std	Z+1, r25	; 0x01
 50e:	80 83       	st	Z, r24
 510:	f5 01       	movw	r30, r10
 512:	91 83       	std	Z+1, r25	; 0x01
 514:	80 83       	st	Z, r24
 516:	f6 01       	movw	r30, r12
 518:	91 83       	std	Z+1, r25	; 0x01
 51a:	80 83       	st	Z, r24
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 51c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorCommand>
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0a 97       	sbiw	r24, 0x0a	; 10
 524:	f7 01       	movw	r30, r14
 526:	91 83       	std	Z+1, r25	; 0x01
 528:	80 83       	st	Z, r24
 52a:	f8 01       	movw	r30, r16
 52c:	91 83       	std	Z+1, r25	; 0x01
 52e:	80 83       	st	Z, r24
 530:	f3 01       	movw	r30, r6
 532:	91 83       	std	Z+1, r25	; 0x01
 534:	80 83       	st	Z, r24
 536:	04 c0       	rjmp	.+8      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
		} else {
			// else  off all outputs now
			POC = 0b00000000;
 538:	18 82       	st	Y, r1
			PHASE_U_LOW_OFF;
 53a:	58 98       	cbi	0x0b, 0	; 11
			PHASE_V_LOW_OFF;
 53c:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 53e:	28 98       	cbi	0x05, 0	; 5
		
		// Roll stop code
		// --------------------------------------------------------------------
		
		// If counter is under 1000, increment.
		if(rotationCounter < 1000) rotationCounter ++;
 540:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rotationCounter>
 544:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rotationCounter+0x1>
 548:	88 3e       	cpi	r24, 0xE8	; 232
 54a:	93 40       	sbci	r25, 0x03	; 3
 54c:	48 f4       	brcc	.+18     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 54e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rotationCounter>
 552:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rotationCounter+0x1>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rotationCounter+0x1>
 55c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rotationCounter>
		// If rotation counter is at or greater than 1000
		if(rotationCounter > 999) {
 560:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rotationCounter>
 564:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rotationCounter+0x1>
 568:	88 3e       	cpi	r24, 0xE8	; 232
 56a:	93 40       	sbci	r25, 0x03	; 3
 56c:	20 f0       	brcs	.+8      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
			// (at 1000) Turn of motor state machine
			motorState = 0;
 56e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			// Turn on LED
			PORTB &= ~8;
 572:	2b 98       	cbi	0x05, 3	; 5
 574:	03 c0       	rjmp	.+6      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
		} else {
			// else (less than 1000) Turn on motor state machine
			motorState = 1;
 576:	50 92 00 01 	sts	0x0100, r5	; 0x800100 <_edata>
			PORTB |= 8;
 57a:	2b 9a       	sbi	0x05, 3	; 5
		
		// Start up code
		// --------------------------------------------------------------------
		
		// IF statement to handle start up
		if((motorState == 0) && (motorCommand < 150)) { // If we are 'off' and the motor is not spinning at some 'fast speed'. Was motorCommand < 225, but assmed for high speed 90V testing
 57c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 580:	81 11       	cpse	r24, r1
 582:	9d cf       	rjmp	.-198    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 584:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorCommand>
 588:	86 39       	cpi	r24, 0x96	; 150
 58a:	08 f0       	brcs	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 58c:	98 cf       	rjmp	.-208    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			// This function would run always, but its not supposed to run at high speeds to save clock cycles for the interupt driven operation
			kickMotor(); // Run the low speed force sense and rotate function
 58e:	0e 94 b7 01 	call	0x36e	; 0x36e <kickMotor>
			motorState = 1;	// We are now running
 592:	50 92 00 01 	sts	0x0100, r5	; 0x800100 <_edata>
			rotationCounter = 0; // Reset rotation counter
 596:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rotationCounter+0x1>
 59a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rotationCounter>
 59e:	8f cf       	rjmp	.-226    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

000005a0 <__subsf3>:
 5a0:	50 58       	subi	r21, 0x80	; 128

000005a2 <__addsf3>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	aa 27       	eor	r26, r26
 5a6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__addsf3x>
 5aa:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>
 5ae:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_pscA>
 5b2:	38 f0       	brcs	.+14     	; 0x5c2 <__addsf3+0x20>
 5b4:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscB>
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__addsf3+0x20>
 5ba:	39 f4       	brne	.+14     	; 0x5ca <__addsf3+0x28>
 5bc:	9f 3f       	cpi	r25, 0xFF	; 255
 5be:	19 f4       	brne	.+6      	; 0x5c6 <__addsf3+0x24>
 5c0:	26 f4       	brtc	.+8      	; 0x5ca <__addsf3+0x28>
 5c2:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>
 5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3+0x28>
 5c8:	e0 95       	com	r30
 5ca:	e7 fb       	bst	r30, 7
 5cc:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>

000005d0 <__addsf3x>:
 5d0:	e9 2f       	mov	r30, r25
 5d2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_split3>
 5d6:	58 f3       	brcs	.-42     	; 0x5ae <__addsf3+0xc>
 5d8:	ba 17       	cp	r27, r26
 5da:	62 07       	cpc	r22, r18
 5dc:	73 07       	cpc	r23, r19
 5de:	84 07       	cpc	r24, r20
 5e0:	95 07       	cpc	r25, r21
 5e2:	20 f0       	brcs	.+8      	; 0x5ec <__addsf3x+0x1c>
 5e4:	79 f4       	brne	.+30     	; 0x604 <__addsf3x+0x34>
 5e6:	a6 f5       	brtc	.+104    	; 0x650 <__addsf3x+0x80>
 5e8:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_zero>
 5ec:	0e f4       	brtc	.+2      	; 0x5f0 <__addsf3x+0x20>
 5ee:	e0 95       	com	r30
 5f0:	0b 2e       	mov	r0, r27
 5f2:	ba 2f       	mov	r27, r26
 5f4:	a0 2d       	mov	r26, r0
 5f6:	0b 01       	movw	r0, r22
 5f8:	b9 01       	movw	r22, r18
 5fa:	90 01       	movw	r18, r0
 5fc:	0c 01       	movw	r0, r24
 5fe:	ca 01       	movw	r24, r20
 600:	a0 01       	movw	r20, r0
 602:	11 24       	eor	r1, r1
 604:	ff 27       	eor	r31, r31
 606:	59 1b       	sub	r21, r25
 608:	99 f0       	breq	.+38     	; 0x630 <__addsf3x+0x60>
 60a:	59 3f       	cpi	r21, 0xF9	; 249
 60c:	50 f4       	brcc	.+20     	; 0x622 <__addsf3x+0x52>
 60e:	50 3e       	cpi	r21, 0xE0	; 224
 610:	68 f1       	brcs	.+90     	; 0x66c <__addsf3x+0x9c>
 612:	1a 16       	cp	r1, r26
 614:	f0 40       	sbci	r31, 0x00	; 0
 616:	a2 2f       	mov	r26, r18
 618:	23 2f       	mov	r18, r19
 61a:	34 2f       	mov	r19, r20
 61c:	44 27       	eor	r20, r20
 61e:	58 5f       	subi	r21, 0xF8	; 248
 620:	f3 cf       	rjmp	.-26     	; 0x608 <__addsf3x+0x38>
 622:	46 95       	lsr	r20
 624:	37 95       	ror	r19
 626:	27 95       	ror	r18
 628:	a7 95       	ror	r26
 62a:	f0 40       	sbci	r31, 0x00	; 0
 62c:	53 95       	inc	r21
 62e:	c9 f7       	brne	.-14     	; 0x622 <__addsf3x+0x52>
 630:	7e f4       	brtc	.+30     	; 0x650 <__addsf3x+0x80>
 632:	1f 16       	cp	r1, r31
 634:	ba 0b       	sbc	r27, r26
 636:	62 0b       	sbc	r22, r18
 638:	73 0b       	sbc	r23, r19
 63a:	84 0b       	sbc	r24, r20
 63c:	ba f0       	brmi	.+46     	; 0x66c <__addsf3x+0x9c>
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	a1 f0       	breq	.+40     	; 0x66a <__addsf3x+0x9a>
 642:	ff 0f       	add	r31, r31
 644:	bb 1f       	adc	r27, r27
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	c2 f7       	brpl	.-16     	; 0x63e <__addsf3x+0x6e>
 64e:	0e c0       	rjmp	.+28     	; 0x66c <__addsf3x+0x9c>
 650:	ba 0f       	add	r27, r26
 652:	62 1f       	adc	r22, r18
 654:	73 1f       	adc	r23, r19
 656:	84 1f       	adc	r24, r20
 658:	48 f4       	brcc	.+18     	; 0x66c <__addsf3x+0x9c>
 65a:	87 95       	ror	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	f7 95       	ror	r31
 664:	9e 3f       	cpi	r25, 0xFE	; 254
 666:	08 f0       	brcs	.+2      	; 0x66a <__addsf3x+0x9a>
 668:	b0 cf       	rjmp	.-160    	; 0x5ca <__addsf3+0x28>
 66a:	93 95       	inc	r25
 66c:	88 0f       	add	r24, r24
 66e:	08 f0       	brcs	.+2      	; 0x672 <__addsf3x+0xa2>
 670:	99 27       	eor	r25, r25
 672:	ee 0f       	add	r30, r30
 674:	97 95       	ror	r25
 676:	87 95       	ror	r24
 678:	08 95       	ret

0000067a <__fixunssfsi>:
 67a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_splitA>
 67e:	88 f0       	brcs	.+34     	; 0x6a2 <__fixunssfsi+0x28>
 680:	9f 57       	subi	r25, 0x7F	; 127
 682:	98 f0       	brcs	.+38     	; 0x6aa <__fixunssfsi+0x30>
 684:	b9 2f       	mov	r27, r25
 686:	99 27       	eor	r25, r25
 688:	b7 51       	subi	r27, 0x17	; 23
 68a:	b0 f0       	brcs	.+44     	; 0x6b8 <__fixunssfsi+0x3e>
 68c:	e1 f0       	breq	.+56     	; 0x6c6 <__fixunssfsi+0x4c>
 68e:	66 0f       	add	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	1a f0       	brmi	.+6      	; 0x69e <__fixunssfsi+0x24>
 698:	ba 95       	dec	r27
 69a:	c9 f7       	brne	.-14     	; 0x68e <__fixunssfsi+0x14>
 69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__fixunssfsi+0x4c>
 69e:	b1 30       	cpi	r27, 0x01	; 1
 6a0:	91 f0       	breq	.+36     	; 0x6c6 <__fixunssfsi+0x4c>
 6a2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_zero>
 6a6:	b1 e0       	ldi	r27, 0x01	; 1
 6a8:	08 95       	ret
 6aa:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_zero>
 6ae:	67 2f       	mov	r22, r23
 6b0:	78 2f       	mov	r23, r24
 6b2:	88 27       	eor	r24, r24
 6b4:	b8 5f       	subi	r27, 0xF8	; 248
 6b6:	39 f0       	breq	.+14     	; 0x6c6 <__fixunssfsi+0x4c>
 6b8:	b9 3f       	cpi	r27, 0xF9	; 249
 6ba:	cc f3       	brlt	.-14     	; 0x6ae <__fixunssfsi+0x34>
 6bc:	86 95       	lsr	r24
 6be:	77 95       	ror	r23
 6c0:	67 95       	ror	r22
 6c2:	b3 95       	inc	r27
 6c4:	d9 f7       	brne	.-10     	; 0x6bc <__fixunssfsi+0x42>
 6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__fixunssfsi+0x5c>
 6c8:	90 95       	com	r25
 6ca:	80 95       	com	r24
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	8f 4f       	sbci	r24, 0xFF	; 255
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	08 95       	ret

000006d8 <__floatunsisf>:
 6d8:	e8 94       	clt
 6da:	09 c0       	rjmp	.+18     	; 0x6ee <__floatsisf+0x12>

000006dc <__floatsisf>:
 6dc:	97 fb       	bst	r25, 7
 6de:	3e f4       	brtc	.+14     	; 0x6ee <__floatsisf+0x12>
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	99 23       	and	r25, r25
 6f0:	a9 f0       	breq	.+42     	; 0x71c <__floatsisf+0x40>
 6f2:	f9 2f       	mov	r31, r25
 6f4:	96 e9       	ldi	r25, 0x96	; 150
 6f6:	bb 27       	eor	r27, r27
 6f8:	93 95       	inc	r25
 6fa:	f6 95       	lsr	r31
 6fc:	87 95       	ror	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f1 11       	cpse	r31, r1
 706:	f8 cf       	rjmp	.-16     	; 0x6f8 <__floatsisf+0x1c>
 708:	fa f4       	brpl	.+62     	; 0x748 <__floatsisf+0x6c>
 70a:	bb 0f       	add	r27, r27
 70c:	11 f4       	brne	.+4      	; 0x712 <__floatsisf+0x36>
 70e:	60 ff       	sbrs	r22, 0
 710:	1b c0       	rjmp	.+54     	; 0x748 <__floatsisf+0x6c>
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	16 c0       	rjmp	.+44     	; 0x748 <__floatsisf+0x6c>
 71c:	88 23       	and	r24, r24
 71e:	11 f0       	breq	.+4      	; 0x724 <__floatsisf+0x48>
 720:	96 e9       	ldi	r25, 0x96	; 150
 722:	11 c0       	rjmp	.+34     	; 0x746 <__floatsisf+0x6a>
 724:	77 23       	and	r23, r23
 726:	21 f0       	breq	.+8      	; 0x730 <__floatsisf+0x54>
 728:	9e e8       	ldi	r25, 0x8E	; 142
 72a:	87 2f       	mov	r24, r23
 72c:	76 2f       	mov	r23, r22
 72e:	05 c0       	rjmp	.+10     	; 0x73a <__floatsisf+0x5e>
 730:	66 23       	and	r22, r22
 732:	71 f0       	breq	.+28     	; 0x750 <__floatsisf+0x74>
 734:	96 e8       	ldi	r25, 0x86	; 134
 736:	86 2f       	mov	r24, r22
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	2a f0       	brmi	.+10     	; 0x748 <__floatsisf+0x6c>
 73e:	9a 95       	dec	r25
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	da f7       	brpl	.-10     	; 0x73e <__floatsisf+0x62>
 748:	88 0f       	add	r24, r24
 74a:	96 95       	lsr	r25
 74c:	87 95       	ror	r24
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__fp_inf>:
 752:	97 f9       	bld	r25, 7
 754:	9f 67       	ori	r25, 0x7F	; 127
 756:	80 e8       	ldi	r24, 0x80	; 128
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	08 95       	ret

0000075e <__fp_nan>:
 75e:	9f ef       	ldi	r25, 0xFF	; 255
 760:	80 ec       	ldi	r24, 0xC0	; 192
 762:	08 95       	ret

00000764 <__fp_pscA>:
 764:	00 24       	eor	r0, r0
 766:	0a 94       	dec	r0
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	18 06       	cpc	r1, r24
 76e:	09 06       	cpc	r0, r25
 770:	08 95       	ret

00000772 <__fp_pscB>:
 772:	00 24       	eor	r0, r0
 774:	0a 94       	dec	r0
 776:	12 16       	cp	r1, r18
 778:	13 06       	cpc	r1, r19
 77a:	14 06       	cpc	r1, r20
 77c:	05 06       	cpc	r0, r21
 77e:	08 95       	ret

00000780 <__fp_round>:
 780:	09 2e       	mov	r0, r25
 782:	03 94       	inc	r0
 784:	00 0c       	add	r0, r0
 786:	11 f4       	brne	.+4      	; 0x78c <__fp_round+0xc>
 788:	88 23       	and	r24, r24
 78a:	52 f0       	brmi	.+20     	; 0x7a0 <__fp_round+0x20>
 78c:	bb 0f       	add	r27, r27
 78e:	40 f4       	brcc	.+16     	; 0x7a0 <__fp_round+0x20>
 790:	bf 2b       	or	r27, r31
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0x18>
 794:	60 ff       	sbrs	r22, 0
 796:	04 c0       	rjmp	.+8      	; 0x7a0 <__fp_round+0x20>
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__fp_split3>:
 7a2:	57 fd       	sbrc	r21, 7
 7a4:	90 58       	subi	r25, 0x80	; 128
 7a6:	44 0f       	add	r20, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	59 f0       	breq	.+22     	; 0x7c2 <__fp_splitA+0x10>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	71 f0       	breq	.+28     	; 0x7cc <__fp_splitA+0x1a>
 7b0:	47 95       	ror	r20

000007b2 <__fp_splitA>:
 7b2:	88 0f       	add	r24, r24
 7b4:	97 fb       	bst	r25, 7
 7b6:	99 1f       	adc	r25, r25
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_splitA+0x20>
 7ba:	9f 3f       	cpi	r25, 0xFF	; 255
 7bc:	79 f0       	breq	.+30     	; 0x7dc <__fp_splitA+0x2a>
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret
 7c2:	12 16       	cp	r1, r18
 7c4:	13 06       	cpc	r1, r19
 7c6:	14 06       	cpc	r1, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	f2 cf       	rjmp	.-28     	; 0x7b0 <__fp_split3+0xe>
 7cc:	46 95       	lsr	r20
 7ce:	f1 df       	rcall	.-30     	; 0x7b2 <__fp_splitA>
 7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <__fp_splitA+0x30>
 7d2:	16 16       	cp	r1, r22
 7d4:	17 06       	cpc	r1, r23
 7d6:	18 06       	cpc	r1, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	f1 cf       	rjmp	.-30     	; 0x7be <__fp_splitA+0xc>
 7dc:	86 95       	lsr	r24
 7de:	71 05       	cpc	r23, r1
 7e0:	61 05       	cpc	r22, r1
 7e2:	08 94       	sec
 7e4:	08 95       	ret

000007e6 <__fp_zero>:
 7e6:	e8 94       	clt

000007e8 <__fp_szero>:
 7e8:	bb 27       	eor	r27, r27
 7ea:	66 27       	eor	r22, r22
 7ec:	77 27       	eor	r23, r23
 7ee:	cb 01       	movw	r24, r22
 7f0:	97 f9       	bld	r25, 7
 7f2:	08 95       	ret

000007f4 <__mulsf3>:
 7f4:	0e 94 0d 04 	call	0x81a	; 0x81a <__mulsf3x>
 7f8:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>
 7fc:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_pscA>
 800:	38 f0       	brcs	.+14     	; 0x810 <__mulsf3+0x1c>
 802:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscB>
 806:	20 f0       	brcs	.+8      	; 0x810 <__mulsf3+0x1c>
 808:	95 23       	and	r25, r21
 80a:	11 f0       	breq	.+4      	; 0x810 <__mulsf3+0x1c>
 80c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 810:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>
 814:	11 24       	eor	r1, r1
 816:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>

0000081a <__mulsf3x>:
 81a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_split3>
 81e:	70 f3       	brcs	.-36     	; 0x7fc <__mulsf3+0x8>

00000820 <__mulsf3_pse>:
 820:	95 9f       	mul	r25, r21
 822:	c1 f3       	breq	.-16     	; 0x814 <__mulsf3+0x20>
 824:	95 0f       	add	r25, r21
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	55 1f       	adc	r21, r21
 82a:	62 9f       	mul	r22, r18
 82c:	f0 01       	movw	r30, r0
 82e:	72 9f       	mul	r23, r18
 830:	bb 27       	eor	r27, r27
 832:	f0 0d       	add	r31, r0
 834:	b1 1d       	adc	r27, r1
 836:	63 9f       	mul	r22, r19
 838:	aa 27       	eor	r26, r26
 83a:	f0 0d       	add	r31, r0
 83c:	b1 1d       	adc	r27, r1
 83e:	aa 1f       	adc	r26, r26
 840:	64 9f       	mul	r22, r20
 842:	66 27       	eor	r22, r22
 844:	b0 0d       	add	r27, r0
 846:	a1 1d       	adc	r26, r1
 848:	66 1f       	adc	r22, r22
 84a:	82 9f       	mul	r24, r18
 84c:	22 27       	eor	r18, r18
 84e:	b0 0d       	add	r27, r0
 850:	a1 1d       	adc	r26, r1
 852:	62 1f       	adc	r22, r18
 854:	73 9f       	mul	r23, r19
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	62 1f       	adc	r22, r18
 85c:	83 9f       	mul	r24, r19
 85e:	a0 0d       	add	r26, r0
 860:	61 1d       	adc	r22, r1
 862:	22 1f       	adc	r18, r18
 864:	74 9f       	mul	r23, r20
 866:	33 27       	eor	r19, r19
 868:	a0 0d       	add	r26, r0
 86a:	61 1d       	adc	r22, r1
 86c:	23 1f       	adc	r18, r19
 86e:	84 9f       	mul	r24, r20
 870:	60 0d       	add	r22, r0
 872:	21 1d       	adc	r18, r1
 874:	82 2f       	mov	r24, r18
 876:	76 2f       	mov	r23, r22
 878:	6a 2f       	mov	r22, r26
 87a:	11 24       	eor	r1, r1
 87c:	9f 57       	subi	r25, 0x7F	; 127
 87e:	50 40       	sbci	r21, 0x00	; 0
 880:	9a f0       	brmi	.+38     	; 0x8a8 <__mulsf3_pse+0x88>
 882:	f1 f0       	breq	.+60     	; 0x8c0 <__mulsf3_pse+0xa0>
 884:	88 23       	and	r24, r24
 886:	4a f0       	brmi	.+18     	; 0x89a <__mulsf3_pse+0x7a>
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	bb 1f       	adc	r27, r27
 88e:	66 1f       	adc	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	91 50       	subi	r25, 0x01	; 1
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	a9 f7       	brne	.-22     	; 0x884 <__mulsf3_pse+0x64>
 89a:	9e 3f       	cpi	r25, 0xFE	; 254
 89c:	51 05       	cpc	r21, r1
 89e:	80 f0       	brcs	.+32     	; 0x8c0 <__mulsf3_pse+0xa0>
 8a0:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
 8a4:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>
 8a8:	5f 3f       	cpi	r21, 0xFF	; 255
 8aa:	e4 f3       	brlt	.-8      	; 0x8a4 <__mulsf3_pse+0x84>
 8ac:	98 3e       	cpi	r25, 0xE8	; 232
 8ae:	d4 f3       	brlt	.-12     	; 0x8a4 <__mulsf3_pse+0x84>
 8b0:	86 95       	lsr	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	b7 95       	ror	r27
 8b8:	f7 95       	ror	r31
 8ba:	e7 95       	ror	r30
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <__mulsf3_pse+0x90>
 8c0:	fe 2b       	or	r31, r30
 8c2:	88 0f       	add	r24, r24
 8c4:	91 1d       	adc	r25, r1
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
