
inverterCodeV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000075e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  0000075e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001131  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000754  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_7>
  20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_8>
  24:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_9>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ae 30       	cpi	r26, 0x0E	; 14
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
  9c:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <CAN_init>:
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0d ee       	ldi	r16, 0xED	; 237
  ba:	10 e0       	ldi	r17, 0x00	; 0
  bc:	6f ee       	ldi	r22, 0xEF	; 239
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	4e ee       	ldi	r20, 0xEE	; 238
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	27 ef       	ldi	r18, 0xF7	; 247
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	c6 ef       	ldi	r28, 0xF6	; 246
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	a5 ef       	ldi	r26, 0xF5	; 245
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0f 2e       	mov	r0, r31
  d2:	f4 ef       	ldi	r31, 0xF4	; 244
  d4:	ef 2e       	mov	r14, r31
  d6:	f1 2c       	mov	r15, r1
  d8:	f0 2d       	mov	r31, r0
  da:	98 2f       	mov	r25, r24
  dc:	92 95       	swap	r25
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	f8 01       	movw	r30, r16
  e2:	90 83       	st	Z, r25
  e4:	fb 01       	movw	r30, r22
  e6:	10 82       	st	Z, r1
  e8:	fa 01       	movw	r30, r20
  ea:	10 82       	st	Z, r1
  ec:	f9 01       	movw	r30, r18
  ee:	10 82       	st	Z, r1
  f0:	18 82       	st	Y, r1
  f2:	1c 92       	st	X, r1
  f4:	f7 01       	movw	r30, r14
  f6:	10 82       	st	Z, r1
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	86 30       	cpi	r24, 0x06	; 6
  fc:	71 f7       	brne	.-36     	; 0xda <CAN_init+0x36>
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 10a:	83 e1       	ldi	r24, 0x13	; 19
 10c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 116:	80 ea       	ldi	r24, 0xA0	; 160
 118:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	20 e7       	ldi	r18, 0x70	; 112
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	f1 50       	subi	r31, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <CAN_init+0x84>
 130:	00 c0       	rjmp	.+0      	; 0x132 <CAN_init+0x8e>
 132:	00 00       	nop
 134:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 138:	82 fb       	bst	r24, 2
 13a:	88 27       	eor	r24, r24
 13c:	80 f9       	bld	r24, 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	89 27       	eor	r24, r25
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <CAN_RXInit>:
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	82 95       	swap	r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 164:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 168:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 16c:	82 2f       	mov	r24, r18
 16e:	82 95       	swap	r24
 170:	88 0f       	add	r24, r24
 172:	80 7e       	andi	r24, 0xE0	; 224
 174:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 178:	da 01       	movw	r26, r20
 17a:	c9 01       	movw	r24, r18
 17c:	68 94       	set
 17e:	12 f8       	bld	r1, 2
 180:	b6 95       	lsr	r27
 182:	a7 95       	ror	r26
 184:	97 95       	ror	r25
 186:	87 95       	ror	r24
 188:	16 94       	lsr	r1
 18a:	d1 f7       	brne	.-12     	; 0x180 <CAN_RXInit+0x30>
 18c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 190:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 194:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 198:	8e 2d       	mov	r24, r14
 19a:	82 95       	swap	r24
 19c:	88 0f       	add	r24, r24
 19e:	80 7e       	andi	r24, 0xE0	; 224
 1a0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1a4:	d8 01       	movw	r26, r16
 1a6:	c7 01       	movw	r24, r14
 1a8:	68 94       	set
 1aa:	12 f8       	bld	r1, 2
 1ac:	b6 95       	lsr	r27
 1ae:	a7 95       	ror	r26
 1b0:	97 95       	ror	r25
 1b2:	87 95       	ror	r24
 1b4:	16 94       	lsr	r1
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <CAN_RXInit+0x5c>
 1b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1bc:	80 e1       	ldi	r24, 0x10	; 16
 1be:	c8 9e       	mul	r12, r24
 1c0:	60 01       	movw	r12, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	60 68       	ori	r22, 0x80	; 128
 1c6:	c6 2a       	or	r12, r22
 1c8:	c0 92 ef 00 	sts	0x00EF, r12	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	08 95       	ret

000001da <CAN_TXMOB>:
 1da:	ef 92       	push	r14
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	82 95       	swap	r24
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1e8:	ee ee       	ldi	r30, 0xEE	; 238
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 7b       	andi	r24, 0xBF	; 191
 1f0:	80 83       	st	Z, r24
 1f2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1f6:	80 2f       	mov	r24, r16
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	88 0f       	add	r24, r24
 1fe:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 202:	d9 01       	movw	r26, r18
 204:	c8 01       	movw	r24, r16
 206:	68 94       	set
 208:	14 f8       	bld	r1, 4
 20a:	b6 95       	lsr	r27
 20c:	a7 95       	ror	r26
 20e:	97 95       	ror	r25
 210:	87 95       	ror	r24
 212:	16 94       	lsr	r1
 214:	d1 f7       	brne	.-12     	; 0x20a <CAN_TXMOB+0x30>
 216:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 21a:	d9 01       	movw	r26, r18
 21c:	c8 01       	movw	r24, r16
 21e:	07 2e       	mov	r0, r23
 220:	7d e0       	ldi	r23, 0x0D	; 13
 222:	b6 95       	lsr	r27
 224:	a7 95       	ror	r26
 226:	97 95       	ror	r25
 228:	87 95       	ror	r24
 22a:	7a 95       	dec	r23
 22c:	d1 f7       	brne	.-12     	; 0x222 <CAN_TXMOB+0x48>
 22e:	70 2d       	mov	r23, r0
 230:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 234:	0f 2e       	mov	r0, r31
 236:	f5 e1       	ldi	r31, 0x15	; 21
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	17 95       	ror	r17
 23e:	07 95       	ror	r16
 240:	fa 95       	dec	r31
 242:	d1 f7       	brne	.-12     	; 0x238 <CAN_TXMOB+0x5e>
 244:	f0 2d       	mov	r31, r0
 246:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 24a:	66 23       	and	r22, r22
 24c:	71 f0       	breq	.+28     	; 0x26a <CAN_TXMOB+0x90>
 24e:	fa 01       	movw	r30, r20
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	86 0f       	add	r24, r22
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	48 0f       	add	r20, r24
 25a:	59 1f       	adc	r21, r25
 25c:	aa ef       	ldi	r26, 0xFA	; 250
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	81 91       	ld	r24, Z+
 262:	8c 93       	st	X, r24
 264:	e4 17       	cp	r30, r20
 266:	f5 07       	cpc	r31, r21
 268:	d9 f7       	brne	.-10     	; 0x260 <CAN_TXMOB+0x86>
 26a:	60 65       	ori	r22, 0x50	; 80
 26c:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 270:	ee 20       	and	r14, r14
 272:	a1 f0       	breq	.+40     	; 0x29c <CAN_TXMOB+0xc2>
 274:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 278:	86 fd       	sbrc	r24, 6
 27a:	10 c0       	rjmp	.+32     	; 0x29c <CAN_TXMOB+0xc2>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	ee ee       	ldi	r30, 0xEE	; 238
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	03 c0       	rjmp	.+6      	; 0x28a <CAN_TXMOB+0xb0>
 284:	90 81       	ld	r25, Z
 286:	96 fd       	sbrc	r25, 6
 288:	09 c0       	rjmp	.+18     	; 0x29c <CAN_TXMOB+0xc2>
 28a:	af e9       	ldi	r26, 0x9F	; 159
 28c:	bf e0       	ldi	r27, 0x0F	; 15
 28e:	11 97       	sbiw	r26, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <CAN_TXMOB+0xb4>
 292:	00 c0       	rjmp	.+0      	; 0x294 <CAN_TXMOB+0xba>
 294:	00 00       	nop
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	e8 12       	cpse	r14, r24
 29a:	f4 cf       	rjmp	.-24     	; 0x284 <CAN_TXMOB+0xaa>
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <CAN_findFreeTXMOB>:
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 2ac:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 2b0:	86 fd       	sbrc	r24, 6
 2b2:	16 c0       	rjmp	.+44     	; 0x2e0 <CAN_findFreeTXMOB+0x3c>
 2b4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2b8:	86 ff       	sbrs	r24, 6
 2ba:	14 c0       	rjmp	.+40     	; 0x2e4 <CAN_findFreeTXMOB+0x40>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	ad ee       	ldi	r26, 0xED	; 237
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	ee ee       	ldi	r30, 0xEE	; 238
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	cf ee       	ldi	r28, 0xEF	; 239
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	98 2f       	mov	r25, r24
 2cc:	92 95       	swap	r25
 2ce:	90 7f       	andi	r25, 0xF0	; 240
 2d0:	9c 93       	st	X, r25
 2d2:	90 81       	ld	r25, Z
 2d4:	96 fd       	sbrc	r25, 6
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <CAN_findFreeTXMOB+0x4c>
 2d8:	98 81       	ld	r25, Y
 2da:	96 fd       	sbrc	r25, 6
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <CAN_findFreeTXMOB+0x44>
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <CAN_findFreeTXMOB+0x4c>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <CAN_findFreeTXMOB+0x4c>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <CAN_findFreeTXMOB+0x4c>
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	71 f7       	brne	.-36     	; 0x2ca <CAN_findFreeTXMOB+0x26>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <__vector_18>:
	currentPowerB = ADC_read_power_B();
	currentPhaseU = currentPowerB - (currentPhaseW + currentPhaseV);
} */

ISR(CAN_INT_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	cf 92       	push	r12
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	//uint8_t authority;
	//uint8_t mob;
	if((CANSIT2 & (1 << 5)))	//we received a CAN message on the reverse switch mob
 322:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
 326:	85 ff       	sbrs	r24, 5
 328:	1d c0       	rjmp	.+58     	; 0x364 <__vector_18+0x6e>
	{
		
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
 32a:	80 e5       	ldi	r24, 0x50	; 80
 32c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		testChar = CANMSG;
 330:	ea ef       	ldi	r30, 0xFA	; 250
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <testChar>
		uint8_t tempChar1 = CANMSG;
 33a:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 33c:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 33e:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 340:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 342:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 344:	80 81       	ld	r24, Z
		tempChar1 = CANMSG;
 346:	80 81       	ld	r24, Z

		// canFlag = 1;

		CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 348:	cc 24       	eor	r12, r12
 34a:	c3 94       	inc	r12
 34c:	e1 2c       	mov	r14, r1
 34e:	f1 2c       	mov	r15, r1
 350:	00 e0       	ldi	r16, 0x00	; 0
 352:	14 e0       	ldi	r17, 0x04	; 4
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	54 e0       	ldi	r21, 0x04	; 4
 35c:	68 e0       	ldi	r22, 0x08	; 8
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	}
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	cf 90       	pop	r12
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_7>:
		}
	}
}

ISR(INT0_vect)	//if INT0 is going high + - Z   else if INT0 going low - + Z
{	
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
	PORTB ^= 8;
 39e:	95 b1       	in	r25, 0x05	; 5
 3a0:	88 e0       	ldi	r24, 0x08	; 8
 3a2:	89 27       	eor	r24, r25
 3a4:	85 b9       	out	0x05, r24	; 5
	rotationCounter = 0;
 3a6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter+0x1>
 3aa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 3ae:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 3b2:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 3b4:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 3b6:	28 98       	cbi	0x05, 0	; 5
		
	if ((PIND & 64) == 64) { // GOING HIGH
 3b8:	4e 9b       	sbis	0x09, 6	; 9
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <__vector_7+0x36>
				// PHASE_U_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor
			#ifdef CLOCKWISE // Running Clockwise				> STEP 4
				PHASE_U_LOW_ON;
 3bc:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_W_HIGH_ON;
 3be:	80 e3       	ldi	r24, 0x30	; 48
 3c0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__vector_7+0x3e>
				// PHASE_W_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor
			#ifdef CLOCKWISE // Running Clockwise				> STEP 1
				PHASE_W_LOW_ON;
 3c6:	28 9a       	sbi	0x05, 0	; 5
				PHASE_U_HIGH_ON;
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_U_HIGH_ON;
				PHASE_V_LOW_ON;
			#endif
		#endif
	}
}
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_8>:

ISR(INT1_vect) //if INT1 is going high - Z +   else if INT1  going low + Z -
{
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	0f 92       	push	r0
 3e4:	11 24       	eor	r1, r1
 3e6:	8f 93       	push	r24
	rotationCounter = 0;
 3e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter+0x1>
 3ec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 3f0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 3f4:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 3f6:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 3f8:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 4) == 4) {
 3fa:	1a 9b       	sbis	0x03, 2	; 3
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				// PHASE_V_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor
			#ifdef CLOCKWISE // Running Clockwise				> STEP 6
				PHASE_V_LOW_ON;
 3fe:	40 9a       	sbi	0x08, 0	; 8
				PHASE_U_HIGH_ON;
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 406:	04 c0       	rjmp	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				// PHASE_V_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor
			#ifdef CLOCKWISE // Running Clockwise				> STEP 3
				PHASE_U_LOW_ON;
 408:	58 9a       	sbi	0x0b, 0	; 11
				PHASE_V_HIGH_ON;
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_V_HIGH_ON;
				PHASE_W_LOW_ON;
			#endif
		#endif
	}
}
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_9>:

ISR(INT2_vect) //if INT2 is going high Z + -   else if INT2 going low  Z - +
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
	rotationCounter = 0;
 428:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter+0x1>
 42c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rotationCounter>
	PHASES_ALL_HIGH_OFF;
 430:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 434:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 436:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 438:	28 98       	cbi	0x05, 0	; 5
		
	if ((PINB & 32) == 32) {
 43a:	1d 9b       	sbis	0x03, 5	; 3
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__vector_9+0x2c>
				// PHASE_W_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor				> STEP 2
			#ifdef CLOCKWISE // Running Clockwise
				PHASE_W_LOW_ON;
 43e:	28 9a       	sbi	0x05, 0	; 5
				PHASE_V_HIGH_ON;
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 446:	04 c0       	rjmp	.+8      	; 0x450 <__vector_9+0x34>
				// PHASE_U_HIGH_ON;
			#endif
		#endif
		#ifdef PLETTENMOTOR // The Pletenburg Motor
			#ifdef CLOCKWISE // Running Clockwise				> STEP 5
				PHASE_V_LOW_ON;
 448:	40 9a       	sbi	0x08, 0	; 8
				PHASE_W_HIGH_ON;
 44a:	80 e3       	ldi	r24, 0x30	; 48
 44c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				PHASE_U_LOW_ON;
				PHASE_W_HIGH_ON;
			#endif
		#endif
	}
}
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <getMotorPosition>:
}
// gets an encoded version of motor position based on hall states
// adds 4 if HALL3 is high, 2 if HALL2 is HIGH and 1 if HALL 1 is high giving positions 1..6 in total
uint8_t getMotorPosition(void)
{
	return (((PINB & 32) / 8) + ((PINB & 4) / 2) + ((PIND & 64) / 64));
 45c:	23 b1       	in	r18, 0x03	; 3
 45e:	93 b1       	in	r25, 0x03	; 3
 460:	89 b1       	in	r24, 0x09	; 9
 462:	20 72       	andi	r18, 0x20	; 32
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	a9 01       	movw	r20, r18
 468:	55 95       	asr	r21
 46a:	47 95       	ror	r20
 46c:	55 95       	asr	r21
 46e:	47 95       	ror	r20
 470:	55 95       	asr	r21
 472:	47 95       	ror	r20
 474:	94 70       	andi	r25, 0x04	; 4
 476:	29 2f       	mov	r18, r25
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	35 95       	asr	r19
 47c:	27 95       	ror	r18
 47e:	24 0f       	add	r18, r20
 480:	86 fb       	bst	r24, 6
 482:	88 27       	eor	r24, r24
 484:	80 f9       	bld	r24, 0
 486:	82 0f       	add	r24, r18
 488:	08 95       	ret

0000048a <kickMotor>:
	}
}

void kickMotor(void)
{
	switch (getMotorPosition())
 48a:	0e 94 2e 02 	call	0x45c	; 0x45c <getMotorPosition>
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	b1 f0       	breq	.+44     	; 0x4be <kickMotor+0x34>
 492:	28 f4       	brcc	.+10     	; 0x49e <kickMotor+0x14>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	49 f0       	breq	.+18     	; 0x4aa <kickMotor+0x20>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	61 f0       	breq	.+24     	; 0x4b4 <kickMotor+0x2a>
 49c:	08 95       	ret
 49e:	85 30       	cpi	r24, 0x05	; 5
 4a0:	c1 f0       	breq	.+48     	; 0x4d2 <kickMotor+0x48>
 4a2:	90 f0       	brcs	.+36     	; 0x4c8 <kickMotor+0x3e>
 4a4:	86 30       	cpi	r24, 0x06	; 6
 4a6:	d1 f0       	breq	.+52     	; 0x4dc <kickMotor+0x52>
 4a8:	08 95       	ret
					// PHASE_V_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 3
					PHASE_U_LOW_ON;
 4aa:	58 9a       	sbi	0x0b, 0	; 11
					PHASE_V_HIGH_ON;
 4ac:	8c e0       	ldi	r24, 0x0C	; 12
 4ae:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 3
					PHASE_V_HIGH_ON;
					PHASE_W_LOW_ON;
				#endif
			#endif
			break;
 4b2:	08 95       	ret
					// PHASE_U_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 5
					PHASE_V_LOW_ON;
 4b4:	40 9a       	sbi	0x08, 0	; 8
					PHASE_W_HIGH_ON;
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 1
					PHASE_U_LOW_ON;
					PHASE_W_HIGH_ON;
				#endif
			#endif
			break;
 4bc:	08 95       	ret
					// PHASE_U_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 4
					PHASE_U_LOW_ON;
 4be:	58 9a       	sbi	0x0b, 0	; 11
					PHASE_W_HIGH_ON;
 4c0:	80 e3       	ldi	r24, 0x30	; 48
 4c2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 2
					PHASE_U_LOW_ON;
					PHASE_V_HIGH_ON;
				#endif
			#endif
			break;
 4c6:	08 95       	ret
					// PHASE_W_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 1
					PHASE_W_LOW_ON;
 4c8:	28 9a       	sbi	0x05, 0	; 5
					PHASE_U_HIGH_ON;
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 5
					PHASE_U_HIGH_ON;
					PHASE_V_LOW_ON;
				#endif
			#endif
			break;
 4d0:	08 95       	ret
					// PHASE_W_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 2
					PHASE_W_LOW_ON;
 4d2:	28 9a       	sbi	0x05, 0	; 5
					PHASE_V_HIGH_ON;
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
				#ifdef ANTICLOCKWISE // Running Anti-Clockwise		> STEP 4
					PHASE_U_HIGH_ON;
					PHASE_W_LOW_ON;
				#endif
			#endif
			break;
 4da:	08 95       	ret
					// PHASE_V_HIGH_ON;
				#endif
			#endif
			#ifdef PLETTENMOTOR // The Pletenburg Motor
				#ifdef CLOCKWISE // Running Clockwise				> STEP 6
					PHASE_V_LOW_ON;
 4dc:	40 9a       	sbi	0x08, 0	; 8
					PHASE_U_HIGH_ON;
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
 4e4:	08 95       	ret

000004e6 <main>:
	}
}

int main(void)
{
	DDRB |= 0b11001011;				// make the status LED an output
 4e6:	84 b1       	in	r24, 0x04	; 4
 4e8:	8b 6c       	ori	r24, 0xCB	; 203
 4ea:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b10000101;
 4ec:	87 b1       	in	r24, 0x07	; 7
 4ee:	85 68       	ori	r24, 0x85	; 133
 4f0:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0b10000001;				// PD7 is CAN STB
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	81 68       	ori	r24, 0x81	; 129
 4f6:	8a b9       	out	0x0a, r24	; 10
	
	PORTB &= ~0b11001011;
 4f8:	85 b1       	in	r24, 0x05	; 5
 4fa:	84 73       	andi	r24, 0x34	; 52
 4fc:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~0b00000001;		// Byte 7 = ADC_CS pin
 4fe:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~0b00000001;
 500:	58 98       	cbi	0x0b, 0	; 11
	
	PORTB |= 0b00100100;	//turn hall pullups on
 502:	85 b1       	in	r24, 0x05	; 5
 504:	84 62       	ori	r24, 0x24	; 36
 506:	85 b9       	out	0x05, r24	; 5
	PORTD |= 0b01000000;
 508:	5e 9a       	sbi	0x0b, 6	; 11
	
	//PLL
	PLLCSR = 0x02;			//start PLL at 32MHz
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	89 bd       	out	0x29, r24	; 41
	
	//INTERRUPTS
	EICRA = 0b00010101;		//turn INT0, INT1 and INT2 either edge sensing on
 50e:	85 e1       	ldi	r24, 0x15	; 21
 510:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0b00000111;		//enable INTs 2, 1, 0
 514:	87 e0       	ldi	r24, 0x07	; 7
 516:	8d bb       	out	0x1d, r24	; 29
	
	//PSC
	POCR_RB = 256;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 520:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	POCR0SA = POCR1SA = POCR2SA = 220;
 524:	8c ed       	ldi	r24, 0xDC	; 220
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7e00ad>
 52c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7e00ac>
 530:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 534:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>
 538:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7e00a1>
 53c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7e00a0>
	POCR0SB = POCR1SB = POCR2SB = 210;
 540:	82 ed       	ldi	r24, 0xD2	; 210
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 548:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 54c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7e00ab>
 550:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7e00aa>
 554:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7e00a5>
 558:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7e00a4>
	PCNF = 0b00011100;						//centre-aligned mode
 55c:	8c e1       	ldi	r24, 0x1C	; 28
 55e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7e00b5>
	PCTL = 0b00100001;						//select PLL clock with no prescale, turn the PSC on
 562:	81 e2       	ldi	r24, 0x21	; 33
 564:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7e00b7>
	// ADC_init();
	// Init SPI
	// spi_init();

	// start the CAN interface
	CAN_init();		// Initialise CAN
 568:	0e 94 52 00 	call	0xa4	; 0xa4 <CAN_init>
	CAN_RXInit(5,8,0x4000000, 0x4000000, 1);
 56c:	cc 24       	eor	r12, r12
 56e:	c3 94       	inc	r12
 570:	e1 2c       	mov	r14, r1
 572:	f1 2c       	mov	r15, r1
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	14 e0       	ldi	r17, 0x04	; 4
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	54 e0       	ldi	r21, 0x04	; 4
 580:	68 e0       	ldi	r22, 0x08	; 8
 582:	85 e0       	ldi	r24, 0x05	; 5
 584:	0e 94 a8 00 	call	0x150	; 0x150 <CAN_RXInit>
	
	// start the interrupts
	sei();	
 588:	78 94       	sei
	
	//turn the outputs off
	PHASES_ALL_HIGH_OFF;
 58a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7e00b6>
	PHASE_U_LOW_OFF;
 58e:	58 98       	cbi	0x0b, 0	; 11
	PHASE_V_LOW_OFF;
 590:	40 98       	cbi	0x08, 0	; 8
	PHASE_W_LOW_OFF;
 592:	28 98       	cbi	0x05, 0	; 5
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
		}
		
		else
		{
			POC = 0b00000000;
 594:	c6 eb       	ldi	r28, 0xB6	; 182
 596:	d0 e0       	ldi	r29, 0x00	; 0
	{
		motorCommand = 250 - testChar;
		if(motorCommand < 190) motorCommand = 190;
		if(motorState == 1)
		{
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 598:	0f 2e       	mov	r0, r31
 59a:	fc ea       	ldi	r31, 0xAC	; 172
 59c:	6f 2e       	mov	r6, r31
 59e:	71 2c       	mov	r7, r1
 5a0:	f0 2d       	mov	r31, r0
 5a2:	0f 2e       	mov	r0, r31
 5a4:	f6 ea       	ldi	r31, 0xA6	; 166
 5a6:	8f 2e       	mov	r8, r31
 5a8:	91 2c       	mov	r9, r1
 5aa:	f0 2d       	mov	r31, r0
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f0 ea       	ldi	r31, 0xA0	; 160
 5b0:	af 2e       	mov	r10, r31
 5b2:	b1 2c       	mov	r11, r1
 5b4:	f0 2d       	mov	r31, r0
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f0 eb       	ldi	r31, 0xB0	; 176
 5ba:	4f 2e       	mov	r4, r31
 5bc:	51 2c       	mov	r5, r1
 5be:	f0 2d       	mov	r31, r0
			rotationCounter = 0;		
		}

		if(canFlag == 1) {
			canFlag = 0;
			canArray[0] = motorState;
 5c0:	0f 2e       	mov	r0, r31
 5c2:	f1 e0       	ldi	r31, 0x01	; 1
 5c4:	cf 2e       	mov	r12, r31
 5c6:	f1 e0       	ldi	r31, 0x01	; 1
 5c8:	df 2e       	mov	r13, r31
 5ca:	f0 2d       	mov	r31, r0
	PHASE_V_LOW_OFF;
	PHASE_W_LOW_OFF;
	
	while(1)
	{
		motorCommand = 250 - testChar;
 5cc:	0f 2e       	mov	r0, r31
 5ce:	fa ef       	ldi	r31, 0xFA	; 250
 5d0:	ff 2e       	mov	r15, r31
 5d2:	f0 2d       	mov	r31, r0
		if(motorCommand < 190) motorCommand = 190;
 5d4:	0f 2e       	mov	r0, r31
 5d6:	fe eb       	ldi	r31, 0xBE	; 190
 5d8:	3f 2e       	mov	r3, r31
 5da:	f0 2d       	mov	r31, r0
		if(motorState == 1)
		{
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 5dc:	04 ea       	ldi	r16, 0xA4	; 164
 5de:	10 e0       	ldi	r17, 0x00	; 0
			motorState = 0;
			PORTB &= ~8;
		}
		else 
		{
			motorState = 1;
 5e0:	ee 24       	eor	r14, r14
 5e2:	e3 94       	inc	r14
	PHASE_V_LOW_OFF;
	PHASE_W_LOW_OFF;
	
	while(1)
	{
		motorCommand = 250 - testChar;
 5e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <testChar>
 5e8:	2f 2d       	mov	r18, r15
 5ea:	28 1b       	sub	r18, r24
 5ec:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <motorCommand>
		if(motorCommand < 190) motorCommand = 190;
 5f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motorCommand>
 5f4:	8e 3b       	cpi	r24, 0xBE	; 190
 5f6:	10 f4       	brcc	.+4      	; 0x5fc <main+0x116>
 5f8:	30 92 0a 01 	sts	0x010A, r3	; 0x80010a <motorCommand>
		if(motorState == 1)
 5fc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motorState>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	d9 f4       	brne	.+54     	; 0x63a <main+0x154>
		{
			POCR0SA = POCR1SA = POCR2SA = motorCommand;
 604:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motorCommand>
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	f3 01       	movw	r30, r6
 60c:	91 83       	std	Z+1, r25	; 0x01
 60e:	80 83       	st	Z, r24
 610:	f4 01       	movw	r30, r8
 612:	91 83       	std	Z+1, r25	; 0x01
 614:	80 83       	st	Z, r24
 616:	f5 01       	movw	r30, r10
 618:	91 83       	std	Z+1, r25	; 0x01
 61a:	80 83       	st	Z, r24
			POCR0SB = POCR1SB = POCR2SB = motorCommand - 10;
 61c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motorCommand>
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0a 97       	sbiw	r24, 0x0a	; 10
 624:	f2 01       	movw	r30, r4
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	80 83       	st	Z, r24
 62a:	ea ea       	ldi	r30, 0xAA	; 170
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	91 83       	std	Z+1, r25	; 0x01
 630:	80 83       	st	Z, r24
 632:	f8 01       	movw	r30, r16
 634:	91 83       	std	Z+1, r25	; 0x01
 636:	80 83       	st	Z, r24
 638:	04 c0       	rjmp	.+8      	; 0x642 <main+0x15c>
		}
		
		else
		{
			POC = 0b00000000;
 63a:	18 82       	st	Y, r1
			PHASE_U_LOW_ON;
 63c:	58 9a       	sbi	0x0b, 0	; 11
			PHASE_V_LOW_OFF;
 63e:	40 98       	cbi	0x08, 0	; 8
			PHASE_W_LOW_OFF;
 640:	28 98       	cbi	0x05, 0	; 5
		}
		if(rotationCounter < 1000) rotationCounter ++;
 642:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rotationCounter>
 646:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotationCounter+0x1>
 64a:	88 3e       	cpi	r24, 0xE8	; 232
 64c:	93 40       	sbci	r25, 0x03	; 3
 64e:	48 f4       	brcc	.+18     	; 0x662 <main+0x17c>
 650:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rotationCounter>
 654:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotationCounter+0x1>
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <rotationCounter+0x1>
 65e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rotationCounter>
		if(rotationCounter > 999)
 662:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rotationCounter>
 666:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotationCounter+0x1>
 66a:	88 3e       	cpi	r24, 0xE8	; 232
 66c:	93 40       	sbci	r25, 0x03	; 3
 66e:	20 f0       	brcs	.+8      	; 0x678 <main+0x192>
		{
			motorState = 0;
 670:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motorState>
			PORTB &= ~8;
 674:	2b 98       	cbi	0x05, 3	; 5
 676:	03 c0       	rjmp	.+6      	; 0x67e <main+0x198>
		}
		else 
		{
			motorState = 1;
 678:	e0 92 09 01 	sts	0x0109, r14	; 0x800109 <motorState>
			PORTB |= 8;
 67c:	2b 9a       	sbi	0x05, 3	; 5
		}
		// motorState = 1; // Part of debugging ignore
		
		if((motorState == 0) && (motorCommand < 225))
 67e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motorState>
 682:	81 11       	cpse	r24, r1
 684:	0c c0       	rjmp	.+24     	; 0x69e <main+0x1b8>
 686:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motorCommand>
 68a:	81 3e       	cpi	r24, 0xE1	; 225
 68c:	40 f4       	brcc	.+16     	; 0x69e <main+0x1b8>
		{
			kickMotor();
 68e:	0e 94 45 02 	call	0x48a	; 0x48a <kickMotor>
			motorState = 1;	
 692:	e0 92 09 01 	sts	0x0109, r14	; 0x800109 <motorState>
			rotationCounter = 0;		
 696:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <rotationCounter+0x1>
 69a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rotationCounter>
		}

		if(canFlag == 1) {
 69e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <main+0x1c2>
 6a6:	9e cf       	rjmp	.-196    	; 0x5e4 <main+0xfe>
			canFlag = 0;
 6a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			canArray[0] = motorState;
 6ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motorState>
 6b0:	f6 01       	movw	r30, r12
 6b2:	80 83       	st	Z, r24
			canArray[1] = motorCommand;
 6b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motorCommand>
 6b8:	81 83       	std	Z+1, r24	; 0x01
			canArray[2] = rotationCounter >> 8;
 6ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rotationCounter>
 6be:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotationCounter+0x1>
 6c2:	92 83       	std	Z+2, r25	; 0x02
			canArray[3] = rotationCounter;
 6c4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rotationCounter>
 6c8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotationCounter+0x1>
 6cc:	83 83       	std	Z+3, r24	; 0x03
			// canArray[4] = ADC_read_phase_W();
			// canArray[5] = ADC_read_phase_V();
			// canArray[6] = ADC_read_power_B();
			// canArray[7] = ADC_read_temp();
			CAN_TXMOB(CAN_findFreeTXMOB(), 8, canArray, 0x5000000, 0x0100);
 6ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <CAN_findFreeTXMOB>
 6d2:	e1 2c       	mov	r14, r1
 6d4:	00 e0       	ldi	r16, 0x00	; 0
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	35 e0       	ldi	r19, 0x05	; 5
 6dc:	a6 01       	movw	r20, r12
 6de:	68 e0       	ldi	r22, 0x08	; 8
 6e0:	0e 94 ed 00 	call	0x1da	; 0x1da <CAN_TXMOB>
 6e4:	73 cf       	rjmp	.-282    	; 0x5cc <main+0xe6>

000006e6 <_exit>:
 6e6:	f8 94       	cli

000006e8 <__stop_program>:
 6e8:	ff cf       	rjmp	.-2      	; 0x6e8 <__stop_program>
