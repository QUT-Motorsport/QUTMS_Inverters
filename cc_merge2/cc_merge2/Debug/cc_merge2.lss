
cc_merge2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006fa  00800200  00001e8c  00001f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012f  008008fa  008008fa  0000261a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004be8  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ad  00000000  00000000  00007668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002267  00000000  00000000  00008f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be0  00000000  00000000  0000b17c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012e0  00000000  00000000  0000bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046bd  00000000  00000000  0000d03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  000116f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c0       	rjmp	.+492    	; 0x1ee <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_1>
       8:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_2>
       c:	0e c1       	rjmp	.+540    	; 0x22a <__bad_interrupt>
       e:	00 00       	nop
      10:	0c c1       	rjmp	.+536    	; 0x22a <__bad_interrupt>
      12:	00 00       	nop
      14:	0a c1       	rjmp	.+532    	; 0x22a <__bad_interrupt>
      16:	00 00       	nop
      18:	08 c1       	rjmp	.+528    	; 0x22a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	06 c1       	rjmp	.+524    	; 0x22a <__bad_interrupt>
      1e:	00 00       	nop
      20:	04 c1       	rjmp	.+520    	; 0x22a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_9>
      28:	00 c1       	rjmp	.+512    	; 0x22a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fe c0       	rjmp	.+508    	; 0x22a <__bad_interrupt>
      2e:	00 00       	nop
      30:	fc c0       	rjmp	.+504    	; 0x22a <__bad_interrupt>
      32:	00 00       	nop
      34:	fa c0       	rjmp	.+500    	; 0x22a <__bad_interrupt>
      36:	00 00       	nop
      38:	f8 c0       	rjmp	.+496    	; 0x22a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f6 c0       	rjmp	.+492    	; 0x22a <__bad_interrupt>
      3e:	00 00       	nop
      40:	f4 c0       	rjmp	.+488    	; 0x22a <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_17>
      48:	f0 c0       	rjmp	.+480    	; 0x22a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ee c0       	rjmp	.+476    	; 0x22a <__bad_interrupt>
      4e:	00 00       	nop
      50:	ec c0       	rjmp	.+472    	; 0x22a <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__vector_21>
      58:	e8 c0       	rjmp	.+464    	; 0x22a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e6 c0       	rjmp	.+460    	; 0x22a <__bad_interrupt>
      5e:	00 00       	nop
      60:	e4 c0       	rjmp	.+456    	; 0x22a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_25>
      68:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_26>
      6c:	de c0       	rjmp	.+444    	; 0x22a <__bad_interrupt>
      6e:	00 00       	nop
      70:	dc c0       	rjmp	.+440    	; 0x22a <__bad_interrupt>
      72:	00 00       	nop
      74:	da c0       	rjmp	.+436    	; 0x22a <__bad_interrupt>
      76:	00 00       	nop
      78:	d8 c0       	rjmp	.+432    	; 0x22a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d6 c0       	rjmp	.+428    	; 0x22a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d4 c0       	rjmp	.+424    	; 0x22a <__bad_interrupt>
      82:	00 00       	nop
      84:	d2 c0       	rjmp	.+420    	; 0x22a <__bad_interrupt>
      86:	00 00       	nop
      88:	d0 c0       	rjmp	.+416    	; 0x22a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ce c0       	rjmp	.+412    	; 0x22a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_36>
      94:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_37>
      98:	c8 c0       	rjmp	.+400    	; 0x22a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c6 c0       	rjmp	.+396    	; 0x22a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c4 c0       	rjmp	.+392    	; 0x22a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c2 c0       	rjmp	.+388    	; 0x22a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c0 c0       	rjmp	.+384    	; 0x22a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	be c0       	rjmp	.+380    	; 0x22a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bc c0       	rjmp	.+376    	; 0x22a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ba c0       	rjmp	.+372    	; 0x22a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b8 c0       	rjmp	.+368    	; 0x22a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b6 c0       	rjmp	.+364    	; 0x22a <__bad_interrupt>
      be:	00 00       	nop
      c0:	b4 c0       	rjmp	.+360    	; 0x22a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b2 c0       	rjmp	.+356    	; 0x22a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b0 c0       	rjmp	.+352    	; 0x22a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ae c0       	rjmp	.+348    	; 0x22a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ac c0       	rjmp	.+344    	; 0x22a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	aa c0       	rjmp	.+340    	; 0x22a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a8 c0       	rjmp	.+336    	; 0x22a <__bad_interrupt>
      da:	00 00       	nop
      dc:	a6 c0       	rjmp	.+332    	; 0x22a <__bad_interrupt>
      de:	00 00       	nop
      e0:	a4 c0       	rjmp	.+328    	; 0x22a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	13 02       	muls	r17, r19
      e6:	74 04       	cpc	r7, r4
      e8:	d0 02       	muls	r29, r16
      ea:	eb 02       	muls	r30, r27
      ec:	06 03       	mulsu	r16, r22
      ee:	21 03       	mulsu	r18, r17
      f0:	3c 03       	fmul	r19, r20
      f2:	57 03       	mulsu	r21, r23
      f4:	72 03       	mulsu	r23, r18
      f6:	8d 03       	fmulsu	r16, r21
      f8:	a8 03       	fmulsu	r18, r16
      fa:	c3 03       	fmuls	r20, r19
      fc:	de 03       	fmulsu	r21, r22
      fe:	f0 03       	fmuls	r23, r16
     100:	02 04       	cpc	r0, r2
     102:	14 04       	cpc	r1, r4
     104:	26 04       	cpc	r2, r6
     106:	41 04       	cpc	r4, r1
     108:	5b 04       	cpc	r5, r11
     10a:	74 04       	cpc	r7, r4
     10c:	74 04       	cpc	r7, r4
     10e:	74 04       	cpc	r7, r4
     110:	74 04       	cpc	r7, r4
     112:	74 04       	cpc	r7, r4
     114:	74 04       	cpc	r7, r4
     116:	74 04       	cpc	r7, r4
     118:	74 04       	cpc	r7, r4
     11a:	74 04       	cpc	r7, r4
     11c:	74 04       	cpc	r7, r4
     11e:	74 04       	cpc	r7, r4
     120:	74 04       	cpc	r7, r4
     122:	74 04       	cpc	r7, r4
     124:	74 04       	cpc	r7, r4
     126:	74 04       	cpc	r7, r4
     128:	74 04       	cpc	r7, r4
     12a:	74 04       	cpc	r7, r4
     12c:	74 04       	cpc	r7, r4
     12e:	74 04       	cpc	r7, r4
     130:	74 04       	cpc	r7, r4
     132:	74 04       	cpc	r7, r4
     134:	74 04       	cpc	r7, r4
     136:	74 04       	cpc	r7, r4
     138:	74 04       	cpc	r7, r4
     13a:	74 04       	cpc	r7, r4
     13c:	74 04       	cpc	r7, r4
     13e:	74 04       	cpc	r7, r4
     140:	74 04       	cpc	r7, r4
     142:	74 04       	cpc	r7, r4
     144:	74 04       	cpc	r7, r4
     146:	74 04       	cpc	r7, r4
     148:	74 04       	cpc	r7, r4
     14a:	74 04       	cpc	r7, r4
     14c:	74 04       	cpc	r7, r4
     14e:	74 04       	cpc	r7, r4
     150:	74 04       	cpc	r7, r4
     152:	74 04       	cpc	r7, r4
     154:	74 04       	cpc	r7, r4
     156:	74 04       	cpc	r7, r4
     158:	74 04       	cpc	r7, r4
     15a:	74 04       	cpc	r7, r4
     15c:	74 04       	cpc	r7, r4
     15e:	74 04       	cpc	r7, r4
     160:	74 04       	cpc	r7, r4
     162:	74 04       	cpc	r7, r4
     164:	74 04       	cpc	r7, r4
     166:	74 04       	cpc	r7, r4
     168:	74 04       	cpc	r7, r4
     16a:	74 04       	cpc	r7, r4
     16c:	74 04       	cpc	r7, r4
     16e:	74 04       	cpc	r7, r4
     170:	74 04       	cpc	r7, r4
     172:	74 04       	cpc	r7, r4
     174:	74 04       	cpc	r7, r4
     176:	74 04       	cpc	r7, r4
     178:	74 04       	cpc	r7, r4
     17a:	74 04       	cpc	r7, r4
     17c:	74 04       	cpc	r7, r4
     17e:	74 04       	cpc	r7, r4
     180:	74 04       	cpc	r7, r4
     182:	74 04       	cpc	r7, r4
     184:	74 04       	cpc	r7, r4
     186:	74 04       	cpc	r7, r4
     188:	74 04       	cpc	r7, r4
     18a:	74 04       	cpc	r7, r4
     18c:	74 04       	cpc	r7, r4
     18e:	74 04       	cpc	r7, r4
     190:	74 04       	cpc	r7, r4
     192:	74 04       	cpc	r7, r4
     194:	74 04       	cpc	r7, r4
     196:	74 04       	cpc	r7, r4
     198:	74 04       	cpc	r7, r4
     19a:	74 04       	cpc	r7, r4
     19c:	74 04       	cpc	r7, r4
     19e:	74 04       	cpc	r7, r4
     1a0:	74 04       	cpc	r7, r4
     1a2:	74 04       	cpc	r7, r4
     1a4:	74 04       	cpc	r7, r4
     1a6:	74 04       	cpc	r7, r4
     1a8:	74 04       	cpc	r7, r4
     1aa:	74 04       	cpc	r7, r4
     1ac:	74 04       	cpc	r7, r4
     1ae:	74 04       	cpc	r7, r4
     1b0:	74 04       	cpc	r7, r4
     1b2:	74 04       	cpc	r7, r4
     1b4:	74 04       	cpc	r7, r4
     1b6:	74 04       	cpc	r7, r4
     1b8:	74 04       	cpc	r7, r4
     1ba:	74 04       	cpc	r7, r4
     1bc:	74 04       	cpc	r7, r4
     1be:	74 04       	cpc	r7, r4
     1c0:	74 04       	cpc	r7, r4
     1c2:	2e 02       	muls	r18, r30
     1c4:	49 02       	muls	r20, r25
     1c6:	74 04       	cpc	r7, r4
     1c8:	74 04       	cpc	r7, r4
     1ca:	74 04       	cpc	r7, r4
     1cc:	74 04       	cpc	r7, r4
     1ce:	74 04       	cpc	r7, r4
     1d0:	74 04       	cpc	r7, r4
     1d2:	74 04       	cpc	r7, r4
     1d4:	74 04       	cpc	r7, r4
     1d6:	64 02       	muls	r22, r20
     1d8:	7f 02       	muls	r23, r31
     1da:	74 04       	cpc	r7, r4
     1dc:	74 04       	cpc	r7, r4
     1de:	74 04       	cpc	r7, r4
     1e0:	74 04       	cpc	r7, r4
     1e2:	74 04       	cpc	r7, r4
     1e4:	74 04       	cpc	r7, r4
     1e6:	74 04       	cpc	r7, r4
     1e8:	74 04       	cpc	r7, r4
     1ea:	9a 02       	muls	r25, r26
     1ec:	b5 02       	muls	r27, r21

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d1 e2       	ldi	r29, 0x21	; 33
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	18 e0       	ldi	r17, 0x08	; 8
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	ec e8       	ldi	r30, 0x8C	; 140
     202:	fe e1       	ldi	r31, 0x1E	; 30
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__do_copy_data+0x14>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	aa 3f       	cpi	r26, 0xFA	; 250
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__do_copy_data+0x10>

00000214 <__do_clear_bss>:
     214:	2a e0       	ldi	r18, 0x0A	; 10
     216:	aa ef       	ldi	r26, 0xFA	; 250
     218:	b8 e0       	ldi	r27, 0x08	; 8
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a9 32       	cpi	r26, 0x29	; 41
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	1b d6       	rcall	.+3126   	; 0xe5c <main>
     226:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <_exit>

0000022a <__bad_interrupt>:
     22a:	ea ce       	rjmp	.-556    	; 0x0 <__vectors>

0000022c <a2dOn>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bit()
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bit()>>2;			// return ADC MSB byte
}
     22c:	ea e7       	ldi	r30, 0x7A	; 122
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	80 83       	st	Z, r24
     236:	08 95       	ret

00000238 <a2dSetPrescaler>:
     238:	ea e7       	ldi	r30, 0x7A	; 122
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	90 81       	ld	r25, Z
     23e:	98 7f       	andi	r25, 0xF8	; 248
     240:	90 83       	st	Z, r25
     242:	90 81       	ld	r25, Z
     244:	89 2b       	or	r24, r25
     246:	80 83       	st	Z, r24
     248:	08 95       	ret

0000024a <a2dSetReference>:
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	9c 7f       	andi	r25, 0xFC	; 252
     252:	90 83       	st	Z, r25
     254:	20 81       	ld	r18, Z
     256:	30 e4       	ldi	r19, 0x40	; 64
     258:	83 9f       	mul	r24, r19
     25a:	c0 01       	movw	r24, r0
     25c:	11 24       	eor	r1, r1
     25e:	82 2b       	or	r24, r18
     260:	80 83       	st	Z, r24
     262:	08 95       	ret

00000264 <a2dInit>:
     264:	cf 93       	push	r28
     266:	c6 2f       	mov	r28, r22
     268:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9f 7d       	andi	r25, 0xDF	; 223
     274:	90 83       	st	Z, r25
     276:	e0 df       	rcall	.-64     	; 0x238 <a2dSetPrescaler>
     278:	8c 2f       	mov	r24, r28
     27a:	e7 df       	rcall	.-50     	; 0x24a <a2dSetReference>
     27c:	d7 df       	rcall	.-82     	; 0x22c <a2dOn>
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <a2d_10bitCh>:
// starts conversion, waits until conversion is done, and returns result
// modded for mega1280 by Ant
unsigned short a2d_10bitCh(unsigned char ch)
{
	// set channel
	ADMUX &= ADC_MUX_MASK;	
     282:	ec e7       	ldi	r30, 0x7C	; 124
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	90 81       	ld	r25, Z
     288:	90 7e       	andi	r25, 0xE0	; 224
     28a:	90 83       	st	Z, r25
	
	if (ch > 7) 
     28c:	88 30       	cpi	r24, 0x08	; 8
     28e:	60 f0       	brcs	.+24     	; 0x2a8 <a2d_10bitCh+0x26>
	{
		ADCSRB |= 8;
     290:	eb e7       	ldi	r30, 0x7B	; 123
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	90 81       	ld	r25, Z
     296:	98 60       	ori	r25, 0x08	; 8
     298:	90 83       	st	Z, r25
		ADMUX |= (ch - 8);
     29a:	ec e7       	ldi	r30, 0x7C	; 124
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	90 81       	ld	r25, Z
     2a0:	88 50       	subi	r24, 0x08	; 8
     2a2:	89 2b       	or	r24, r25
     2a4:	80 83       	st	Z, r24
     2a6:	0a c0       	rjmp	.+20     	; 0x2bc <a2d_10bitCh+0x3a>
	}
	else
	{
		ADCSRB &= 247;
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	90 81       	ld	r25, Z
     2ae:	97 7f       	andi	r25, 0xF7	; 247
     2b0:	90 83       	st	Z, r25
		ADMUX |= ch;
     2b2:	ec e7       	ldi	r30, 0x7C	; 124
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	90 81       	ld	r25, Z
     2b8:	89 2b       	or	r24, r25
     2ba:	80 83       	st	Z, r24
	}
	
	// ADMUX |= ch;	//comment out this line when using on 16ch parts

	// start conversion
	ADCSRA |= (1<<ADSC);
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC)) {} // wait until conversion complete 
     2c6:	80 81       	ld	r24, Z
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <a2d_10bitCh+0x44>

	return ADC;                // read ADC (full 10 bits);
     2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// return (8 << ADCH)|(ADCL); // read ADC (full 10 bits);
    // return ADCL;                // read ADC (first 8 bits)
}
     2d4:	08 95       	ret

000002d6 <a2d_8bitCh>:
// Perform a 8-bit conversion on given channel
// starts conversion, waits until conversion is done, and returns result
unsigned char a2d_8bitCh(unsigned char ch)
{
	// do 10-bit conversion and return highest 8 bits
	return a2d_10bitCh(ch)>>2;			// return ADC MSB byte
     2d6:	d5 df       	rcall	.-86     	; 0x282 <a2d_10bitCh>
     2d8:	96 95       	lsr	r25
     2da:	87 95       	ror	r24
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
}
     2e0:	08 95       	ret

000002e2 <CAN_send>:
        sendingID|                  // Sending ID, ( First 8 bits, define the device to send to)
        ((uint32_t)type<<18)|       // What sort of command to send
        ((uint32_t)address<<13)|    // Specific address
        status                      // SubID?
    );
}
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	c8 2f       	mov	r28, r24
     2fc:	d6 2f       	mov	r29, r22
     2fe:	6a 01       	movw	r12, r20
     300:	48 01       	movw	r8, r16
     302:	59 01       	movw	r10, r18
     304:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <MCP2515_findFreeTxBuffer>
     308:	85 01       	movw	r16, r10
     30a:	74 01       	movw	r14, r8
     30c:	96 01       	movw	r18, r12
     30e:	4d 2f       	mov	r20, r29
     310:	68 2f       	mov	r22, r24
     312:	8c 2f       	mov	r24, r28
     314:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <MCP2515_TX>
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
     330:	08 95       	ret

00000332 <CAN_pull_packet>:

// Serves as a wrapper for the MCP2515_PullCanPacket(..) in MCP2515.h - For more info refer to that.
void CAN_pull_packet(uint8_t CANbus, uint8_t* numBytes, uint8_t* data, uint32_t* ID) {
     332:	af 92       	push	r10
     334:	bf 92       	push	r11
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	c8 2f       	mov	r28, r24
     346:	7b 01       	movw	r14, r22
     348:	6a 01       	movw	r12, r20
     34a:	59 01       	movw	r10, r18
	// Receive the status of the buffers RXB0 and RXB1
	uint8_t status = MCP2515_check_receive_status(CANbus);
     34c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <MCP2515_check_receive_status>
	// Check which receive buffer contains the data (or if both contain) by checking bits 7:6
	switch(status>>6) {
     350:	82 95       	swap	r24
     352:	86 95       	lsr	r24
     354:	86 95       	lsr	r24
     356:	83 70       	andi	r24, 0x03	; 3
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	61 f0       	breq	.+24     	; 0x374 <CAN_pull_packet+0x42>
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	89 f0       	breq	.+34     	; 0x382 <CAN_pull_packet+0x50>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	d1 f4       	brne	.+52     	; 0x398 <CAN_pull_packet+0x66>
		case 1:	// Message in RXB0
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     364:	85 01       	movw	r16, r10
     366:	96 01       	movw	r18, r12
     368:	a7 01       	movw	r20, r14
     36a:	61 e6       	ldi	r22, 0x61	; 97
     36c:	8c 2f       	mov	r24, r28
     36e:	0e 94 bd 09 	call	0x137a	; 0x137a <MCP2515_PullCanPacket>
			break;
     372:	12 c0       	rjmp	.+36     	; 0x398 <CAN_pull_packet+0x66>
		case 2: // Message in RXB1=
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     374:	85 01       	movw	r16, r10
     376:	96 01       	movw	r18, r12
     378:	a7 01       	movw	r20, r14
     37a:	61 e7       	ldi	r22, 0x71	; 113
     37c:	8c 2f       	mov	r24, r28
     37e:	fd d7       	rcall	.+4090   	; 0x137a <MCP2515_PullCanPacket>
			break;
     380:	0b c0       	rjmp	.+22     	; 0x398 <CAN_pull_packet+0x66>
		case 3: // Message in both buffers
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB0SIDH, numBytes, data, ID);
     382:	85 01       	movw	r16, r10
     384:	96 01       	movw	r18, r12
     386:	a7 01       	movw	r20, r14
     388:	61 e6       	ldi	r22, 0x61	; 97
     38a:	8c 2f       	mov	r24, r28
     38c:	f6 d7       	rcall	.+4076   	; 0x137a <MCP2515_PullCanPacket>
			MCP2515_PullCanPacket(CANbus, MCP2515_RXB1SIDH, numBytes, data, ID);
     38e:	96 01       	movw	r18, r12
     390:	a7 01       	movw	r20, r14
     392:	61 e7       	ldi	r22, 0x71	; 113
     394:	8c 2f       	mov	r24, r28
     396:	f1 d7       	rcall	.+4066   	; 0x137a <MCP2515_PullCanPacket>
			break;
		default:
			break;
	}
}
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	bf 90       	pop	r11
     3a8:	af 90       	pop	r10
     3aa:	08 95       	ret

000003ac <send_error_message>:
 * Returns: none
 * 
 * Formats a 50-character long log message, and sends it over UART.
 * */
void send_error_message(char start[], char message[], uint16_t part_number) 
{
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	18 2f       	mov	r17, r24
     3b6:	09 2f       	mov	r16, r25
	unsigned char *messageWithNumber;
	unsigned char *errorData;
	
	// Format error message with part number if given
	snprintf(messageWithNumber, MAX_ERROR_MESSAGE_LENGTH, message, part_number);
     3b8:	5f 93       	push	r21
     3ba:	4f 93       	push	r20
     3bc:	7f 93       	push	r23
     3be:	6f 93       	push	r22
     3c0:	1f 92       	push	r1
     3c2:	88 e2       	ldi	r24, 0x28	; 40
     3c4:	8f 93       	push	r24
     3c6:	d0 e0       	ldi	r29, 0x00	; 0
     3c8:	df 93       	push	r29
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
     3cc:	cf 93       	push	r28
     3ce:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <snprintf>

	// Create error data
	snprintf(errorData, MAX_ERROR_MESSAGE_LENGTH + 10, "%s %s", start, messageWithNumber);
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	87 e2       	ldi	r24, 0x27	; 39
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	1f 92       	push	r1
     3e4:	82 e3       	ldi	r24, 0x32	; 50
     3e6:	8f 93       	push	r24
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <snprintf>
	
	// Send error data over UART
	UART_sendPacket(errorData, MAX_ERROR_MESSAGE_LENGTH + 10);
     3f0:	62 e3       	ldi	r22, 0x32	; 50
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	8d 2f       	mov	r24, r29
     3f6:	9c 2f       	mov	r25, r28
     3f8:	b5 d4       	rcall	.+2410   	; 0xd64 <UART_sendPacket>
}
     3fa:	8d b7       	in	r24, 0x3d	; 61
     3fc:	9e b7       	in	r25, 0x3e	; 62
     3fe:	42 96       	adiw	r24, 0x12	; 18
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	9e bf       	out	0x3e, r25	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	8d bf       	out	0x3d, r24	; 61
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	08 95       	ret

00000414 <throw_error_code_with_number>:
 * Generates an error message, and takes the necessary actions depending on the severity and error
 * 
 * */
void throw_error_code_with_number(uint16_t severity, uint16_t error_code, uint16_t part_number) 
{
	switch (error_code) {
     414:	65 38       	cpi	r22, 0x85	; 133
     416:	71 05       	cpc	r23, r1
     418:	08 f0       	brcs	.+2      	; 0x41c <throw_error_code_with_number+0x8>
     41a:	66 c2       	rjmp	.+1228   	; 0x8e8 <throw_error_code_with_number+0x4d4>
     41c:	fb 01       	movw	r30, r22
     41e:	ee 58       	subi	r30, 0x8E	; 142
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__tablejump2__>
		// 		break;
		//     }			
		// break;

        case ERROR_GENERAL:					
			switch (severity) {
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	91 05       	cpc	r25, r1
     42a:	61 f0       	breq	.+24     	; 0x444 <throw_error_code_with_number+0x30>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	91 05       	cpc	r25, r1
     430:	79 f0       	breq	.+30     	; 0x450 <throw_error_code_with_number+0x3c>
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	09 f0       	breq	.+2      	; 0x438 <throw_error_code_with_number+0x24>
     436:	58 c2       	rjmp	.+1200   	; 0x8e8 <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Error", part_number);
     438:	6d e2       	ldi	r22, 0x2D	; 45
     43a:	72 e0       	ldi	r23, 0x02	; 2
     43c:	83 e3       	ldi	r24, 0x33	; 51
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	b5 cf       	rjmp	.-150    	; 0x3ac <send_error_message>
				// Additional Info Handling
				break;
     442:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Error!", part_number);
     444:	68 e3       	ldi	r22, 0x38	; 56
     446:	72 e0       	ldi	r23, 0x02	; 2
     448:	8f e3       	ldi	r24, 0x3F	; 63
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	af cf       	rjmp	.-162    	; 0x3ac <send_error_message>
				// Additional Warning Handling
				break;
     44e:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "ERROR", part_number);
     450:	69 e4       	ldi	r22, 0x49	; 73
     452:	72 e0       	ldi	r23, 0x02	; 2
     454:	8f e4       	ldi	r24, 0x4F	; 79
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	a9 cf       	rjmp	.-174    	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     45a:	08 95       	ret

        // CANBUS based errors
        // --------------------------------------------------------------------

        case ERROR_CANBUS_1_NO_RESPONSE:					
			switch (severity) {
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	91 05       	cpc	r25, r1
     460:	61 f0       	breq	.+24     	; 0x47a <throw_error_code_with_number+0x66>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	91 05       	cpc	r25, r1
     466:	79 f0       	breq	.+30     	; 0x486 <throw_error_code_with_number+0x72>
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	09 f0       	breq	.+2      	; 0x46e <throw_error_code_with_number+0x5a>
     46c:	3d c2       	rjmp	.+1146   	; 0x8e8 <throw_error_code_with_number+0x4d4>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 No Response", part_number);
     46e:	69 e5       	ldi	r22, 0x59	; 89
     470:	72 e0       	ldi	r23, 0x02	; 2
     472:	83 e3       	ldi	r24, 0x33	; 51
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	9a cf       	rjmp	.-204    	; 0x3ac <send_error_message>
				// Additional Info Handling
				break;
     478:	08 95       	ret

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 No Response!", part_number);
     47a:	6e e6       	ldi	r22, 0x6E	; 110
     47c:	72 e0       	ldi	r23, 0x02	; 2
     47e:	8f e3       	ldi	r24, 0x3F	; 63
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	94 cf       	rjmp	.-216    	; 0x3ac <send_error_message>
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL NO RESPONSE", part_number);
     484:	08 95       	ret
     486:	64 e8       	ldi	r22, 0x84	; 132
     488:	72 e0       	ldi	r23, 0x02	; 2
     48a:	8f e4       	ldi	r24, 0x4F	; 79
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	8e cf       	rjmp	.-228    	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     490:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_1_RESPONSE_MALFORMED:					
			switch (severity) {
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	91 05       	cpc	r25, r1
     496:	61 f0       	breq	.+24     	; 0x4b0 <throw_error_code_with_number+0x9c>
     498:	83 30       	cpi	r24, 0x03	; 3
     49a:	91 05       	cpc	r25, r1
     49c:	79 f0       	breq	.+30     	; 0x4bc <throw_error_code_with_number+0xa8>
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <throw_error_code_with_number+0x90>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 1 Malformed Packet", part_number);
     4a2:	22 c2       	rjmp	.+1092   	; 0x8e8 <throw_error_code_with_number+0x4d4>
     4a4:	62 ea       	ldi	r22, 0xA2	; 162
     4a6:	72 e0       	ldi	r23, 0x02	; 2
     4a8:	83 e3       	ldi	r24, 0x33	; 51
     4aa:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4ac:	7f cf       	rjmp	.-258    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 1 Malformed Packet!", part_number);
     4ae:	08 95       	ret
     4b0:	6c eb       	ldi	r22, 0xBC	; 188
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	8f e3       	ldi	r24, 0x3F	; 63
     4b6:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4b8:	79 cf       	rjmp	.-270    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 1 CRITICAL MALFORMED PACKET", part_number);
     4ba:	08 95       	ret
     4bc:	67 ed       	ldi	r22, 0xD7	; 215
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	8f e4       	ldi	r24, 0x4F	; 79
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	73 cf       	rjmp	.-282    	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     4c6:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_NO_RESPONSE:					
			switch (severity) {
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	91 05       	cpc	r25, r1
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <throw_error_code_with_number+0xd2>
     4ce:	83 30       	cpi	r24, 0x03	; 3
     4d0:	91 05       	cpc	r25, r1
     4d2:	79 f0       	breq	.+30     	; 0x4f2 <throw_error_code_with_number+0xde>
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	09 f0       	breq	.+2      	; 0x4da <throw_error_code_with_number+0xc6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 No Response", part_number);
     4d8:	07 c2       	rjmp	.+1038   	; 0x8e8 <throw_error_code_with_number+0x4d4>
     4da:	6a ef       	ldi	r22, 0xFA	; 250
     4dc:	72 e0       	ldi	r23, 0x02	; 2
     4de:	83 e3       	ldi	r24, 0x33	; 51
     4e0:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Info Handling
				break;
     4e2:	64 cf       	rjmp	.-312    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 No Response!", part_number);
     4e4:	08 95       	ret
     4e6:	6f e0       	ldi	r22, 0x0F	; 15
     4e8:	73 e0       	ldi	r23, 0x03	; 3
     4ea:	8f e3       	ldi	r24, 0x3F	; 63
     4ec:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     4ee:	5e cf       	rjmp	.-324    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL NO RESPONSE", part_number);
     4f0:	08 95       	ret
     4f2:	65 e2       	ldi	r22, 0x25	; 37
     4f4:	73 e0       	ldi	r23, 0x03	; 3
     4f6:	8f e4       	ldi	r24, 0x4F	; 79
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	58 cf       	rjmp	.-336    	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     4fc:	08 95       	ret
		    }			
		break;

        case ERROR_CANBUS_2_RESPONSE_MALFORMED:					
			switch (severity) {
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	91 05       	cpc	r25, r1
     502:	61 f0       	breq	.+24     	; 0x51c <throw_error_code_with_number+0x108>
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	91 05       	cpc	r25, r1
     508:	79 f0       	breq	.+30     	; 0x528 <throw_error_code_with_number+0x114>
     50a:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 2 Malformed Packet", part_number);
     50c:	09 f0       	breq	.+2      	; 0x510 <throw_error_code_with_number+0xfc>
     50e:	ec c1       	rjmp	.+984    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     510:	63 e4       	ldi	r22, 0x43	; 67
     512:	73 e0       	ldi	r23, 0x03	; 3
     514:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     516:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 2 Malformed Packet!", part_number);
     518:	49 cf       	rjmp	.-366    	; 0x3ac <send_error_message>
     51a:	08 95       	ret
     51c:	6d e5       	ldi	r22, 0x5D	; 93
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	8f e3       	ldi	r24, 0x3F	; 63
     522:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     524:	43 cf       	rjmp	.-378    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 2 CRITICAL MALFORMED PACKET", part_number);
     526:	08 95       	ret
     528:	68 e7       	ldi	r22, 0x78	; 120
     52a:	73 e0       	ldi	r23, 0x03	; 3
     52c:	8f e4       	ldi	r24, 0x4F	; 79
     52e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     530:	3d cf       	rjmp	.-390    	; 0x3ac <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_NO_RESPONSE:					
			switch (severity) {
     532:	08 95       	ret
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	91 05       	cpc	r25, r1
     538:	61 f0       	breq	.+24     	; 0x552 <throw_error_code_with_number+0x13e>
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	91 05       	cpc	r25, r1
     53e:	79 f0       	breq	.+30     	; 0x55e <throw_error_code_with_number+0x14a>
     540:	01 97       	sbiw	r24, 0x01	; 1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 No Response", part_number);
     542:	09 f0       	breq	.+2      	; 0x546 <throw_error_code_with_number+0x132>
     544:	d1 c1       	rjmp	.+930    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     546:	6b e9       	ldi	r22, 0x9B	; 155
     548:	73 e0       	ldi	r23, 0x03	; 3
     54a:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     54c:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 No Response!", part_number);
     54e:	2e cf       	rjmp	.-420    	; 0x3ac <send_error_message>
     550:	08 95       	ret
     552:	60 eb       	ldi	r22, 0xB0	; 176
     554:	73 e0       	ldi	r23, 0x03	; 3
     556:	8f e3       	ldi	r24, 0x3F	; 63
     558:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     55a:	28 cf       	rjmp	.-432    	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL NO RESPONSE", part_number);
     55c:	08 95       	ret
     55e:	66 ec       	ldi	r22, 0xC6	; 198
     560:	73 e0       	ldi	r23, 0x03	; 3
     562:	8f e4       	ldi	r24, 0x4F	; 79
     564:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Error Handling
				break;
     566:	22 cf       	rjmp	.-444    	; 0x3ac <send_error_message>
		    }			
		break;

        case ERROR_CANBUS_3_RESPONSE_MALFORMED:					
			switch (severity) {
     568:	08 95       	ret
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	91 05       	cpc	r25, r1
     56e:	61 f0       	breq	.+24     	; 0x588 <throw_error_code_with_number+0x174>
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	91 05       	cpc	r25, r1
     574:	79 f0       	breq	.+30     	; 0x594 <throw_error_code_with_number+0x180>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "CANBUS 3 Malformed Packet", part_number);
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	09 f0       	breq	.+2      	; 0x57c <throw_error_code_with_number+0x168>
     57a:	b6 c1       	rjmp	.+876    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     57c:	64 ee       	ldi	r22, 0xE4	; 228
     57e:	73 e0       	ldi	r23, 0x03	; 3
     580:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     582:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "CANBUS 3 Malformed Packet!", part_number);
     584:	13 cf       	rjmp	.-474    	; 0x3ac <send_error_message>
     586:	08 95       	ret
     588:	6e ef       	ldi	r22, 0xFE	; 254
     58a:	73 e0       	ldi	r23, 0x03	; 3
     58c:	8f e3       	ldi	r24, 0x3F	; 63
     58e:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CANBUS 3 CRITICAL MALFORMED PACKET", part_number);
     590:	0d cf       	rjmp	.-486    	; 0x3ac <send_error_message>
     592:	08 95       	ret
     594:	69 e1       	ldi	r22, 0x19	; 25
     596:	74 e0       	ldi	r23, 0x04	; 4
     598:	8f e4       	ldi	r24, 0x4F	; 79
				// Additional Error Handling
				break;
     59a:	92 e0       	ldi	r25, 0x02	; 2

        // Sensor based errors
        // --------------------------------------------------------------------

		case ERROR_GEARBOX_TEMPERATURE_LOW:					
			switch (severity) {
     59c:	07 cf       	rjmp	.-498    	; 0x3ac <send_error_message>
     59e:	08 95       	ret
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	91 05       	cpc	r25, r1
     5a4:	61 f0       	breq	.+24     	; 0x5be <throw_error_code_with_number+0x1aa>
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	91 05       	cpc	r25, r1
     5aa:	79 f0       	breq	.+30     	; 0x5ca <throw_error_code_with_number+0x1b6>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <throw_error_code_with_number+0x19e>
     5b0:	9b c1       	rjmp	.+822    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     5b2:	6c e3       	ldi	r22, 0x3C	; 60
     5b4:	74 e0       	ldi	r23, 0x04	; 4
     5b6:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     5b8:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally Low!", part_number);
     5ba:	f8 ce       	rjmp	.-528    	; 0x3ac <send_error_message>
     5bc:	08 95       	ret
     5be:	6a e5       	ldi	r22, 0x5A	; 90
     5c0:	74 e0       	ldi	r23, 0x04	; 4
     5c2:	8f e3       	ldi	r24, 0x3F	; 63
				// Additional Warning Handling
				break;
     5c4:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY LOW", part_number);
     5c6:	f2 ce       	rjmp	.-540    	; 0x3ac <send_error_message>
     5c8:	08 95       	ret
     5ca:	61 e8       	ldi	r22, 0x81	; 129
     5cc:	74 e0       	ldi	r23, 0x04	; 4
     5ce:	8f e4       	ldi	r24, 0x4F	; 79
				// Additional Error Handling
				break;
     5d0:	92 e0       	ldi	r25, 0x02	; 2
			}			
		break;

		case ERROR_GEARBOX_TEMPERATURE_HIGH:					
			switch (severity) {
     5d2:	ec ce       	rjmp	.-552    	; 0x3ac <send_error_message>
     5d4:	08 95       	ret
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	61 f0       	breq	.+24     	; 0x5f4 <throw_error_code_with_number+0x1e0>
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	91 05       	cpc	r25, r1
     5e0:	79 f0       	breq	.+30     	; 0x600 <throw_error_code_with_number+0x1ec>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Gearbox %d Temperature Normal", part_number);
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <throw_error_code_with_number+0x1d4>
     5e6:	80 c1       	rjmp	.+768    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     5e8:	6c e3       	ldi	r22, 0x3C	; 60
     5ea:	74 e0       	ldi	r23, 0x04	; 4
     5ec:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     5ee:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Gearbox %d Temperature Abnormally High!", part_number);
     5f0:	dd ce       	rjmp	.-582    	; 0x3ac <send_error_message>
     5f2:	08 95       	ret
     5f4:	67 ea       	ldi	r22, 0xA7	; 167
     5f6:	74 e0       	ldi	r23, 0x04	; 4
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "GEARBOX %d TEMPERATURE CRITICALLY HIGH", part_number);
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	d7 ce       	rjmp	.-594    	; 0x3ac <send_error_message>
     5fe:	08 95       	ret
     600:	6f ec       	ldi	r22, 0xCF	; 207
     602:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Error Handling
				break;
     604:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_LOW:					
			switch (severity) {
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	d1 ce       	rjmp	.-606    	; 0x3ac <send_error_message>
     60a:	08 95       	ret
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	91 05       	cpc	r25, r1
     610:	61 f0       	breq	.+24     	; 0x62a <throw_error_code_with_number+0x216>
     612:	83 30       	cpi	r24, 0x03	; 3
     614:	91 05       	cpc	r25, r1
     616:	79 f0       	breq	.+30     	; 0x636 <throw_error_code_with_number+0x222>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	09 f0       	breq	.+2      	; 0x61e <throw_error_code_with_number+0x20a>
     61c:	65 c1       	rjmp	.+714    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     61e:	66 ef       	ldi	r22, 0xF6	; 246
     620:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     622:	83 e3       	ldi	r24, 0x33	; 51

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally Low!", part_number);
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	c2 ce       	rjmp	.-636    	; 0x3ac <send_error_message>
     628:	08 95       	ret
     62a:	65 e1       	ldi	r22, 0x15	; 21
     62c:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;
     62e:	8f e3       	ldi	r24, 0x3F	; 63

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY LOW", part_number);
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	bc ce       	rjmp	.-648    	; 0x3ac <send_error_message>
     634:	08 95       	ret
     636:	6d e3       	ldi	r22, 0x3D	; 61
     638:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     63a:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_RADIATOR_TEMPERATURE_HIGH:					
			switch (severity) {
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	b6 ce       	rjmp	.-660    	; 0x3ac <send_error_message>
     640:	08 95       	ret
     642:	82 30       	cpi	r24, 0x02	; 2
     644:	91 05       	cpc	r25, r1
     646:	61 f0       	breq	.+24     	; 0x660 <throw_error_code_with_number+0x24c>
     648:	83 30       	cpi	r24, 0x03	; 3
     64a:	91 05       	cpc	r25, r1
     64c:	79 f0       	breq	.+30     	; 0x66c <throw_error_code_with_number+0x258>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Radiator %d Temperature Normal", part_number);
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	09 f0       	breq	.+2      	; 0x654 <throw_error_code_with_number+0x240>
     652:	4a c1       	rjmp	.+660    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     654:	66 ef       	ldi	r22, 0xF6	; 246
     656:	74 e0       	ldi	r23, 0x04	; 4
				// Additional Info Handling
				break;
     658:	83 e3       	ldi	r24, 0x33	; 51

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Radiator %d Temperature Abnormally High!", part_number);
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	a7 ce       	rjmp	.-690    	; 0x3ac <send_error_message>
     65e:	08 95       	ret
     660:	64 e6       	ldi	r22, 0x64	; 100
     662:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Warning Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "RADIATOR %d TEMPERATURE CRITICALLY HIGH", part_number);
     664:	8f e3       	ldi	r24, 0x3F	; 63
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	a1 ce       	rjmp	.-702    	; 0x3ac <send_error_message>
     66a:	08 95       	ret
     66c:	6d e8       	ldi	r22, 0x8D	; 141
     66e:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     670:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BRAKES_PRESSURE_LOW:					
			switch (severity) {
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	9b ce       	rjmp	.-714    	; 0x3ac <send_error_message>
     676:	08 95       	ret
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	91 05       	cpc	r25, r1
     67c:	61 f0       	breq	.+24     	; 0x696 <throw_error_code_with_number+0x282>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     682:	79 f0       	breq	.+30     	; 0x6a2 <throw_error_code_with_number+0x28e>
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	09 f0       	breq	.+2      	; 0x68a <throw_error_code_with_number+0x276>
     688:	2f c1       	rjmp	.+606    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     68a:	65 eb       	ldi	r22, 0xB5	; 181
				// Additional Info Handling
				break;
     68c:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally Low!", part_number);
     68e:	83 e3       	ldi	r24, 0x33	; 51
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	8c ce       	rjmp	.-744    	; 0x3ac <send_error_message>
     694:	08 95       	ret
     696:	6f ec       	ldi	r22, 0xCF	; 207
				// Additional Warning Handling
				break;
     698:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY LOW", part_number);
     69a:	8f e3       	ldi	r24, 0x3F	; 63
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	86 ce       	rjmp	.-756    	; 0x3ac <send_error_message>
     6a0:	08 95       	ret
     6a2:	62 ef       	ldi	r22, 0xF2	; 242
     6a4:	75 e0       	ldi	r23, 0x05	; 5
				// Additional Error Handling
				break;
     6a6:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BRAKES_PRESSURE_HIGH:					
			switch (severity) {
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	80 ce       	rjmp	.-768    	; 0x3ac <send_error_message>
     6ac:	08 95       	ret
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	91 05       	cpc	r25, r1
     6b2:	61 f0       	breq	.+24     	; 0x6cc <throw_error_code_with_number+0x2b8>
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6b8:	79 f0       	breq	.+30     	; 0x6d8 <throw_error_code_with_number+0x2c4>
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <throw_error_code_with_number+0x2ac>
     6be:	14 c1       	rjmp	.+552    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     6c0:	65 eb       	ldi	r22, 0xB5	; 181
				// Additional Info Handling
				break;
     6c2:	75 e0       	ldi	r23, 0x05	; 5

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     6c4:	83 e3       	ldi	r24, 0x33	; 51
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	71 ce       	rjmp	.-798    	; 0x3ac <send_error_message>
     6ca:	08 95       	ret
     6cc:	64 e1       	ldi	r22, 0x14	; 20
				// Additional Warning Handling
				break;
     6ce:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     6d0:	8f e3       	ldi	r24, 0x3F	; 63
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	6b ce       	rjmp	.-810    	; 0x3ac <send_error_message>
     6d6:	08 95       	ret
     6d8:	68 e3       	ldi	r22, 0x38	; 56
     6da:	76 e0       	ldi	r23, 0x06	; 6
				// Additional Error Handling
				break;
     6dc:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

        case ERROR_BRAKES_PRESSURE:					
			switch (severity) {
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	65 ce       	rjmp	.-822    	; 0x3ac <send_error_message>
     6e2:	08 95       	ret
     6e4:	82 30       	cpi	r24, 0x02	; 2
     6e6:	91 05       	cpc	r25, r1
     6e8:	61 f0       	breq	.+24     	; 0x702 <throw_error_code_with_number+0x2ee>
     6ea:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     6ec:	91 05       	cpc	r25, r1
     6ee:	79 f0       	breq	.+30     	; 0x70e <throw_error_code_with_number+0x2fa>
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <throw_error_code_with_number+0x2e2>
     6f4:	f9 c0       	rjmp	.+498    	; 0x8e8 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     6f6:	65 eb       	ldi	r22, 0xB5	; 181

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Warnning!", part_number);
     6f8:	75 e0       	ldi	r23, 0x05	; 5
     6fa:	83 e3       	ldi	r24, 0x33	; 51
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	56 ce       	rjmp	.-852    	; 0x3ac <send_error_message>
     700:	08 95       	ret
     702:	6b e5       	ldi	r22, 0x5B	; 91
				// Additional Warning Handling
				break;
     704:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICAL!", part_number);
     706:	8f e3       	ldi	r24, 0x3F	; 63
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	50 ce       	rjmp	.-864    	; 0x3ac <send_error_message>
     70c:	08 95       	ret
     70e:	68 e7       	ldi	r22, 0x78	; 120
				// Additional Error Handling
				break;
     710:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_LOW:					
			switch (severity) {
     712:	8f e4       	ldi	r24, 0x4F	; 79
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	4a ce       	rjmp	.-876    	; 0x3ac <send_error_message>
     718:	08 95       	ret
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	91 05       	cpc	r25, r1
     71e:	61 f0       	breq	.+24     	; 0x738 <throw_error_code_with_number+0x324>
     720:	83 30       	cpi	r24, 0x03	; 3
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     722:	91 05       	cpc	r25, r1
     724:	79 f0       	breq	.+30     	; 0x744 <throw_error_code_with_number+0x330>
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	09 f0       	breq	.+2      	; 0x72c <throw_error_code_with_number+0x318>
     72a:	de c0       	rjmp	.+444    	; 0x8e8 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     72c:	65 e9       	ldi	r22, 0x95	; 149

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Abnormally Low!", part_number);
     72e:	76 e0       	ldi	r23, 0x06	; 6
     730:	83 e3       	ldi	r24, 0x33	; 51
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	3b ce       	rjmp	.-906    	; 0x3ac <send_error_message>
     736:	08 95       	ret
     738:	6f ea       	ldi	r22, 0xAF	; 175
				// Additional Warning Handling
				break;
     73a:	76 e0       	ldi	r23, 0x06	; 6

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICALLY LOW", part_number);
     73c:	8f e3       	ldi	r24, 0x3F	; 63
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	35 ce       	rjmp	.-918    	; 0x3ac <send_error_message>
     742:	08 95       	ret
     744:	62 ed       	ldi	r22, 0xD2	; 210
				// Additional Error Handling
				break;
     746:	76 e0       	ldi	r23, 0x06	; 6
			}			
		break;

		case ERROR_BRAKES_POSITION_HIGH:					
			switch (severity) {
     748:	8f e4       	ldi	r24, 0x4F	; 79
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	2f ce       	rjmp	.-930    	; 0x3ac <send_error_message>
     74e:	08 95       	ret
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	91 05       	cpc	r25, r1
     754:	61 f0       	breq	.+24     	; 0x76e <throw_error_code_with_number+0x35a>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Pressure Normal", part_number);
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	91 05       	cpc	r25, r1
     75a:	79 f0       	breq	.+30     	; 0x77a <throw_error_code_with_number+0x366>
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	09 f0       	breq	.+2      	; 0x762 <throw_error_code_with_number+0x34e>
     760:	c3 c0       	rjmp	.+390    	; 0x8e8 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     762:	65 eb       	ldi	r22, 0xB5	; 181

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Pressure Abnormally High!", part_number);
     764:	75 e0       	ldi	r23, 0x05	; 5
     766:	83 e3       	ldi	r24, 0x33	; 51
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	20 ce       	rjmp	.-960    	; 0x3ac <send_error_message>
     76c:	08 95       	ret
				// Additional Warning Handling
				break;
     76e:	64 e1       	ldi	r22, 0x14	; 20

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d PRESSURE CRITICALLY HIGH", part_number);
     770:	76 e0       	ldi	r23, 0x06	; 6
     772:	8f e3       	ldi	r24, 0x3F	; 63
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	1a ce       	rjmp	.-972    	; 0x3ac <send_error_message>
     778:	08 95       	ret
				// Additional Error Handling
				break;
     77a:	68 e3       	ldi	r22, 0x38	; 56
			}			
		break;

        case ERROR_BRAKES_POSITION:					
			switch (severity) {
     77c:	76 e0       	ldi	r23, 0x06	; 6
     77e:	8f e4       	ldi	r24, 0x4F	; 79
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	14 ce       	rjmp	.-984    	; 0x3ac <send_error_message>
     784:	08 95       	ret
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	61 f0       	breq	.+24     	; 0x7a4 <throw_error_code_with_number+0x390>
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Brakes %d Position Normal", part_number);
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	91 05       	cpc	r25, r1
     790:	79 f0       	breq	.+30     	; 0x7b0 <throw_error_code_with_number+0x39c>
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	09 f0       	breq	.+2      	; 0x798 <throw_error_code_with_number+0x384>
				// Additional Info Handling
				break;
     796:	a8 c0       	rjmp	.+336    	; 0x8e8 <throw_error_code_with_number+0x4d4>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Brakes %d Position Warning!", part_number);
     798:	65 e9       	ldi	r22, 0x95	; 149
     79a:	76 e0       	ldi	r23, 0x06	; 6
     79c:	83 e3       	ldi	r24, 0x33	; 51
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	05 ce       	rjmp	.-1014   	; 0x3ac <send_error_message>
     7a2:	08 95       	ret
				// Additional Warning Handling
				break;
     7a4:	64 ef       	ldi	r22, 0xF4	; 244

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BRAKES %d POSITION CRITICAL", part_number);
     7a6:	76 e0       	ldi	r23, 0x06	; 6
     7a8:	8f e3       	ldi	r24, 0x3F	; 63
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	ff cd       	rjmp	.-1026   	; 0x3ac <send_error_message>
     7ae:	08 95       	ret
				// Additional Error Handling
				break;
     7b0:	60 e1       	ldi	r22, 0x10	; 16
			}			
		break;

		case ERROR_STEERING_ANGLE_LEFT:					
			switch (severity) {
     7b2:	77 e0       	ldi	r23, 0x07	; 7
     7b4:	8f e4       	ldi	r24, 0x4F	; 79
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	f9 cd       	rjmp	.-1038   	; 0x3ac <send_error_message>
     7ba:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	91 05       	cpc	r25, r1
     7c0:	19 f0       	breq	.+6      	; 0x7c8 <throw_error_code_with_number+0x3b4>
     7c2:	03 97       	sbiw	r24, 0x03	; 3
     7c4:	39 f0       	breq	.+14     	; 0x7d4 <throw_error_code_with_number+0x3c0>
     7c6:	08 95       	ret
				// Additional Info Handling
				break;
     7c8:	6c e2       	ldi	r22, 0x2C	; 44

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE LEFT PARAMETER", part_number);
     7ca:	77 e0       	ldi	r23, 0x07	; 7
     7cc:	83 e3       	ldi	r24, 0x33	; 51
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	ed cd       	rjmp	.-1062   	; 0x3ac <send_error_message>
     7d2:	08 95       	ret
				break;
			}			
		break;

		case ERROR_STEERING_ANGLE_RIGHT:					
			switch (severity) {
     7d4:	62 e4       	ldi	r22, 0x42	; 66
     7d6:	77 e0       	ldi	r23, 0x07	; 7
     7d8:	8f e4       	ldi	r24, 0x4F	; 79
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	e7 cd       	rjmp	.-1074   	; 0x3ac <send_error_message>
     7de:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Steering Angle Normal", part_number);
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 05       	cpc	r25, r1
     7e4:	19 f0       	breq	.+6      	; 0x7ec <throw_error_code_with_number+0x3d8>
     7e6:	03 97       	sbiw	r24, 0x03	; 3
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <throw_error_code_with_number+0x3e4>
     7ea:	08 95       	ret
				// Additional Info Handling
				break;
     7ec:	6c e2       	ldi	r22, 0x2C	; 44

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "STEERING ANGLE OUTSIDE RIGHT PARAMETER", part_number);
     7ee:	77 e0       	ldi	r23, 0x07	; 7
     7f0:	83 e3       	ldi	r24, 0x33	; 51
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	db cd       	rjmp	.-1098   	; 0x3ac <send_error_message>
     7f6:	08 95       	ret
				// Additional Error Handling
				break;
     7f8:	68 e6       	ldi	r22, 0x68	; 104
			}			
		break;

		case ERROR_THROTTLE_ERROR:					
			switch (severity) {
     7fa:	77 e0       	ldi	r23, 0x07	; 7
     7fc:	8f e4       	ldi	r24, 0x4F	; 79
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	d5 cd       	rjmp	.-1110   	; 0x3ac <send_error_message>
     802:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Throttle Function Normal", part_number);
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	91 05       	cpc	r25, r1
     808:	19 f0       	breq	.+6      	; 0x810 <throw_error_code_with_number+0x3fc>
     80a:	03 97       	sbiw	r24, 0x03	; 3
     80c:	39 f0       	breq	.+14     	; 0x81c <throw_error_code_with_number+0x408>
				// Additional Info Handling
				break;
     80e:	08 95       	ret

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "THROTTLE CRITICAL MALFUNCTION", part_number);
     810:	6f e8       	ldi	r22, 0x8F	; 143
     812:	77 e0       	ldi	r23, 0x07	; 7
     814:	83 e3       	ldi	r24, 0x33	; 51
     816:	92 e0       	ldi	r25, 0x02	; 2
     818:	c9 cd       	rjmp	.-1134   	; 0x3ac <send_error_message>
     81a:	08 95       	ret
				// Additional Error Handling
				break;
     81c:	68 ea       	ldi	r22, 0xA8	; 168
			}			
		break;

		case ERROR_CAR_UPRIGHT_ERROR:					
			switch (severity) {
     81e:	77 e0       	ldi	r23, 0x07	; 7
     820:	8f e4       	ldi	r24, 0x4F	; 79
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	c3 cd       	rjmp	.-1146   	; 0x3ac <send_error_message>
     826:	08 95       	ret
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Car is upright", part_number);
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	91 05       	cpc	r25, r1
     82c:	19 f0       	breq	.+6      	; 0x834 <throw_error_code_with_number+0x420>
     82e:	03 97       	sbiw	r24, 0x03	; 3
     830:	39 f0       	breq	.+14     	; 0x840 <throw_error_code_with_number+0x42c>
				// Additional Info Handling
				break;

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "CAR HAS OVERTURNED", part_number);
     832:	08 95       	ret
     834:	66 ec       	ldi	r22, 0xC6	; 198
     836:	77 e0       	ldi	r23, 0x07	; 7
     838:	83 e3       	ldi	r24, 0x33	; 51
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	b7 cd       	rjmp	.-1170   	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     83e:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_CHARGE:					
			switch (severity) {
     840:	65 ed       	ldi	r22, 0xD5	; 213
     842:	77 e0       	ldi	r23, 0x07	; 7
     844:	8f e4       	ldi	r24, 0x4F	; 79
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	b1 cd       	rjmp	.-1182   	; 0x3ac <send_error_message>
     84a:	08 95       	ret
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Charge Normal", part_number);
     850:	61 f0       	breq	.+24     	; 0x86a <throw_error_code_with_number+0x456>
     852:	83 30       	cpi	r24, 0x03	; 3
     854:	91 05       	cpc	r25, r1
     856:	79 f0       	breq	.+30     	; 0x876 <throw_error_code_with_number+0x462>
     858:	01 97       	sbiw	r24, 0x01	; 1
				// Additional Info Handling
				break;
     85a:	09 f0       	breq	.+2      	; 0x85e <throw_error_code_with_number+0x44a>

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Charge Low", part_number);
     85c:	45 c0       	rjmp	.+138    	; 0x8e8 <throw_error_code_with_number+0x4d4>
     85e:	68 ee       	ldi	r22, 0xE8	; 232
     860:	77 e0       	ldi	r23, 0x07	; 7
     862:	83 e3       	ldi	r24, 0x33	; 51
     864:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     866:	a2 cd       	rjmp	.-1212   	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d CHARGE CRITICAL", part_number);
     868:	08 95       	ret
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	78 e0       	ldi	r23, 0x08	; 8
     86e:	8f e3       	ldi	r24, 0x3F	; 63
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	9c cd       	rjmp	.-1224   	; 0x3ac <send_error_message>
				// Additional Error Handling
				break;
     874:	08 95       	ret
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_LOW:					
			switch (severity) {
     876:	67 e1       	ldi	r22, 0x17	; 23
     878:	78 e0       	ldi	r23, 0x08	; 8
     87a:	8f e4       	ldi	r24, 0x4F	; 79
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	96 cd       	rjmp	.-1236   	; 0x3ac <send_error_message>
     880:	08 95       	ret
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     886:	59 f0       	breq	.+22     	; 0x89e <throw_error_code_with_number+0x48a>
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	91 05       	cpc	r25, r1
     88c:	71 f0       	breq	.+28     	; 0x8aa <throw_error_code_with_number+0x496>
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	59 f5       	brne	.+86     	; 0x8e8 <throw_error_code_with_number+0x4d4>
				// Additional Info Handling
				break;
     892:	62 e3       	ldi	r22, 0x32	; 50

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally Low!", part_number);
     894:	78 e0       	ldi	r23, 0x08	; 8
     896:	83 e3       	ldi	r24, 0x33	; 51
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	88 cd       	rjmp	.-1264   	; 0x3ac <send_error_message>
     89c:	08 95       	ret
     89e:	60 e5       	ldi	r22, 0x50	; 80
				// Additional Warning Handling
				break;
     8a0:	78 e0       	ldi	r23, 0x08	; 8

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY LOW", part_number);
     8a2:	8f e3       	ldi	r24, 0x3F	; 63
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	82 cd       	rjmp	.-1276   	; 0x3ac <send_error_message>
     8a8:	08 95       	ret
     8aa:	67 e7       	ldi	r22, 0x77	; 119
     8ac:	78 e0       	ldi	r23, 0x08	; 8
				// Additional Error Handling
				break;
     8ae:	8f e4       	ldi	r24, 0x4F	; 79
			}			
		break;

		case ERROR_BATTERY_TEMPERATURE_HIGH:					
			switch (severity) {
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	7c cd       	rjmp	.-1288   	; 0x3ac <send_error_message>
     8b4:	08 95       	ret
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	91 05       	cpc	r25, r1
     8ba:	59 f0       	breq	.+22     	; 0x8d2 <throw_error_code_with_number+0x4be>
     8bc:	83 30       	cpi	r24, 0x03	; 3
     8be:	91 05       	cpc	r25, r1
				case ERROR_LEVEL_INFO:
				// Logging behaviour for Info-level logs
				send_error_message(ERROR_STRING_INFO, "Battery %d Temperature Normal", part_number);
     8c0:	71 f0       	breq	.+28     	; 0x8de <throw_error_code_with_number+0x4ca>
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	89 f4       	brne	.+34     	; 0x8e8 <throw_error_code_with_number+0x4d4>
     8c6:	62 e3       	ldi	r22, 0x32	; 50
     8c8:	78 e0       	ldi	r23, 0x08	; 8
     8ca:	83 e3       	ldi	r24, 0x33	; 51
				// Additional Info Handling
				break;
     8cc:	92 e0       	ldi	r25, 0x02	; 2

				case ERROR_LEVEL_WARN:
				// Loggging behaviour for Warning-level logs
				send_error_message(ERROR_STRING_WARN, "Battery %d Temperature Abnormally High!", part_number);
     8ce:	6e cd       	rjmp	.-1316   	; 0x3ac <send_error_message>
     8d0:	08 95       	ret
     8d2:	6d e9       	ldi	r22, 0x9D	; 157
     8d4:	78 e0       	ldi	r23, 0x08	; 8
     8d6:	8f e3       	ldi	r24, 0x3F	; 63
     8d8:	92 e0       	ldi	r25, 0x02	; 2
				// Additional Warning Handling
				break;
     8da:	68 cd       	rjmp	.-1328   	; 0x3ac <send_error_message>

				case ERROR_LEVEL_ERROR:
				// Logging behaviour for Error-level logs
				send_error_message(ERROR_STRING_ERROR, "BATTERY %d TEMPERATURE CRITICALLY HIGH", part_number);
     8dc:	08 95       	ret
     8de:	65 ec       	ldi	r22, 0xC5	; 197
     8e0:	78 e0       	ldi	r23, 0x08	; 8
     8e2:	8f e4       	ldi	r24, 0x4F	; 79
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	62 cd       	rjmp	.-1340   	; 0x3ac <send_error_message>
     8e8:	08 95       	ret

000008ea <throw_error_code>:
 * Generates an error message, and takes the necessary actions depending on the severity and error.
 * Uses 0 as the part number
 **/
void throw_error_code(uint16_t severity, uint16_t error_code)
{	
	throw_error_code_with_number(severity, error_code, 0);
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	92 cd       	rjmp	.-1244   	; 0x414 <throw_error_code_with_number>
     8f0:	08 95       	ret

000008f2 <external_interrupt_init>:
 * 
 */
void external_interrupt_init()
{
	//INT1 for CAN1, INT0 for CAN2, PCINT7 for CAN3
	EICRA |= (2<<ISC00)|(2<<ISC10);
     8f2:	e9 e6       	ldi	r30, 0x69	; 105
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8a 60       	ori	r24, 0x0A	; 10
     8fa:	80 83       	st	Z, r24
	EIMSK  = (1<<INT0) | (1<<INT1);
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupts for PCINT7:0
	PCICR  = (1<<PCIE0)|(0<<PCIE1);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//CAN C interrupt
	PCMSK0 = (1<<PCINT7);
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     90c:	08 95       	ret

0000090e <io_init>:
 * 
 */
void io_init()
{
	//pins 8, 9 and 14 for MCP2515_STB high so the things respond (PE6, PE7, PH2)
	DDRE  = 0b11000010;		//PE0 = RS232 RX1; PE1 = RS232 TX1;  PE6 = STB_CAN1; PE7 = STB_CAN2;
     90e:	82 ec       	ldi	r24, 0xC2	; 194
     910:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000000;		
     912:	1e b8       	out	0x0e, r1	; 14
	DDRH  = 0b00000111;		//PH0 = CS_CAN1; PH1 = CS_CAN2; PH2 = STB_CAN3
     914:	87 e0       	ldi	r24, 0x07	; 7
     916:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	PORTH = 0b00000011;		//CS_CAN1 high; CS_CAN2 high;
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	//pins 12, 13, 19 for the CS for each MCP2515 PH0, PH1, PB0)

	//pin 21 for MOSI, pin 20  for SCK (PB2, PB1)
	DDRB  = 0b01100111;		//PB0 = CS_CAN3; PB1 = SCK; PB2 = MOSI; PB3 = MISO; PB5 = High drive A; PB6 = Low drive A; PB7 = CAN3_INT; 
     920:	87 e6       	ldi	r24, 0x67	; 103
     922:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		//set CS_CAN3 high;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	85 b9       	out	0x05, r24	; 5
	
	DDRL  = 0b00011000;		//PB3 = High drive B; PB4 = Low Drive B;
     928:	98 e1       	ldi	r25, 0x18	; 24
     92a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	PORTL = 0b00000000;
     92e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	
	DDRD  = 0b11001000;		//PD0 = CAN2_INT; PD1 = CAN1_INT; PD2 = RS232 RX2; PD3 = RS232 TX2; PD6 = CAN1_TXPIN; PD7 = CAN2_TXPIN;
     932:	88 ec       	ldi	r24, 0xC8	; 200
     934:	8a b9       	out	0x0a, r24	; 10
	DDRD  = 0b00000000;
     936:	1a b8       	out	0x0a, r1	; 10
	
	DDRC  = 0b00001000;		//PC3 = CAN3_TXPIN;
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
     93c:	18 b8       	out	0x08, r1	; 8
	
	DDRJ  = 0b00000000;		//PORTJ is used for digital input;
     93e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	PORTJ |= 64;			//turn the pull-ups on for digital inputs
     942:	e5 e0       	ldi	r30, 0x05	; 5
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	80 81       	ld	r24, Z
     948:	80 64       	ori	r24, 0x40	; 64
     94a:	80 83       	st	Z, r24
	
	DDRA  = 0b00011000;		//PA3 = ENABLE_B; PA4 = ENABLE_A; PA1 = dig input; PA2 = dig input;
     94c:	91 b9       	out	0x01, r25	; 1
	PORTA = 0b00010000;		
     94e:	80 e1       	ldi	r24, 0x10	; 16
     950:	82 b9       	out	0x02, r24	; 2

	DDRK  = 0b00100000;		//PK5 = debugging LED;
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	// PORTK = 0b00100000;
	
	// Enable external interrupts in order for the CAN bus to communicate with us
	external_interrupt_init();
     958:	cc cf       	rjmp	.-104    	; 0x8f2 <external_interrupt_init>
     95a:	08 95       	ret

0000095c <firmware_init>:
 * @brief Set up all devices in the ATmega and MCP2515. Initiates structs to hold data from other devices
 * 
 */
void firmware_init()
{
	io_init();
     95c:	d8 df       	rcall	.-80     	; 0x90e <io_init>
	SPI_init();
     95e:	4d d6       	rcall	.+3226   	; 0x15fa <SPI_init>
     960:	80 e0       	ldi	r24, 0x00	; 0
    // // uart_init(UART_BAUD_SELECT(19200, 16UL));
    uart_init(19200);
     962:	9b e4       	ldi	r25, 0x4B	; 75
     964:	0a d7       	rcall	.+3604   	; 0x177a <uart_init>
     966:	61 e0       	ldi	r22, 0x01	; 1
    //uart1_init(19200);
	a2dInit(ADC_PRESCALE_DIV64, ADC_REFERENCE_AVCC); // Turns ON ADC
     968:	86 e0       	ldi	r24, 0x06	; 6
     96a:	7c dc       	rcall	.-1800   	; 0x264 <a2dInit>
     96c:	81 e0       	ldi	r24, 0x01	; 1
	MCP2515_init(TRACTIVE_CAN);
     96e:	e1 d4       	rcall	.+2498   	; 0x1332 <MCP2515_init>
     970:	82 e0       	ldi	r24, 0x02	; 2
	MCP2515_init(POWER_CAN);
     972:	df d4       	rcall	.+2494   	; 0x1332 <MCP2515_init>
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	dd d4       	rcall	.+2490   	; 0x1332 <MCP2515_init>
	MCP2515_init(DATA_CAN);
     978:	e5 e0       	ldi	r30, 0x05	; 5
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 81       	ld	r24, Z

	// Enable the pullup on the input. This allows the pin to be active low
	PORTJ |= (1<<PINJ6);
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	80 83       	st	Z, r24
     982:	08 95       	ret

00000984 <timer_init>:
     984:	84 b5       	in	r24, 0x24	; 36
     986:	82 60       	ori	r24, 0x02	; 2
     988:	84 bd       	out	0x24, r24	; 36
void timer_init()
{
    // http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2549-8-bit-AVR-Microcontroller-ATmega640-1280-1281-2560-2561_datasheet.pdf
    // Set up 1Khz timer
    TCCR0A |= (1 << WGM01);                 // Setting CTC on timer0
    TCCR0B |= (1 << CS01)|(1 << CS00);      // Set up 64 prescaler (16Mhz / 64)
     98a:	85 b5       	in	r24, 0x25	; 37
     98c:	83 60       	ori	r24, 0x03	; 3
     98e:	85 bd       	out	0x25, r24	; 37
    OCR0A = 250;                            // (16*10^6) / (1000 * 64) assuming 16Mhz chip = 1Khz
     990:	8a ef       	ldi	r24, 0xFA	; 250
     992:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);                // Enable COMPA interupt
     994:	ee e6       	ldi	r30, 0x6E	; 110
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	82 60       	ori	r24, 0x02	; 2
     99c:	80 83       	st	Z, r24

    // Set up 50Hz comm timer
	TCCR1A = 0b00000000;			//
     99e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00001101;			// CTC mode & prescale clock by 1024
     9a2:	8d e0       	ldi	r24, 0x0D	; 13
     9a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A =  15000;					// 312 gives 50Hz main comms speed
     9a8:	88 e9       	ldi	r24, 0x98	; 152
     9aa:	9a e3       	ldi	r25, 0x3A	; 58
     9ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 0b00000010;			// Turn on compare interrupt for OCR1A
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     9ba:	08 95       	ret

000009bc <INPUT_scaleInput>:
 * @param max 
 * @param min 
 * @return uint8_t 
 */
uint8_t INPUT_scaleInput(uint16_t * value, uint16_t max, uint16_t min) {
    uint8_t tmp = (((*value - (min - INPUT_ADC_THRESH)) * 100) / ((max + INPUT_ADC_THRESH) - (min - INPUT_ADC_THRESH)));
     9bc:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <INPUT_ADC_THRESH>
     9c0:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <INPUT_ADC_THRESH+0x1>
     9c4:	9f 01       	movw	r18, r30
     9c6:	24 1b       	sub	r18, r20
     9c8:	35 0b       	sbc	r19, r21
    return tmp > 100 ? 100 : tmp < 0 ? 0 : tmp;
     9ca:	dc 01       	movw	r26, r24
     9cc:	4d 91       	ld	r20, X+
     9ce:	5c 91       	ld	r21, X
     9d0:	42 0f       	add	r20, r18
     9d2:	53 1f       	adc	r21, r19
     9d4:	a4 e6       	ldi	r26, 0x64	; 100
     9d6:	a4 9f       	mul	r26, r20
     9d8:	c0 01       	movw	r24, r0
     9da:	a5 9f       	mul	r26, r21
     9dc:	90 0d       	add	r25, r0
     9de:	11 24       	eor	r1, r1
     9e0:	6e 0f       	add	r22, r30
     9e2:	7f 1f       	adc	r23, r31
     9e4:	62 0f       	add	r22, r18
     9e6:	73 1f       	adc	r23, r19
     9e8:	40 d7       	rcall	.+3712   	; 0x186a <__udivmodhi4>
     9ea:	86 2f       	mov	r24, r22
     9ec:	65 36       	cpi	r22, 0x65	; 101
     9ee:	08 f0       	brcs	.+2      	; 0x9f2 <INPUT_scaleInput+0x36>
     9f0:	84 e6       	ldi	r24, 0x64	; 100
}
     9f2:	08 95       	ret

000009f4 <INPUT_read_accelPedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_accelPedal(uint16_t *throttle) {
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
     9fe:	00 91 4b 09 	lds	r16, 0x094B	; 0x80094b <historyIndex.2085>
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	3c dc       	rcall	.-1928   	; 0x282 <a2d_10bitCh>
     a0a:	00 0f       	add	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	f8 01       	movw	r30, r16
     a10:	e9 5c       	subi	r30, 0xC9	; 201
     a12:	f6 4f       	sbci	r31, 0xF6	; 246
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);
     a18:	10 91 4b 09 	lds	r17, 0x094B	; 0x80094b <historyIndex.2085>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	81 0f       	add	r24, r17
     a20:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <historyIndex.2085>
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2c dc       	rcall	.-1960   	; 0x282 <a2d_10bitCh>
     a2a:	e1 2f       	mov	r30, r17
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ed 5d       	subi	r30, 0xDD	; 221
     a34:	f6 4f       	sbci	r31, 0xF6	; 246
     a36:	91 83       	std	Z+1, r25	; 0x01
     a38:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     a3a:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <historyIndex.2085>
     a3e:	88 30       	cpi	r24, 0x08	; 8
     a40:	10 f0       	brcs	.+4      	; 0xa46 <INPUT_read_accelPedal+0x52>
     a42:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <historyIndex.2085>
     a46:	e7 e3       	ldi	r30, 0x37	; 55
     a48:	f9 e0       	ldi	r31, 0x09	; 9
     a4a:	a3 e2       	ldi	r26, 0x23	; 35
     a4c:	b9 e0       	ldi	r27, 0x09	; 9
     a4e:	67 e4       	ldi	r22, 0x47	; 71
     a50:	79 e0       	ldi	r23, 0x09	; 9

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH1);
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_THROTTLE_CH2);

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     a5a:	41 91       	ld	r20, Z+
     a5c:	51 91       	ld	r21, Z+
     a5e:	24 0f       	add	r18, r20
     a60:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     a62:	4d 91       	ld	r20, X+
     a64:	5d 91       	ld	r21, X+
     a66:	84 0f       	add	r24, r20
     a68:	95 1f       	adc	r25, r21

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }

    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     a6a:	e6 17       	cp	r30, r22
     a6c:	f7 07       	cpc	r31, r23
     a6e:	a9 f7       	brne	.-22     	; 0xa5a <INPUT_read_accelPedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     a70:	36 95       	lsr	r19
     a72:	27 95       	ror	r18
     a74:	36 95       	lsr	r19
     a76:	27 95       	ror	r18
     a78:	36 95       	lsr	r19
     a7a:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 
     a7c:	39 83       	std	Y+1, r19	; 0x01
     a7e:	28 83       	st	Y, r18

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     a80:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <INPUT_ADC_ERROR>
     a84:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <INPUT_ADC_ERROR+0x1>
     a88:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH1_LOW>
     a8c:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     a90:	46 1b       	sub	r20, r22
     a92:	57 0b       	sbc	r21, r23
     a94:	24 17       	cp	r18, r20
     a96:	35 07       	cpc	r19, r21
     a98:	d0 f1       	brcs	.+116    	; 0xb0e <INPUT_read_accelPedal+0x11a>
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
     aa6:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <INPUT_PEDAL_THROTTLE_CH2_LOW>
     aaa:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <INPUT_PEDAL_THROTTLE_CH2_LOW+0x1>
     aae:	46 1b       	sub	r20, r22
     ab0:	57 0b       	sbc	r21, r23
     ab2:	84 17       	cp	r24, r20
     ab4:	95 07       	cpc	r25, r21
     ab6:	68 f1       	brcs	.+90     	; 0xb12 <INPUT_read_accelPedal+0x11e>
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
     ab8:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     abc:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     ac0:	46 1b       	sub	r20, r22
     ac2:	57 0b       	sbc	r21, r23
     ac4:	42 17       	cp	r20, r18
     ac6:	53 07       	cpc	r21, r19
     ac8:	30 f1       	brcs	.+76     	; 0xb16 <INPUT_read_accelPedal+0x122>
     aca:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <INPUT_PEDAL_THROTTLE_CH2_HIGH>
     ace:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <INPUT_PEDAL_THROTTLE_CH2_HIGH+0x1>
     ad2:	46 1b       	sub	r20, r22
     ad4:	57 0b       	sbc	r21, r23
     ad6:	48 17       	cp	r20, r24
     ad8:	59 07       	cpc	r21, r25
     ada:	f8 f0       	brcs	.+62     	; 0xb1a <INPUT_read_accelPedal+0x126>
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
    secondaryAverage /= ADC_SAMPLES;

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     adc:	28 1b       	sub	r18, r24
     ade:	39 0b       	sbc	r19, r25
     ae0:	c9 01       	movw	r24, r18
     ae2:	99 23       	and	r25, r25
     ae4:	24 f4       	brge	.+8      	; 0xaee <INPUT_read_accelPedal+0xfa>
     ae6:	88 27       	eor	r24, r24
     ae8:	99 27       	eor	r25, r25
     aea:	82 1b       	sub	r24, r18
     aec:	93 0b       	sbc	r25, r19
	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
     aee:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <INPUT_PEDAL_DELTA_THRESH_L>
     af2:	30 91 50 09 	lds	r19, 0x0950	; 0x800950 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	88 f0       	brcs	.+34     	; 0xb1e <INPUT_read_accelPedal+0x12a>
     afc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     b00:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     b04:	28 17       	cp	r18, r24
     b06:	39 07       	cpc	r19, r25
     b08:	60 f0       	brcs	.+24     	; 0xb22 <INPUT_read_accelPedal+0x12e>
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
	return 0;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <INPUT_read_accelPedal+0x130>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *throttle = primaryAverage; 

	if(primaryAverage < INPUT_PEDAL_THROTTLE_CH1_LOW - INPUT_ADC_ERROR ||
       secondaryAverage < INPUT_PEDAL_THROTTLE_CH2_LOW - INPUT_ADC_ERROR ) { return 1; }
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <INPUT_read_accelPedal+0x130>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <INPUT_read_accelPedal+0x130>
	else if(primaryAverage > INPUT_PEDAL_THROTTLE_CH1_HIGH - INPUT_ADC_ERROR ||
            secondaryAverage > INPUT_PEDAL_THROTTLE_CH2_HIGH - INPUT_ADC_ERROR ) { return 2; }
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <INPUT_read_accelPedal+0x130>
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <INPUT_read_accelPedal+0x130>
	// Verify if the difference between sensors is within acceptable values
	else if(delta < INPUT_PEDAL_DELTA_THRESH_L ||
            delta > INPUT_PEDAL_DELTA_THRESH_H) { return 3; }
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <INPUT_read_accelPedal+0x130>
     b22:	83 e0       	ldi	r24, 0x03	; 3
	return 0;
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <INPUT_get_accelPedal>:
uint8_t INPUT_accelerationPedal = 0;
uint8_t INPUT_brakePedal = 0;
uint8_t INPUT_brakePressureFront = 0;
uint8_t INPUT_brakePressureBack = 0;

uint8_t INPUT_get_accelPedal(uint8_t *val) {
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <INPUT_get_accelPedal+0xc>
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_accelPedal(&rawValue);
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	55 df       	rcall	.-342    	; 0x9f4 <INPUT_read_accelPedal>
     b4a:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     b4c:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <INPUT_PEDAL_THROTTLE_CH1_LOW>
     b50:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <INPUT_PEDAL_THROTTLE_CH1_LOW+0x1>
     b54:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <INPUT_PEDAL_THROTTLE_CH1_HIGH>
     b58:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <INPUT_PEDAL_THROTTLE_CH1_HIGH+0x1>
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	2d df       	rcall	.-422    	; 0x9bc <INPUT_scaleInput>
     b62:	f7 01       	movw	r30, r14
     b64:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_THROTTLE_CH1_HIGH,
        INPUT_PEDAL_THROTTLE_CH1_LOW
    );
    // Error States
    switch (state) {
     b66:	12 30       	cpi	r17, 0x02	; 2
     b68:	51 f0       	breq	.+20     	; 0xb7e <INPUT_get_accelPedal+0x50>
     b6a:	13 30       	cpi	r17, 0x03	; 3
     b6c:	71 f0       	breq	.+28     	; 0xb8a <INPUT_get_accelPedal+0x5c>
     b6e:	11 30       	cpi	r17, 0x01	; 1
     b70:	89 f4       	brne	.+34     	; 0xb94 <INPUT_get_accelPedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b72:	6e e0       	ldi	r22, 0x0E	; 14
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	b7 de       	rcall	.-658    	; 0x8ea <throw_error_code>
            break;
     b7c:	0b c0       	rjmp	.+22     	; 0xb94 <INPUT_get_accelPedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b7e:	6e e0       	ldi	r22, 0x0E	; 14
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	b1 de       	rcall	.-670    	; 0x8ea <throw_error_code>
            break;
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <INPUT_get_accelPedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_THROTTLE_ERROR);
     b8a:	6e e0       	ldi	r22, 0x0E	; 14
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	ab de       	rcall	.-682    	; 0x8ea <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     b94:	81 2f       	mov	r24, r17
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <INPUT_read_brakePedal>:
 *     // Use val some way
 * } else {
 *     // Val is in error
 * }
 */
uint8_t INPUT_read_brakePedal(uint16_t * brake) {
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
    // Read the values of the two throttle sensors and verify if the received values are valid
    primaryHistory[historyIndex] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH1);
     bb0:	00 91 22 09 	lds	r16, 0x0922	; 0x800922 <historyIndex.2100>
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	63 db       	rcall	.-2362   	; 0x282 <a2d_10bitCh>
     bbc:	00 0f       	add	r16, r16
     bbe:	11 1f       	adc	r17, r17
     bc0:	f8 01       	movw	r30, r16
     bc2:	e2 5f       	subi	r30, 0xF2	; 242
     bc4:	f6 4f       	sbci	r31, 0xF6	; 246
     bc6:	91 83       	std	Z+1, r25	; 0x01
     bc8:	80 83       	st	Z, r24
    secondaryHistory[historyIndex++] = a2d_10bitCh(INPUT_PEDAL_BRAKE_CH2);
     bca:	10 91 22 09 	lds	r17, 0x0922	; 0x800922 <historyIndex.2100>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	81 0f       	add	r24, r17
     bd2:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <historyIndex.2100>
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	53 db       	rcall	.-2394   	; 0x282 <a2d_10bitCh>
     bdc:	e1 2f       	mov	r30, r17
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	e6 50       	subi	r30, 0x06	; 6
     be6:	f7 4f       	sbci	r31, 0xF7	; 247
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
     bec:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <historyIndex.2100>
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	10 f0       	brcs	.+4      	; 0xbf8 <INPUT_read_brakePedal+0x52>
     bf4:	10 92 22 09 	sts	0x0922, r1	; 0x800922 <historyIndex.2100>
     bf8:	ee e0       	ldi	r30, 0x0E	; 14
     bfa:	f9 e0       	ldi	r31, 0x09	; 9
     bfc:	aa ef       	ldi	r26, 0xFA	; 250
     bfe:	b8 e0       	ldi	r27, 0x08	; 8
     c00:	6e e1       	ldi	r22, 0x1E	; 30
     c02:	79 e0       	ldi	r23, 0x09	; 9
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0

    if(historyIndex >= ADC_SAMPLES) { historyIndex = 0; }
	
	
	
    uint16_t primaryAverage = 0;
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
        primaryAverage += primaryHistory[i];
     c0c:	41 91       	ld	r20, Z+
     c0e:	51 91       	ld	r21, Z+
     c10:	24 0f       	add	r18, r20
     c12:	35 1f       	adc	r19, r21
        secondaryAverage += secondaryHistory[i];
     c14:	4d 91       	ld	r20, X+
     c16:	5d 91       	ld	r21, X+
     c18:	84 0f       	add	r24, r20
     c1a:	95 1f       	adc	r25, r21
	
	
	
    uint16_t primaryAverage = 0;
    uint16_t secondaryAverage = 0;
    for(uint8_t i = 0; i < ADC_SAMPLES; i++) {
     c1c:	e6 17       	cp	r30, r22
     c1e:	f7 07       	cpc	r31, r23
     c20:	a9 f7       	brne	.-22     	; 0xc0c <INPUT_read_brakePedal+0x66>
        primaryAverage += primaryHistory[i];
        secondaryAverage += secondaryHistory[i];
    }
    primaryAverage /= ADC_SAMPLES;
     c22:	36 95       	lsr	r19
     c24:	27 95       	ror	r18
     c26:	36 95       	lsr	r19
     c28:	27 95       	ror	r18
     c2a:	36 95       	lsr	r19
     c2c:	27 95       	ror	r18
    secondaryAverage /= ADC_SAMPLES;
     c2e:	ac 01       	movw	r20, r24
     c30:	56 95       	lsr	r21
     c32:	47 95       	ror	r20
     c34:	56 95       	lsr	r21
     c36:	47 95       	ror	r20
     c38:	56 95       	lsr	r21
     c3a:	47 95       	ror	r20

    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values
     c3c:	b9 01       	movw	r22, r18
     c3e:	64 1b       	sub	r22, r20
     c40:	75 0b       	sbc	r23, r21
     c42:	cb 01       	movw	r24, r22
     c44:	99 23       	and	r25, r25
     c46:	24 f4       	brge	.+8      	; 0xc50 <INPUT_read_brakePedal+0xaa>
     c48:	88 27       	eor	r24, r24
     c4a:	99 27       	eor	r25, r25
     c4c:	86 1b       	sub	r24, r22
     c4e:	97 0b       	sbc	r25, r23
     c50:	fc 01       	movw	r30, r24

    *brake = primaryAverage; 
     c52:	39 83       	std	Y+1, r19	; 0x01
     c54:	28 83       	st	Y, r18


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c56:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <INPUT_ADC_ERROR>
     c5a:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <INPUT_ADC_ERROR+0x1>
     c5e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <INPUT_PEDAL_BRAKE_CH1_LOW>
     c62:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     c66:	86 1b       	sub	r24, r22
     c68:	97 0b       	sbc	r25, r23
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	58 f0       	brcs	.+22     	; 0xc86 <INPUT_read_brakePedal+0xe0>
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
     c70:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     c74:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     c78:	86 0f       	add	r24, r22
     c7a:	97 1f       	adc	r25, r23
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	20 f4       	brcc	.+8      	; 0xc8a <INPUT_read_brakePedal+0xe4>
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <INPUT_read_brakePedal+0xe6>
    uint16_t delta = abs(primaryAverage - secondaryAverage); // Calculate the difference between the two values

    *brake = primaryAverage; 


	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <INPUT_read_brakePedal+0xe6>
    //TODO: Fill buffers with int reads values
    static uint16_t primaryHistory[10];
    static uint16_t secondaryHistory[10];
    static uint8_t historyIndex = 0;

	uint8_t returnState = 0;
     c8a:	80 e0       	ldi	r24, 0x00	; 0

	if(primaryAverage < (INPUT_PEDAL_BRAKE_CH1_LOW - INPUT_ADC_ERROR)) returnState |= 1;
	
	else if(primaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 2;
	
	if(secondaryAverage < (INPUT_PEDAL_BRAKE_CH2_LOW - INPUT_ADC_ERROR)) returnState |= 4;
     c8c:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <INPUT_PEDAL_BRAKE_CH2_LOW>
     c90:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <INPUT_PEDAL_BRAKE_CH2_LOW+0x1>
     c94:	26 1b       	sub	r18, r22
     c96:	37 0b       	sbc	r19, r23
     c98:	42 17       	cp	r20, r18
     c9a:	53 07       	cpc	r21, r19
     c9c:	10 f4       	brcc	.+4      	; 0xca2 <INPUT_read_brakePedal+0xfc>
     c9e:	84 60       	ori	r24, 0x04	; 4
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <INPUT_read_brakePedal+0x110>
	
	else if(secondaryAverage > (INPUT_PEDAL_BRAKE_CH1_HIGH + INPUT_ADC_ERROR)) returnState |= 8;
     ca2:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     ca6:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     caa:	62 0f       	add	r22, r18
     cac:	73 1f       	adc	r23, r19
     cae:	64 17       	cp	r22, r20
     cb0:	75 07       	cpc	r23, r21
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <INPUT_read_brakePedal+0x110>
     cb4:	88 60       	ori	r24, 0x08	; 8

	// Verify if the difference between sensors is within acceptable values
	if(delta < INPUT_PEDAL_DELTA_THRESH_L || delta > INPUT_PEDAL_DELTA_THRESH_H) { returnState |= 16; }  
     cb6:	20 91 4f 09 	lds	r18, 0x094F	; 0x80094f <INPUT_PEDAL_DELTA_THRESH_L>
     cba:	30 91 50 09 	lds	r19, 0x0950	; 0x800950 <INPUT_PEDAL_DELTA_THRESH_L+0x1>
     cbe:	e2 17       	cp	r30, r18
     cc0:	f3 07       	cpc	r31, r19
     cc2:	38 f0       	brcs	.+14     	; 0xcd2 <INPUT_read_brakePedal+0x12c>
     cc4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <INPUT_PEDAL_DELTA_THRESH_H>
     cc8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <INPUT_PEDAL_DELTA_THRESH_H+0x1>
     ccc:	2e 17       	cp	r18, r30
     cce:	3f 07       	cpc	r19, r31
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <INPUT_read_brakePedal+0x12e>
     cd2:	80 61       	ori	r24, 0x10	; 16
		
	return returnState;
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <INPUT_get_brakePedal>:
            break;
    }
    return state; // Pass up state of read for process and logic use
}

uint8_t INPUT_get_brakePedal(uint8_t *val) {
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 d0       	rcall	.+0      	; 0xcea <INPUT_get_brakePedal+0xc>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	7c 01       	movw	r14, r24
    // Get Value
    uint16_t rawValue = 0;
     cf0:	1a 82       	std	Y+2, r1	; 0x02
     cf2:	19 82       	std	Y+1, r1	; 0x01
    uint8_t state = INPUT_read_brakePedal(&rawValue);
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	56 df       	rcall	.-340    	; 0xba6 <INPUT_read_brakePedal>
     cfa:	18 2f       	mov	r17, r24
    // Convert Value
    *val = INPUT_scaleInput(
     cfc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <INPUT_PEDAL_BRAKE_CH1_LOW>
     d00:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <INPUT_PEDAL_BRAKE_CH1_LOW+0x1>
     d04:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <INPUT_PEDAL_BRAKE_CH1_HIGH>
     d08:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <INPUT_PEDAL_BRAKE_CH1_HIGH+0x1>
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	55 de       	rcall	.-854    	; 0x9bc <INPUT_scaleInput>
     d12:	f7 01       	movw	r30, r14
     d14:	80 83       	st	Z, r24
        &rawValue,
        INPUT_PEDAL_BRAKE_CH1_HIGH,
        INPUT_PEDAL_BRAKE_CH1_LOW
    );
    // Error States
    switch (state) {
     d16:	12 30       	cpi	r17, 0x02	; 2
     d18:	51 f0       	breq	.+20     	; 0xd2e <INPUT_get_brakePedal+0x50>
     d1a:	13 30       	cpi	r17, 0x03	; 3
     d1c:	71 f0       	breq	.+28     	; 0xd3a <INPUT_get_brakePedal+0x5c>
     d1e:	11 30       	cpi	r17, 0x01	; 1
     d20:	89 f4       	brne	.+34     	; 0xd44 <INPUT_get_brakePedal+0x66>
        case 1: // Inputs were too low
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_LOW);
     d22:	69 e0       	ldi	r22, 0x09	; 9
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	df dd       	rcall	.-1090   	; 0x8ea <throw_error_code>
            break;
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <INPUT_get_brakePedal+0x66>
        case 2: // Inputs were too high
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION_HIGH);
     d2e:	6a e0       	ldi	r22, 0x0A	; 10
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	d9 dd       	rcall	.-1102   	; 0x8ea <throw_error_code>
            break;
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <INPUT_get_brakePedal+0x66>
        case 3: // Delta was found to be in failure
            throw_error_code(ERROR_LEVEL_WARN, ERROR_BRAKES_POSITION);
     d3a:	6b e0       	ldi	r22, 0x0B	; 11
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	d3 dd       	rcall	.-1114   	; 0x8ea <throw_error_code>
        default:
            // Do nothing
            break;
    }
    return state; // Pass up state of read for process and logic use
}
     d44:	81 2f       	mov	r24, r17
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <led_toggle>:
 * 
 * Reference: ATmega Datasheet Chapter 13 (I/O-Ports)
 **/
void led_toggle(void)
{
    PORTK ^= 0b00100000;
     d56:	e8 e0       	ldi	r30, 0x08	; 8
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	90 81       	ld	r25, Z
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	89 27       	eor	r24, r25
     d60:	80 83       	st	Z, r24
     d62:	08 95       	ret

00000d64 <UART_sendPacket>:
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
           
    UART_sendPacket(testPacketArray, 4);
}

void UART_sendPacket(uint8_t outgoingString[], uint8_t length) {
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	8c 01       	movw	r16, r24
     d70:	f6 2e       	mov	r15, r22
    //uint8_t *ptr = outgoingString;
	
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
     d72:	84 e4       	ldi	r24, 0x44	; 68
     d74:	1e d5       	rcall	.+2620   	; 0x17b2 <uart_putc>
	int i = 0;
    for(i = 0; i < length; i++) {
     d76:	ff 20       	and	r15, r15
     d78:	41 f0       	breq	.+16     	; 0xd8a <UART_sendPacket+0x26>
     d7a:	e8 01       	movw	r28, r16
     d7c:	0f 0d       	add	r16, r15
     d7e:	11 1d       	adc	r17, r1
        uart_putc(outgoingString[i]);
     d80:	89 91       	ld	r24, Y+
     d82:	17 d5       	rcall	.+2606   	; 0x17b2 <uart_putc>
	//int testADC = a2d_10bitCh(5);
	//char  testString[5];
	//itoa(testADC, testString, 10);
	uart_putc('D');
	int i = 0;
    for(i = 0; i < length; i++) {
     d84:	c0 17       	cp	r28, r16
     d86:	d1 07       	cpc	r29, r17
        uart_putc(outgoingString[i]);
    }
	uart_putc('\r');
     d88:	d9 f7       	brne	.-10     	; 0xd80 <UART_sendPacket+0x1c>
     d8a:	8d e0       	ldi	r24, 0x0D	; 13
	uart_putc('\n');
     d8c:	12 d5       	rcall	.+2596   	; 0x17b2 <uart_putc>
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	10 d5       	rcall	.+2592   	; 0x17b2 <uart_putc>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	08 95       	ret

00000d9e <UART_formTestPacket>:
// 	}
	
// 	for (int i = 0; i < 32; i++) uart1_putc(outgoingString[i]);
// }

void UART_formTestPacket(void) {
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	00 d0       	rcall	.+0      	; 0xda4 <UART_formTestPacket+0x6>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <UART_formTestPacket+0x8>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t fakeThrottle = 0;
	
	if(fakeThrottle++ > 100)fakeThrottle = 0;
     daa:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <fakeThrottle.2439>
     dae:	85 36       	cpi	r24, 0x65	; 101
     db0:	20 f4       	brcc	.+8      	; 0xdba <UART_formTestPacket+0x1c>
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <fakeThrottle.2439>
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <UART_formTestPacket+0x20>
     dba:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <fakeThrottle.2439>
    uint8_t testPacketArray[4];
    testPacketArray[0] = (ignitionState) | (armedState << 1) | (shutdownState << 2); // Button states - 1
     dbe:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <armedState>
     dc2:	98 2f       	mov	r25, r24
     dc4:	99 0f       	add	r25, r25
     dc6:	80 91 98 09 	lds	r24, 0x0998	; 0x800998 <shutdownState>
     dca:	88 0f       	add	r24, r24
     dcc:	88 0f       	add	r24, r24
     dce:	89 2b       	or	r24, r25
     dd0:	90 91 9a 09 	lds	r25, 0x099A	; 0x80099a <ignitionState>
     dd4:	89 2b       	or	r24, r25
     dd6:	89 83       	std	Y+1, r24	; 0x01
    testPacketArray[1] = INPUT_accelerationPedal;   // Throttle Pedal Percentage - 1
     dd8:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <INPUT_accelerationPedal>
     ddc:	8a 83       	std	Y+2, r24	; 0x02
    testPacketArray[2] = INPUT_brakePedal;          // Brake Pedal Percentage - 1
     dde:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <INPUT_brakePedal>
     de2:	8b 83       	std	Y+3, r24	; 0x03
    testPacketArray[3] = INPUT_steeringAngle;       // Steering Angle - 1   -> RADIAN(x -> -0.99 < 0 < 0.99) * 100 + 100
     de4:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <INPUT_steeringAngle>
     de8:	8c 83       	std	Y+4, r24	; 0x04
           
    UART_sendPacket(testPacketArray, 4);
     dea:	64 e0       	ldi	r22, 0x04	; 4
     dec:	ce 01       	movw	r24, r28
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	b9 df       	rcall	.-142    	; 0xd64 <UART_sendPacket>
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <uart_parse_input>:
 * Returns: none
 * 
 * 
 **/
void uart_parse_input(unsigned char* s)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
 * 
 * 
 **/
void uart_parse_poke(unsigned char* s)
{
	PDMarray[0] = s[0];
     e06:	88 81       	ld	r24, Y
     e08:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <PDMarray>
 **/
void uart_parse_input(unsigned char* s)
{
	uart_parse_poke(s);
	//uart1_putc('D');				// reply with the header byte (preserved - 33 bytes should follow)
	UART_formTestPacket();
     e0c:	c8 df       	rcall	.-112    	; 0xd9e <UART_formTestPacket>

	s[0] = '\0';					// clear the header byte
     e0e:	18 82       	st	Y, r1
}
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <uart_process_byte>:
	
	static unsigned char count = 0;
	static unsigned char incomingString[48];							//made bigger to accommodate PT packets
	static unsigned char stringActive = 0;
	
	if(data == 'D')
     e16:	84 34       	cpi	r24, 0x44	; 68
     e18:	21 f4       	brne	.+8      	; 0xe22 <uart_process_byte+0xc>
	{
		stringActive = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <stringActive.2429>
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <uart_process_byte+0x26>
	}
	
	else if(stringActive == 1)
     e22:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <stringActive.2429>
     e26:	91 30       	cpi	r25, 0x01	; 1
     e28:	49 f4       	brne	.+18     	; 0xe3c <uart_process_byte+0x26>
	{
		incomingString[count++] = data;
     e2a:	e0 91 82 09 	lds	r30, 0x0982	; 0x800982 <count.2427>
     e2e:	9e 0f       	add	r25, r30
     e30:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <count.2427>
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ee 5a       	subi	r30, 0xAE	; 174
     e38:	f6 4f       	sbci	r31, 0xF6	; 246
     e3a:	80 83       	st	Z, r24
	}
	
	if(count > 8)
     e3c:	e0 91 82 09 	lds	r30, 0x0982	; 0x800982 <count.2427>
     e40:	e9 30       	cpi	r30, 0x09	; 9
     e42:	58 f0       	brcs	.+22     	; 0xe5a <uart_process_byte+0x44>
	{
		incomingString[count - 1] = '\0';
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ef 5a       	subi	r30, 0xAF	; 175
     e48:	f6 4f       	sbci	r31, 0xF6	; 246
     e4a:	10 82       	st	Z, r1
		count = 0;
     e4c:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <count.2427>
		stringActive = 0;
     e50:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <stringActive.2429>
		uart_parse_input(incomingString);
     e54:	82 e5       	ldi	r24, 0x52	; 82
     e56:	99 e0       	ldi	r25, 0x09	; 9
     e58:	d3 cf       	rjmp	.-90     	; 0xe00 <uart_parse_input>
     e5a:	08 95       	ret

00000e5c <main>:
volatile uint8_t out = 0;

int main(void) {    

    // Set Up
    firmware_init();
     e5c:	7f dd       	rcall	.-1282   	; 0x95c <firmware_init>
    timer_init();
     e5e:	92 dd       	rcall	.-1244   	; 0x984 <timer_init>
     e60:	10 92 98 09 	sts	0x0998, r1	; 0x800998 <shutdownState>

    // Grab the state of the shutdown circuity
    shutdownState = 0;
     e64:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e66:	89 e6       	ldi	r24, 0x69	; 105
     e68:	98 e1       	ldi	r25, 0x18	; 24
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <main+0xe>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <main+0x18>
     e74:	00 00       	nop
	_delay_ms(500);
    // Enable Interupts
    sei();					
     e76:	78 94       	sei
    // Main Poll
    // ------------------------------------------------------------------------
    while(1) {
		
		if(isCharAvailable() == 1)uart_process_byte(receiveChar());
     e78:	ef d4       	rcall	.+2526   	; 0x1858 <isCharAvailable>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	11 f4       	brne	.+4      	; 0xe82 <main+0x26>
     e7e:	f2 d4       	rcall	.+2532   	; 0x1864 <receiveChar>
     e80:	ca df       	rcall	.-108    	; 0xe16 <uart_process_byte>
		uart1_puts("Hello World!\n");
     e82:	8c ee       	ldi	r24, 0xEC	; 236
     e84:	98 e0       	ldi	r25, 0x08	; 8
     e86:	da d4       	rcall	.+2484   	; 0x183c <uart1_puts>
     e88:	f7 cf       	rjmp	.-18     	; 0xe78 <main+0x1c>

00000e8a <oneKHzTimer>:
	}
     e8a:	0f 93       	push	r16

/**
 * @brief Core system's timer, 1ms, core of the pseudo RTOS system
 */
void oneKHzTimer(void)
{
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	1f 92       	push	r1
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
    // static uint8_t InputTempCount = 5;					// Number of iterations for the temp heartbeat trigger

    // static uint8_t CANInputSendTime = 0;					// Number of iterations for the input send trigger

	// flash the LED to show the system is running
	if(test_counter++ > 100)
     e98:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <test_counter.2494>
     e9c:	90 91 87 09 	lds	r25, 0x0987	; 0x800987 <test_counter.2494+0x1>
     ea0:	85 36       	cpi	r24, 0x65	; 101
     ea2:	91 05       	cpc	r25, r1
     ea4:	34 f4       	brge	.+12     	; 0xeb2 <oneKHzTimer+0x28>
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <test_counter.2494+0x1>
     eac:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <test_counter.2494>
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <oneKHzTimer+0x30>
	{
		//PORTK ^= 32;
		test_counter = 0;
     eb2:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <test_counter.2494+0x1>
     eb6:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <test_counter.2494>
	
	
    // Check the ignition button state
    // 1s debounce, IE hold for 50ms and if held, change state
    // ------------------------------------------------------------------------
	if(!(PINJ & (1<<PJ6))) // Checking Pin J6 (69)
     eba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7e0103>
     ebe:	86 fd       	sbrc	r24, 6
     ec0:	1e c0       	rjmp	.+60     	; 0xefe <oneKHzTimer+0x74>
    {
        ignitionState = 1; // Tracks that the ignition button is on
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <ignitionState>
        if(ignitionStateDebounceCount++ > 2000) // If 1s has been counted
     ec8:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <ignitionStateDebounceCount>
     ecc:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <ignitionStateDebounceCount+0x1>
     ed0:	9c 01       	movw	r18, r24
     ed2:	2f 5f       	subi	r18, 0xFF	; 255
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	30 93 9d 09 	sts	0x099D, r19	; 0x80099d <ignitionStateDebounceCount+0x1>
     eda:	20 93 9c 09 	sts	0x099C, r18	; 0x80099c <ignitionStateDebounceCount>
     ede:	81 3d       	cpi	r24, 0xD1	; 209
     ee0:	97 40       	sbci	r25, 0x07	; 7
     ee2:	a8 f0       	brcs	.+42     	; 0xf0e <oneKHzTimer+0x84>
		{
            //If this is the first time though from a previous press
            if(ignitionStateLock == 0) {
     ee4:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <ignitionStateLock>
     ee8:	81 11       	cpse	r24, r1
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <oneKHzTimer+0x84>
                ignitionStateLock = 1;		// Disabled first run though after press
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <ignitionStateLock>
                armedState ^= 1;
     ef2:	90 91 99 09 	lds	r25, 0x0999	; 0x800999 <armedState>
     ef6:	89 27       	eor	r24, r25
     ef8:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <armedState>
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <oneKHzTimer+0x84>
            }
        }
    }
    else {
        ignitionState = 0; // Tracks that the ignition button is off
     efe:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <ignitionState>
        ignitionStateLock = 0; // Re-enables the first run though after the timer has been reached
     f02:	10 92 9b 09 	sts	0x099B, r1	; 0x80099b <ignitionStateLock>
        ignitionStateDebounceCount = 0; // Resets the counter for time the button is pressed
     f06:	10 92 9d 09 	sts	0x099D, r1	; 0x80099d <ignitionStateDebounceCount+0x1>
     f0a:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <ignitionStateDebounceCount>
     //Send CAN heartbeats -> Inverters: 100Hz, Data: 100Hz, Power: 20Hz
     //100Hz = 1 / 100 = 0.01s = 10ms, 20Hz = 1 / 20 = 0.05s = 50ms
     //------------------------------------------------------------------------
    
	
	 inverterArray[0] = INPUT_accelerationPedal;
     f0e:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <INPUT_accelerationPedal>
     f12:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <inverterArray>
	 if(CANheartbeatCountInverters >= CAN_HEARTBEAT_TIME_INVERTERS)
     f16:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <CANheartbeatCountInverters.2495>
     f1a:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <CANheartbeatCountInverters.2495+0x1>
     f1e:	0a 97       	sbiw	r24, 0x0a	; 10
     f20:	68 f0       	brcs	.+26     	; 0xf3c <oneKHzTimer+0xb2>
	 {
		 // Reset inverter heartbeat counter
		 CANheartbeatCountInverters = 0;
     f22:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <CANheartbeatCountInverters.2495+0x1>
     f26:	10 92 84 09 	sts	0x0984, r1	; 0x800984 <CANheartbeatCountInverters.2495>
		 // Send inverter system heartbeat
		 CAN_send(TRACTIVE_CAN, 8, inverterArray, 0b0100100000000000000000000011110);
     f2a:	0e e1       	ldi	r16, 0x1E	; 30
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	34 e2       	ldi	r19, 0x24	; 36
     f32:	40 e9       	ldi	r20, 0x90	; 144
     f34:	59 e0       	ldi	r21, 0x09	; 9
     f36:	68 e0       	ldi	r22, 0x08	; 8
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	d3 d9       	rcall	.-3162   	; 0x2e2 <CAN_send>
	 }
	 
	 if(CANheartbeatCountWheel > CAN_HEARTBEAT_TIME_WHEEL)
     f3c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountWheel.2496>
     f40:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     f44:	c3 97       	sbiw	r24, 0x33	; 51
     f46:	20 f0       	brcs	.+8      	; 0xf50 <oneKHzTimer+0xc6>
	 {
		 // Reset data heartbeat counter
		 CANheartbeatCountWheel = 0;
     f48:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     f4c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <CANheartbeatCountWheel.2496>
		 // Send data system heartbeat
		 //CAN_send(DATA_CAN, 8, WheelArray, HEARTBEAT_WHEEL_ID | 1);
		 
	 }
	 
	 if(CANheartbeatCountPDM > CAN_HEARTBEAT_TIME_PDM)
     f50:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CANheartbeatCountPDM.2497>
     f54:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     f58:	c3 97       	sbiw	r24, 0x33	; 51
     f5a:	b8 f0       	brcs	.+46     	; 0xf8a <oneKHzTimer+0x100>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountPDM = 0;
     f5c:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     f60:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <CANheartbeatCountPDM.2497>
		 // Send power system heartbeat
		 if(armedState == 1)
     f64:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <armedState>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	21 f4       	brne	.+8      	; 0xf74 <oneKHzTimer+0xea>
		 {
			PDMarray[0] |= 255; //192
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <PDMarray>
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <oneKHzTimer+0xee>
		 }
		 else
		 {
			PDMarray[0] &= ~255;
     f74:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <PDMarray>
		 }
		 CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_PDM_ID | 1);
     f78:	01 e0       	ldi	r16, 0x01	; 1
     f7a:	10 e0       	ldi	r17, 0x00	; 0
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	39 e0       	ldi	r19, 0x09	; 9
     f80:	48 e8       	ldi	r20, 0x88	; 136
     f82:	59 e0       	ldi	r21, 0x09	; 9
     f84:	68 e0       	ldi	r22, 0x08	; 8
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	ac d9       	rcall	.-3240   	; 0x2e2 <CAN_send>
	 }
	 
	 if(CANheartbeatCountShutdown > CAN_HEARTBEAT_TIME_SHUTDOWN)
     f8a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <CANheartbeatCountShutdown.2498>
     f8e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     f92:	85 36       	cpi	r24, 0x65	; 101
     f94:	91 05       	cpc	r25, r1
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <oneKHzTimer+0x116>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountShutdown = 0;
     f98:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     f9c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <CANheartbeatCountShutdown.2498>
		 // Send shutdown heartbeat (dont care what for now)
		 //CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_SHUTDOWN_ID | 1);
	 }
	 
	 if(CANheartbeatCountAMU > CAN_HEARTBEAT_TIME_AMU)
     fa0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CANheartbeatCountAMU.2499>
     fa4:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
     fa8:	c3 97       	sbiw	r24, 0x33	; 51
     faa:	20 f0       	brcs	.+8      	; 0xfb4 <oneKHzTimer+0x12a>
	 {
		 // Reset power heartbeat counter
		 CANheartbeatCountAMU = 0;
     fac:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
     fb0:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <CANheartbeatCountAMU.2499>
		 // Send shutdown heartbeat (dont care what for now)
		 //CAN_send(POWER_CAN, 8, PDMarray, HEARTBEAT_AMU_ID | 1);
	 }
	 
	 CANheartbeatCountInverters++;
     fb4:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <CANheartbeatCountInverters.2495>
     fb8:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <CANheartbeatCountInverters.2495+0x1>
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <CANheartbeatCountInverters.2495+0x1>
     fc2:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <CANheartbeatCountInverters.2495>
	 CANheartbeatCountWheel++;
     fc6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <CANheartbeatCountWheel.2496>
     fca:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <CANheartbeatCountWheel.2496+0x1>
     fd4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <CANheartbeatCountWheel.2496>
	 CANheartbeatCountPDM++;
     fd8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CANheartbeatCountPDM.2497>
     fdc:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <CANheartbeatCountPDM.2497+0x1>
     fe6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <CANheartbeatCountPDM.2497>
	 CANheartbeatCountShutdown++;
     fea:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <CANheartbeatCountShutdown.2498>
     fee:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <CANheartbeatCountShutdown.2498+0x1>
     ff8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <CANheartbeatCountShutdown.2498>
	 CANheartbeatCountAMU++;
     ffc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <CANheartbeatCountAMU.2499>
    1000:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <CANheartbeatCountAMU.2499+0x1>
    100a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <CANheartbeatCountAMU.2499>
    // CanHeartbeatErrorPower++;


    // Send CAN input
    uint8_t tmpInputVal;
    if(InputPedalThrottleCount > INPUT_TIME_PEDAL_THROTTLE)
    100e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <InputPedalThrottleCount.2500>
    1012:	8b 30       	cpi	r24, 0x0B	; 11
    1014:	50 f0       	brcs	.+20     	; 0x102a <oneKHzTimer+0x1a0>
    {
		//INPUT_accelerationPedal = a2d_10bitCh(5);

        if(INPUT_get_accelPedal(&tmpInputVal) == 0) {
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	89 dd       	rcall	.-1262   	; 0xb2e <INPUT_get_accelPedal>
    101c:	81 11       	cpse	r24, r1
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <oneKHzTimer+0x19c>
             INPUT_accelerationPedal = tmpInputVal;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <INPUT_accelerationPedal>
        }
        InputPedalThrottleCount = 0;
    1026:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <InputPedalThrottleCount.2500>
    }

    if(InputPedalBrakeCount > INPUT_TIME_PEDAL_BRAKE)
    102a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <InputPedalBrakeCount.2501>
    102e:	8b 30       	cpi	r24, 0x0B	; 11
    {
        //INPUT_brakePedal = (uint8_t)(a2d_10bitCh(8)/4);
        if(INPUT_get_brakePedal(&tmpInputVal) == 0) {
    1030:	50 f0       	brcs	.+20     	; 0x1046 <oneKHzTimer+0x1bc>
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	53 de       	rcall	.-858    	; 0xcde <INPUT_get_brakePedal>
    1038:	81 11       	cpse	r24, r1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <oneKHzTimer+0x1b8>
             INPUT_brakePedal = tmpInputVal;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <INPUT_brakePedal>
		}
		
        InputPedalBrakeCount = 0;
    1042:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <InputPedalBrakeCount.2501>
    }
	
	if(InputSteeringCount > INPUT_TIME_STEERING)
    1046:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <InputSteeringCount.2502>
    104a:	8b 30       	cpi	r24, 0x0B	; 11
	{
		INPUT_steeringAngle = (uint8_t)(a2d_8bitCh(INPUT_STEERING_ANGLE_CH));
    104c:	30 f0       	brcs	.+12     	; 0x105a <oneKHzTimer+0x1d0>
    104e:	84 e0       	ldi	r24, 0x04	; 4
    1050:	42 d9       	rcall	.-3452   	; 0x2d6 <a2d_8bitCh>
    1052:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <INPUT_steeringAngle>
		//if(INPUT_get_steeringWheel(&tmpInputVal) == 0) {
			//INPUT_steeringAngle = tmpInputVal;
		//}
		
		InputSteeringCount = 0;
    1056:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <InputSteeringCount.2502>
	}
	
    InputPedalThrottleCount++;
    105a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <InputPedalThrottleCount.2500>
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <InputPedalThrottleCount.2500>
    InputPedalBrakeCount++;
    1064:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <InputPedalBrakeCount.2501>
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <InputPedalBrakeCount.2501>
	InputSteeringCount++;
    106e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <InputSteeringCount.2502>
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <InputSteeringCount.2502>
    
	
	inverterArray[0] = INPUT_accelerationPedal;
    1078:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <INPUT_accelerationPedal>
    107c:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <inverterArray>
	WheelArray[1] = INPUT_accelerationPedal;
    1080:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <WheelArray+0x1>
    // }
    // if(INPUT_get_brakePressureFront(&tmpInputVal) == 0) {
    //     INPUT_brakePressureFront = tmpInputVal;
    // }
	
}
    1084:	0f 90       	pop	r0
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <__vector_21>:

/**
 * @brief Called whenever the 1Khz timer triggers
 */
ISR(TIMER0_COMPA_vect)
{
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	0b b6       	in	r0, 0x3b	; 59
    109c:	0f 92       	push	r0
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
    oneKHzTimer();
    10b6:	e9 de       	rcall	.-558    	; 0xe8a <oneKHzTimer>
	//uart_puts("HelloWorld!");
	//char msg[12];
	//sprintf(msg, "r: %d", out);
	//uart_puts(msg);
}
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	0b be       	out	0x3b, r0	; 59
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1

}
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_2>:

/**
 * @brief Called whenever CANBUS 1 interupt is triggered
 *        * When ever there is data waiting in CAN 1
 */
ISR(INT1_vect) {
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	0b b6       	in	r0, 0x3b	; 59
    10fe:	0f 92       	push	r0
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	2d 97       	sbiw	r28, 0x0d	; 13
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	cd bf       	out	0x3d, r28	; 61
	// Details about the message we're attempting to pull from the CAN bus
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	led_toggle();
    1126:	17 de       	rcall	.-978    	; 0xd56 <led_toggle>
	// Get the data from the CAN bus and process it
	CAN_pull_packet(TRACTIVE_CAN, &numBytes, data, &ID);
    1128:	9e 01       	movw	r18, r28
    112a:	27 5f       	subi	r18, 0xF7	; 247
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	ae 01       	movw	r20, r28
    1130:	4f 5f       	subi	r20, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	be 01       	movw	r22, r28
    1136:	63 5f       	subi	r22, 0xF3	; 243
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	fa d8       	rcall	.-3596   	; 0x332 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_1_RESPONSE_MALFORMED);
	//out++;
}
    113e:	2d 96       	adiw	r28, 0x0d	; 13
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	bf 91       	pop	r27
    1154:	af 91       	pop	r26
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	7f 91       	pop	r23
    115c:	6f 91       	pop	r22
    115e:	5f 91       	pop	r21
    1160:	4f 91       	pop	r20
    1162:	3f 91       	pop	r19
    1164:	2f 91       	pop	r18
    1166:	0f 90       	pop	r0
    1168:	0b be       	out	0x3b, r0	; 59
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_1>:

/**
 * @brief Called whenever CANBUS 2 interupt is triggered
 *        * When ever there is data waiting in CAN 2
 */
ISR(INT0_vect)	{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	0b b6       	in	r0, 0x3b	; 59
    1180:	0f 92       	push	r0
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2d 97       	sbiw	r28, 0x0d	; 13
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;
	//led_toggle();
	// Get the data from the CAN bus and process it
	CAN_pull_packet(POWER_CAN, &numBytes, data, &ID);
    11a8:	9e 01       	movw	r18, r28
    11aa:	27 5f       	subi	r18, 0xF7	; 247
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	ae 01       	movw	r20, r28
    11b0:	4f 5f       	subi	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	be 01       	movw	r22, r28
    11b6:	63 5f       	subi	r22, 0xF3	; 243
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	ba d8       	rcall	.-3724   	; 0x332 <CAN_pull_packet>

    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_2_RESPONSE_MALFORMED);
		
}
    11be:	2d 96       	adiw	r28, 0x0d	; 13
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_9>:

/**
 * @brief Called whenever CANBUS 3 interupt is triggered
 *        * When ever there is data waiting in CAN 3
 */
ISR(PCINT0_vect) {
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	0b b6       	in	r0, 0x3b	; 59
    1200:	0f 92       	push	r0
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	2d 97       	sbiw	r28, 0x0d	; 13
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[8];
	uint32_t ID;
	uint8_t numBytes;

	// Get the data from the CAN bus and process it
	CAN_pull_packet(DATA_CAN, &numBytes, data, &ID);
    1228:	9e 01       	movw	r18, r28
    122a:	27 5f       	subi	r18, 0xF7	; 247
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	ae 01       	movw	r20, r28
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	be 01       	movw	r22, r28
    1236:	63 5f       	subi	r22, 0xF3	; 243
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	84 e0       	ldi	r24, 0x04	; 4
    123c:	7a d8       	rcall	.-3852   	; 0x332 <CAN_pull_packet>
    // If the data packet is crap
    // throw_error_code(ERROR_LEVEL_WARN, ERROR_CANBUS_3_RESPONSE_MALFORMED);

	

    123e:	2d 96       	adiw	r28, 0x0d	; 13
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0b be       	out	0x3b, r0	; 59
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <MCP2515_CS_low>:
			MCP2515_reg_write(CANbus, MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(CANbus, MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
}
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	51 f0       	breq	.+20     	; 0x128c <MCP2515_CS_low+0x18>
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	71 f0       	breq	.+28     	; 0x1298 <MCP2515_CS_low+0x24>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	69 f4       	brne	.+26     	; 0x129a <MCP2515_CS_low+0x26>
    1280:	e2 e0       	ldi	r30, 0x02	; 2
    1282:	f1 e0       	ldi	r31, 0x01	; 1
    1284:	80 81       	ld	r24, Z
    1286:	8e 7f       	andi	r24, 0xFE	; 254
    1288:	80 83       	st	Z, r24
    128a:	08 95       	ret
    128c:	e2 e0       	ldi	r30, 0x02	; 2
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	80 81       	ld	r24, Z
    1292:	8d 7f       	andi	r24, 0xFD	; 253
    1294:	80 83       	st	Z, r24
    1296:	08 95       	ret
    1298:	28 98       	cbi	0x05, 0	; 5
    129a:	08 95       	ret

0000129c <MCP2515_CS_high>:
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	51 f0       	breq	.+20     	; 0x12b4 <MCP2515_CS_high+0x18>
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <MCP2515_CS_high+0x24>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <MCP2515_CS_high+0x26>
    12a8:	e2 e0       	ldi	r30, 0x02	; 2
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	80 83       	st	Z, r24
    12b2:	08 95       	ret
    12b4:	e2 e0       	ldi	r30, 0x02	; 2
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	80 81       	ld	r24, Z
    12ba:	82 60       	ori	r24, 0x02	; 2
    12bc:	80 83       	st	Z, r24
    12be:	08 95       	ret
    12c0:	28 9a       	sbi	0x05, 0	; 5
    12c2:	08 95       	ret

000012c4 <MCP2515_reg_write>:
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	c8 2f       	mov	r28, r24
    12cc:	16 2f       	mov	r17, r22
    12ce:	d4 2f       	mov	r29, r20
    12d0:	d1 df       	rcall	.-94     	; 0x1274 <MCP2515_CS_low>
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	8c d1       	rcall	.+792    	; 0x15ee <SPI_send_byte>
    12d6:	81 2f       	mov	r24, r17
    12d8:	8a d1       	rcall	.+788    	; 0x15ee <SPI_send_byte>
    12da:	8d 2f       	mov	r24, r29
    12dc:	88 d1       	rcall	.+784    	; 0x15ee <SPI_send_byte>
    12de:	8c 2f       	mov	r24, r28
    12e0:	dd df       	rcall	.-70     	; 0x129c <MCP2515_CS_high>
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	08 95       	ret

000012ea <MCP2515_instruction>:
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	c8 2f       	mov	r28, r24
    12f0:	d6 2f       	mov	r29, r22
    12f2:	c0 df       	rcall	.-128    	; 0x1274 <MCP2515_CS_low>
    12f4:	8d 2f       	mov	r24, r29
    12f6:	7b d1       	rcall	.+758    	; 0x15ee <SPI_send_byte>
    12f8:	8c 2f       	mov	r24, r28
    12fa:	d0 df       	rcall	.-96     	; 0x129c <MCP2515_CS_high>
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <MCP2515_bit_modify>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	c8 2f       	mov	r28, r24
    130c:	06 2f       	mov	r16, r22
    130e:	d4 2f       	mov	r29, r20
    1310:	12 2f       	mov	r17, r18
    1312:	b0 df       	rcall	.-160    	; 0x1274 <MCP2515_CS_low>
    1314:	85 e0       	ldi	r24, 0x05	; 5
    1316:	6b d1       	rcall	.+726    	; 0x15ee <SPI_send_byte>
    1318:	80 2f       	mov	r24, r16
    131a:	69 d1       	rcall	.+722    	; 0x15ee <SPI_send_byte>
    131c:	81 2f       	mov	r24, r17
    131e:	67 d1       	rcall	.+718    	; 0x15ee <SPI_send_byte>
    1320:	8d 2f       	mov	r24, r29
    1322:	65 d1       	rcall	.+714    	; 0x15ee <SPI_send_byte>
    1324:	8c 2f       	mov	r24, r28
    1326:	ba df       	rcall	.-140    	; 0x129c <MCP2515_CS_high>
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <MCP2515_init>:
    1332:	cf 93       	push	r28
    1334:	c8 2f       	mov	r28, r24
    1336:	60 ec       	ldi	r22, 0xC0	; 192
    1338:	d8 df       	rcall	.-80     	; 0x12ea <MCP2515_instruction>
    133a:	20 ee       	ldi	r18, 0xE0	; 224
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	6f e0       	ldi	r22, 0x0F	; 15
    1340:	8c 2f       	mov	r24, r28
    1342:	df df       	rcall	.-66     	; 0x1302 <MCP2515_bit_modify>
    1344:	44 e0       	ldi	r20, 0x04	; 4
    1346:	6a e2       	ldi	r22, 0x2A	; 42
    1348:	8c 2f       	mov	r24, r28
    134a:	bc df       	rcall	.-136    	; 0x12c4 <MCP2515_reg_write>
    134c:	4a ec       	ldi	r20, 0xCA	; 202
    134e:	69 e2       	ldi	r22, 0x29	; 41
    1350:	8c 2f       	mov	r24, r28
    1352:	b8 df       	rcall	.-144    	; 0x12c4 <MCP2515_reg_write>
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	68 e2       	ldi	r22, 0x28	; 40
    1358:	8c 2f       	mov	r24, r28
    135a:	b4 df       	rcall	.-152    	; 0x12c4 <MCP2515_reg_write>
    135c:	43 e0       	ldi	r20, 0x03	; 3
    135e:	6b e2       	ldi	r22, 0x2B	; 43
    1360:	8c 2f       	mov	r24, r28
    1362:	b0 df       	rcall	.-160    	; 0x12c4 <MCP2515_reg_write>
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	6d e0       	ldi	r22, 0x0D	; 13
    1368:	8c 2f       	mov	r24, r28
    136a:	ac df       	rcall	.-168    	; 0x12c4 <MCP2515_reg_write>
    136c:	28 ee       	ldi	r18, 0xE8	; 232
    136e:	48 e0       	ldi	r20, 0x08	; 8
    1370:	6f e0       	ldi	r22, 0x0F	; 15
    1372:	8c 2f       	mov	r24, r28
    1374:	c6 df       	rcall	.-116    	; 0x1302 <MCP2515_bit_modify>
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <MCP2515_PullCanPacket>:
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	2d 97       	sbiw	r28, 0x0d	; 13
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	78 2e       	mov	r7, r24
    13a6:	4a 01       	movw	r8, r20
    13a8:	59 01       	movw	r10, r18
    13aa:	61 37       	cpi	r22, 0x71	; 113
    13ac:	28 f4       	brcc	.+10     	; 0x13b8 <MCP2515_PullCanPacket+0x3e>
    13ae:	0f 2e       	mov	r0, r31
    13b0:	f0 e9       	ldi	r31, 0x90	; 144
    13b2:	ff 2e       	mov	r15, r31
    13b4:	f0 2d       	mov	r31, r0
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <MCP2515_PullCanPacket+0x46>
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f4 e9       	ldi	r31, 0x94	; 148
    13bc:	ff 2e       	mov	r15, r31
    13be:	f0 2d       	mov	r31, r0
    13c0:	87 2d       	mov	r24, r7
    13c2:	58 df       	rcall	.-336    	; 0x1274 <MCP2515_CS_low>
    13c4:	8f 2d       	mov	r24, r15
    13c6:	13 d1       	rcall	.+550    	; 0x15ee <SPI_send_byte>
    13c8:	ce 01       	movw	r24, r28
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	7c 01       	movw	r14, r24
    13ce:	6e 01       	movw	r12, r28
    13d0:	9e e0       	ldi	r25, 0x0E	; 14
    13d2:	c9 0e       	add	r12, r25
    13d4:	d1 1c       	adc	r13, r1
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0a d1       	rcall	.+532    	; 0x15ee <SPI_send_byte>
    13da:	f7 01       	movw	r30, r14
    13dc:	81 93       	st	Z+, r24
    13de:	7f 01       	movw	r14, r30
    13e0:	ec 15       	cp	r30, r12
    13e2:	fd 05       	cpc	r31, r13
    13e4:	c1 f7       	brne	.-16     	; 0x13d6 <MCP2515_PullCanPacket+0x5c>
    13e6:	2a 81       	ldd	r18, Y+2	; 0x02
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	07 2e       	mov	r0, r23
    13f2:	75 e1       	ldi	r23, 0x15	; 21
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	aa 1f       	adc	r26, r26
    13fa:	bb 1f       	adc	r27, r27
    13fc:	7a 95       	dec	r23
    13fe:	d1 f7       	brne	.-12     	; 0x13f4 <MCP2515_PullCanPacket+0x7a>
    1400:	70 2d       	mov	r23, r0
    1402:	3b 81       	ldd	r19, Y+3	; 0x03
    1404:	93 2b       	or	r25, r19
    1406:	3c 81       	ldd	r19, Y+4	; 0x04
    1408:	83 2b       	or	r24, r19
    140a:	42 2f       	mov	r20, r18
    140c:	40 7e       	andi	r20, 0xE0	; 224
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	03 2e       	mov	r0, r19
    1416:	3d e0       	ldi	r19, 0x0D	; 13
    1418:	44 0f       	add	r20, r20
    141a:	55 1f       	adc	r21, r21
    141c:	66 1f       	adc	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	3a 95       	dec	r19
    1422:	d1 f7       	brne	.-12     	; 0x1418 <MCP2515_PullCanPacket+0x9e>
    1424:	30 2d       	mov	r19, r0
    1426:	84 2b       	or	r24, r20
    1428:	95 2b       	or	r25, r21
    142a:	a6 2b       	or	r26, r22
    142c:	b7 2b       	or	r27, r23
    142e:	23 70       	andi	r18, 0x03	; 3
    1430:	a2 2b       	or	r26, r18
    1432:	f8 01       	movw	r30, r16
    1434:	80 83       	st	Z, r24
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	a2 83       	std	Z+2, r26	; 0x02
    143a:	b3 83       	std	Z+3, r27	; 0x03
    143c:	4d 85       	ldd	r20, Y+13	; 0x0d
    143e:	4f 70       	andi	r20, 0x0F	; 15
    1440:	f4 01       	movw	r30, r8
    1442:	40 83       	st	Z, r20
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	be 01       	movw	r22, r28
    1448:	6b 5f       	subi	r22, 0xFB	; 251
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	c5 01       	movw	r24, r10
    144e:	2a d2       	rcall	.+1108   	; 0x18a4 <memcpy>
    1450:	87 2d       	mov	r24, r7
    1452:	24 df       	rcall	.-440    	; 0x129c <MCP2515_CS_high>
    1454:	2d 96       	adiw	r28, 0x0d	; 13
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	9f 90       	pop	r9
    1476:	8f 90       	pop	r8
    1478:	7f 90       	pop	r7
    147a:	08 95       	ret

0000147c <MCP2515_reg_read>:
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	c8 2f       	mov	r28, r24
    1482:	d6 2f       	mov	r29, r22
    1484:	f7 de       	rcall	.-530    	; 0x1274 <MCP2515_CS_low>
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	b2 d0       	rcall	.+356    	; 0x15ee <SPI_send_byte>
    148a:	8d 2f       	mov	r24, r29
    148c:	b0 d0       	rcall	.+352    	; 0x15ee <SPI_send_byte>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	ae d0       	rcall	.+348    	; 0x15ee <SPI_send_byte>
    1492:	d8 2f       	mov	r29, r24
    1494:	8c 2f       	mov	r24, r28
    1496:	02 df       	rcall	.-508    	; 0x129c <MCP2515_CS_high>
    1498:	8d 2f       	mov	r24, r29
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <MCP2515_findFreeTxBuffer>:
    14a0:	cf 93       	push	r28
    14a2:	c8 2f       	mov	r28, r24
    14a4:	60 e3       	ldi	r22, 0x30	; 48
    14a6:	ea df       	rcall	.-44     	; 0x147c <MCP2515_reg_read>
    14a8:	83 ff       	sbrs	r24, 3
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <MCP2515_findFreeTxBuffer+0x24>
    14ac:	60 e4       	ldi	r22, 0x40	; 64
    14ae:	8c 2f       	mov	r24, r28
    14b0:	e5 df       	rcall	.-54     	; 0x147c <MCP2515_reg_read>
    14b2:	83 ff       	sbrs	r24, 3
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <MCP2515_findFreeTxBuffer+0x28>
    14b6:	60 e5       	ldi	r22, 0x50	; 80
    14b8:	8c 2f       	mov	r24, r28
    14ba:	e0 df       	rcall	.-64     	; 0x147c <MCP2515_reg_read>
    14bc:	83 ff       	sbrs	r24, 3
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <MCP2515_findFreeTxBuffer+0x2c>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <MCP2515_findFreeTxBuffer+0x2e>
    14c4:	80 e3       	ldi	r24, 0x30	; 48
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <MCP2515_findFreeTxBuffer+0x2e>
    14c8:	80 e4       	ldi	r24, 0x40	; 64
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <MCP2515_findFreeTxBuffer+0x2e>
    14cc:	80 e5       	ldi	r24, 0x50	; 80
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <MCP2515_TX>:

void MCP2515_TX(uint8_t CANbus, int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
	if(mob == 0)return;						//no free mob or invalid mob
    14e8:	66 23       	and	r22, r22
    14ea:	09 f4       	brne	.+2      	; 0x14ee <MCP2515_TX+0x1c>
    14ec:	63 c0       	rjmp	.+198    	; 0x15b4 <MCP2515_TX+0xe2>
    14ee:	47 01       	movw	r8, r14
    14f0:	58 01       	movw	r10, r16
    14f2:	c3 2f       	mov	r28, r19
    14f4:	e2 2e       	mov	r14, r18
    14f6:	d4 2e       	mov	r13, r20
    14f8:	f6 2e       	mov	r15, r22
    14fa:	d8 2f       	mov	r29, r24
	MCP2515_reg_write(CANbus, mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    14fc:	43 e0       	ldi	r20, 0x03	; 3
    14fe:	e2 de       	rcall	.-572    	; 0x12c4 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    1500:	b5 01       	movw	r22, r10
    1502:	a4 01       	movw	r20, r8
    1504:	03 2e       	mov	r0, r19
    1506:	35 e1       	ldi	r19, 0x15	; 21
    1508:	76 95       	lsr	r23
    150a:	67 95       	ror	r22
    150c:	57 95       	ror	r21
    150e:	47 95       	ror	r20
    1510:	3a 95       	dec	r19
    1512:	d1 f7       	brne	.-12     	; 0x1508 <MCP2515_TX+0x36>
    1514:	30 2d       	mov	r19, r0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	8f 0d       	add	r24, r15
    151a:	68 2f       	mov	r22, r24
    151c:	8d 2f       	mov	r24, r29
    151e:	d2 de       	rcall	.-604    	; 0x12c4 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    1520:	b5 01       	movw	r22, r10
    1522:	a4 01       	movw	r20, r8
    1524:	03 2e       	mov	r0, r19
    1526:	3d e0       	ldi	r19, 0x0D	; 13
    1528:	76 95       	lsr	r23
    152a:	67 95       	ror	r22
    152c:	57 95       	ror	r21
    152e:	47 95       	ror	r20
    1530:	3a 95       	dec	r19
    1532:	d1 f7       	brne	.-12     	; 0x1528 <MCP2515_TX+0x56>
    1534:	30 2d       	mov	r19, r0
    1536:	40 7e       	andi	r20, 0xE0	; 224
    1538:	8a 2d       	mov	r24, r10
    153a:	83 70       	andi	r24, 0x03	; 3
    153c:	48 2b       	or	r20, r24
    153e:	48 60       	ori	r20, 0x08	; 8
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	6f 0d       	add	r22, r15
    1544:	8d 2f       	mov	r24, r29
    1546:	be de       	rcall	.-644    	; 0x12c4 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+3, (ID>>8) & 0xFF );
    1548:	77 27       	eor	r23, r23
    154a:	6b 2d       	mov	r22, r11
    154c:	5a 2d       	mov	r21, r10
    154e:	49 2d       	mov	r20, r9
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	8f 0d       	add	r24, r15
    1554:	68 2f       	mov	r22, r24
    1556:	8d 2f       	mov	r24, r29
    1558:	b5 de       	rcall	.-662    	; 0x12c4 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+4, ID & 0xFF );
    155a:	64 e0       	ldi	r22, 0x04	; 4
    155c:	6f 0d       	add	r22, r15
    155e:	48 2d       	mov	r20, r8
    1560:	8d 2f       	mov	r24, r29
    1562:	b0 de       	rcall	.-672    	; 0x12c4 <MCP2515_reg_write>
	MCP2515_reg_write(CANbus, mob+5, numBytes);		//set how many bytes we wish to send
    1564:	65 e0       	ldi	r22, 0x05	; 5
    1566:	6f 0d       	add	r22, r15
    1568:	4d 2d       	mov	r20, r13
    156a:	8d 2f       	mov	r24, r29
    156c:	ab de       	rcall	.-682    	; 0x12c4 <MCP2515_reg_write>
    156e:	dd 20       	and	r13, r13
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1570:	89 f0       	breq	.+34     	; 0x1594 <MCP2515_TX+0xc2>
    1572:	0e 2d       	mov	r16, r14
    1574:	1c 2f       	mov	r17, r28
    1576:	c6 e0       	ldi	r28, 0x06	; 6
    1578:	cf 0d       	add	r28, r15
    157a:	46 e0       	ldi	r20, 0x06	; 6
    157c:	4d 0d       	add	r20, r13
    157e:	e4 2e       	mov	r14, r20
    1580:	ef 0c       	add	r14, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    1582:	f8 01       	movw	r30, r16
    1584:	41 91       	ld	r20, Z+
    1586:	8f 01       	movw	r16, r30
    1588:	6c 2f       	mov	r22, r28
    158a:	8d 2f       	mov	r24, r29
    158c:	9b de       	rcall	.-714    	; 0x12c4 <MCP2515_reg_write>
    158e:	cf 5f       	subi	r28, 0xFF	; 255
    1590:	ce 11       	cpse	r28, r14
	//MCP2515_reg_write(CANbus, mob+2, (1<<3));
	//MCP2515_reg_write(CANbus, mob+3, 0);
	//MCP2515_reg_write(CANbus, mob+4, 0);
	//MCP2515_reg_write(CANbus, mob+5, 0);

	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1592:	f7 cf       	rjmp	.-18     	; 0x1582 <MCP2515_TX+0xb0>
    1594:	8f 2d       	mov	r24, r15
	{
		MCP2515_reg_write(CANbus, mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(CANbus, 128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    1596:	85 95       	asr	r24
    1598:	85 95       	asr	r24
    159a:	85 95       	asr	r24
    159c:	85 95       	asr	r24
    159e:	83 50       	subi	r24, 0x03	; 3
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <MCP2515_TX+0xd8>
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <MCP2515_TX+0xd4>
    15ae:	60 68       	ori	r22, 0x80	; 128
    15b0:	8d 2f       	mov	r24, r29
    15b2:	9b de       	rcall	.-714    	; 0x12ea <MCP2515_instruction>
    15b4:	df 91       	pop	r29
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	08 95       	ret

000015cc <MCP2515_check_receive_status>:
    15cc:	cf 93       	push	r28


uint8_t MCP2515_check_receive_status(uint8_t CANbus)
{
    15ce:	df 93       	push	r29
    15d0:	c8 2f       	mov	r28, r24
	uint8_t status;
	MCP2515_CS_low(CANbus);			//unset CS so MCP2515 knows we are talking
    15d2:	50 de       	rcall	.-864    	; 0x1274 <MCP2515_CS_low>
	SPI_send_byte(MCP2515_RXSTATUS);
    15d4:	80 eb       	ldi	r24, 0xB0	; 176
    15d6:	0b d0       	rcall	.+22     	; 0x15ee <SPI_send_byte>
	status = SPI_send_byte(0x00);						//send zeros to get data
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	09 d0       	rcall	.+18     	; 0x15ee <SPI_send_byte>
    15dc:	d8 2f       	mov	r29, r24
	SPI_send_byte(0x00);							//MCP2515 will repeat the data output, so send another batch of zeros
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	06 d0       	rcall	.+12     	; 0x15ee <SPI_send_byte>
	MCP2515_CS_high(CANbus);			//set the CS
    15e2:	8c 2f       	mov	r24, r28
    15e4:	5b de       	rcall	.-842    	; 0x129c <MCP2515_CS_high>
    15e6:	8d 2f       	mov	r24, r29
	return status;
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    15ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    15f0:	0d b4       	in	r0, 0x2d	; 45
    15f2:	07 fe       	sbrs	r0, 7
    15f4:	fd cf       	rjmp	.-6      	; 0x15f0 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    15f6:	8e b5       	in	r24, 0x2e	; 46
}
    15f8:	08 95       	ret

000015fa <SPI_init>:

void SPI_init()
{
	//MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    15fa:	81 e5       	ldi	r24, 0x51	; 81
    15fc:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    1602:	1e bc       	out	0x2e, r1	; 46
    1604:	08 95       	ret

00001606 <__vector_25>:
{	
	// Does the RX0 bit of the USART Status and Control Register
	// indicate a char has been received?
	if ( (UCSR1A & (0x80)) ) return 1;
	else return 0;
}
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	0b b6       	in	r0, 0x3b	; 59
    1612:	0f 92       	push	r0
    1614:	2f 93       	push	r18
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1622:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1626:	88 71       	andi	r24, 0x18	; 24
    1628:	e0 91 e5 09 	lds	r30, 0x09E5	; 0x8009e5 <UART_RxHead>
    162c:	ef 5f       	subi	r30, 0xFF	; 255
    162e:	ef 71       	andi	r30, 0x1F	; 31
    1630:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <UART_RxTail>
    1634:	e9 17       	cp	r30, r25
    1636:	39 f0       	breq	.+14     	; 0x1646 <__vector_25+0x40>
    1638:	e0 93 e5 09 	sts	0x09E5, r30	; 0x8009e5 <UART_RxHead>
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	e8 51       	subi	r30, 0x18	; 24
    1640:	f6 4f       	sbci	r31, 0xF6	; 246
    1642:	20 83       	st	Z, r18
    1644:	01 c0       	rjmp	.+2      	; 0x1648 <__vector_25+0x42>
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <UART_LastRxError>
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	2f 91       	pop	r18
    1656:	0f 90       	pop	r0
    1658:	0b be       	out	0x3b, r0	; 59
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_36>:
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	2f 93       	push	r18
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    167c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1680:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1684:	88 71       	andi	r24, 0x18	; 24
    1686:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <UART1_RxHead>
    168a:	ef 5f       	subi	r30, 0xFF	; 255
    168c:	ef 71       	andi	r30, 0x1F	; 31
    168e:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <UART1_RxTail>
    1692:	e9 17       	cp	r30, r25
    1694:	39 f0       	breq	.+14     	; 0x16a4 <__vector_36+0x40>
    1696:	e0 93 a0 09 	sts	0x09A0, r30	; 0x8009a0 <UART1_RxHead>
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	ed 55       	subi	r30, 0x5D	; 93
    169e:	f6 4f       	sbci	r31, 0xF6	; 246
    16a0:	20 83       	st	Z, r18
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <__vector_36+0x42>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <UART1_LastRxError>
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	9f 91       	pop	r25
    16b0:	8f 91       	pop	r24
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_26>:
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	0b b6       	in	r0, 0x3b	; 59
    16ce:	0f 92       	push	r0
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <UART_TxHead>
    16dc:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <UART_TxTail>
    16e0:	98 17       	cp	r25, r24
    16e2:	69 f0       	breq	.+26     	; 0x16fe <__vector_26+0x3c>
    16e4:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <UART_TxTail>
    16e8:	ef 5f       	subi	r30, 0xFF	; 255
    16ea:	ef 71       	andi	r30, 0x1F	; 31
    16ec:	e0 93 e6 09 	sts	0x09E6, r30	; 0x8009e6 <UART_TxTail>
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	e8 5f       	subi	r30, 0xF8	; 248
    16f4:	f5 4f       	sbci	r31, 0xF5	; 245
    16f6:	80 81       	ld	r24, Z
    16f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <__vector_26+0x46>
    16fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 7d       	andi	r24, 0xDF	; 223
    1706:	80 83       	st	Z, r24
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	0f 90       	pop	r0
    1712:	0b be       	out	0x3b, r0	; 59
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_37>:
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	0b b6       	in	r0, 0x3b	; 59
    172a:	0f 92       	push	r0
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <UART1_TxHead>
    1738:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <UART1_TxTail>
    173c:	98 17       	cp	r25, r24
    173e:	69 f0       	breq	.+26     	; 0x175a <__vector_37+0x3c>
    1740:	e0 91 a1 09 	lds	r30, 0x09A1	; 0x8009a1 <UART1_TxTail>
    1744:	ef 5f       	subi	r30, 0xFF	; 255
    1746:	ef 71       	andi	r30, 0x1F	; 31
    1748:	e0 93 a1 09 	sts	0x09A1, r30	; 0x8009a1 <UART1_TxTail>
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	ed 53       	subi	r30, 0x3D	; 61
    1750:	f6 4f       	sbci	r31, 0xF6	; 246
    1752:	80 81       	ld	r24, Z
    1754:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <__vector_37+0x46>
    175a:	e9 ec       	ldi	r30, 0xC9	; 201
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8f 7d       	andi	r24, 0xDF	; 223
    1762:	80 83       	st	Z, r24
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	0f 90       	pop	r0
    176e:	0b be       	out	0x3b, r0	; 59
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <uart_init>:
    177a:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <UART_TxHead>
    177e:	10 92 e6 09 	sts	0x09E6, r1	; 0x8009e6 <UART_TxTail>
    1782:	10 92 e5 09 	sts	0x09E5, r1	; 0x8009e5 <UART_RxHead>
    1786:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <UART_RxTail>
    178a:	e1 e6       	ldi	r30, 0x61	; 97
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	80 83       	st	Z, r24
    1792:	10 82       	st	Z, r1
    1794:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1798:	87 e6       	ldi	r24, 0x67	; 103
    179a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    17a4:	88 e1       	ldi	r24, 0x18	; 24
    17a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    17aa:	86 e0       	ldi	r24, 0x06	; 6
    17ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    17b0:	08 95       	ret

000017b2 <uart_putc>:
    17b2:	90 91 28 0a 	lds	r25, 0x0A28	; 0x800a28 <portKey>
    17b6:	91 11       	cpse	r25, r1
    17b8:	15 c0       	rjmp	.+42     	; 0x17e4 <uart_putc+0x32>
    17ba:	20 91 e7 09 	lds	r18, 0x09E7	; 0x8009e7 <UART_TxHead>
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	2f 71       	andi	r18, 0x1F	; 31
    17c2:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <UART_TxTail>
    17c6:	29 17       	cp	r18, r25
    17c8:	e1 f3       	breq	.-8      	; 0x17c2 <uart_putc+0x10>
    17ca:	e2 2f       	mov	r30, r18
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	e8 5f       	subi	r30, 0xF8	; 248
    17d0:	f5 4f       	sbci	r31, 0xF5	; 245
    17d2:	80 83       	st	Z, r24
    17d4:	20 93 e7 09 	sts	0x09E7, r18	; 0x8009e7 <UART_TxHead>
    17d8:	e1 ec       	ldi	r30, 0xC1	; 193
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 62       	ori	r24, 0x20	; 32
    17e0:	80 83       	st	Z, r24
    17e2:	08 95       	ret
    17e4:	91 30       	cpi	r25, 0x01	; 1
    17e6:	a1 f4       	brne	.+40     	; 0x1810 <uart_putc+0x5e>
    17e8:	20 91 a2 09 	lds	r18, 0x09A2	; 0x8009a2 <UART1_TxHead>
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	2f 71       	andi	r18, 0x1F	; 31
    17f0:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <UART1_TxTail>
    17f4:	29 17       	cp	r18, r25
    17f6:	e1 f3       	breq	.-8      	; 0x17f0 <uart_putc+0x3e>
    17f8:	e2 2f       	mov	r30, r18
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	ed 53       	subi	r30, 0x3D	; 61
    17fe:	f6 4f       	sbci	r31, 0xF6	; 246
    1800:	80 83       	st	Z, r24
    1802:	20 93 a2 09 	sts	0x09A2, r18	; 0x8009a2 <UART1_TxHead>
    1806:	e9 ec       	ldi	r30, 0xC9	; 201
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 62       	ori	r24, 0x20	; 32
    180e:	80 83       	st	Z, r24
    1810:	08 95       	ret

00001812 <uart1_putc>:
    1812:	20 91 a2 09 	lds	r18, 0x09A2	; 0x8009a2 <UART1_TxHead>
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	2f 71       	andi	r18, 0x1F	; 31
    181a:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <UART1_TxTail>
    181e:	29 17       	cp	r18, r25
    1820:	e1 f3       	breq	.-8      	; 0x181a <uart1_putc+0x8>
    1822:	e2 2f       	mov	r30, r18
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	ed 53       	subi	r30, 0x3D	; 61
    1828:	f6 4f       	sbci	r31, 0xF6	; 246
    182a:	80 83       	st	Z, r24
    182c:	20 93 a2 09 	sts	0x09A2, r18	; 0x8009a2 <UART1_TxHead>
    1830:	e9 ec       	ldi	r30, 0xC9	; 201
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 62       	ori	r24, 0x20	; 32
    1838:	80 83       	st	Z, r24
    183a:	08 95       	ret

0000183c <uart1_puts>:
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	88 81       	ld	r24, Y
    1844:	88 23       	and	r24, r24
    1846:	29 f0       	breq	.+10     	; 0x1852 <uart1_puts+0x16>
    1848:	21 96       	adiw	r28, 0x01	; 1
    184a:	e3 df       	rcall	.-58     	; 0x1812 <uart1_putc>
    184c:	89 91       	ld	r24, Y+
    184e:	81 11       	cpse	r24, r1
    1850:	fc cf       	rjmp	.-8      	; 0x184a <uart1_puts+0xe>
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <isCharAvailable>:
    1858:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    185c:	88 1f       	adc	r24, r24
    185e:	88 27       	eor	r24, r24
    1860:	88 1f       	adc	r24, r24
    1862:	08 95       	ret

00001864 <receiveChar>:

char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
    1864:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    1868:	08 95       	ret

0000186a <__udivmodhi4>:
    186a:	aa 1b       	sub	r26, r26
    186c:	bb 1b       	sub	r27, r27
    186e:	51 e1       	ldi	r21, 0x11	; 17
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <__udivmodhi4_ep>

00001872 <__udivmodhi4_loop>:
    1872:	aa 1f       	adc	r26, r26
    1874:	bb 1f       	adc	r27, r27
    1876:	a6 17       	cp	r26, r22
    1878:	b7 07       	cpc	r27, r23
    187a:	10 f0       	brcs	.+4      	; 0x1880 <__udivmodhi4_ep>
    187c:	a6 1b       	sub	r26, r22
    187e:	b7 0b       	sbc	r27, r23

00001880 <__udivmodhi4_ep>:
    1880:	88 1f       	adc	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	5a 95       	dec	r21
    1886:	a9 f7       	brne	.-22     	; 0x1872 <__udivmodhi4_loop>
    1888:	80 95       	com	r24
    188a:	90 95       	com	r25
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	08 95       	ret

00001892 <__tablejump2__>:
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	00 24       	eor	r0, r0
    1898:	00 1c       	adc	r0, r0
    189a:	0b be       	out	0x3b, r0	; 59
    189c:	07 90       	elpm	r0, Z+
    189e:	f6 91       	elpm	r31, Z
    18a0:	e0 2d       	mov	r30, r0
    18a2:	09 94       	ijmp

000018a4 <memcpy>:
    18a4:	fb 01       	movw	r30, r22
    18a6:	dc 01       	movw	r26, r24
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <memcpy+0xa>
    18aa:	01 90       	ld	r0, Z+
    18ac:	0d 92       	st	X+, r0
    18ae:	41 50       	subi	r20, 0x01	; 1
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	d8 f7       	brcc	.-10     	; 0x18aa <memcpy+0x6>
    18b4:	08 95       	ret

000018b6 <snprintf>:
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	2e 97       	sbiw	r28, 0x0e	; 14
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	0d 89       	ldd	r16, Y+21	; 0x15
    18d0:	1e 89       	ldd	r17, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	26 e0       	ldi	r18, 0x06	; 6
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	1a 83       	std	Y+2, r17	; 0x02
    18dc:	09 83       	std	Y+1, r16	; 0x01
    18de:	97 ff       	sbrs	r25, 7
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <snprintf+0x30>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e8       	ldi	r25, 0x80	; 128
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	ae 01       	movw	r20, r28
    18ee:	45 5e       	subi	r20, 0xE5	; 229
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	19 d0       	rcall	.+50     	; 0x192e <vfprintf>
    18fc:	4d 81       	ldd	r20, Y+5	; 0x05
    18fe:	5e 81       	ldd	r21, Y+6	; 0x06
    1900:	57 fd       	sbrc	r21, 7
    1902:	0a c0       	rjmp	.+20     	; 0x1918 <snprintf+0x62>
    1904:	2f 81       	ldd	r18, Y+7	; 0x07
    1906:	38 85       	ldd	r19, Y+8	; 0x08
    1908:	42 17       	cp	r20, r18
    190a:	53 07       	cpc	r21, r19
    190c:	0c f4       	brge	.+2      	; 0x1910 <snprintf+0x5a>
    190e:	9a 01       	movw	r18, r20
    1910:	f8 01       	movw	r30, r16
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	10 82       	st	Z, r1
    1918:	2e 96       	adiw	r28, 0x0e	; 14
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <vfprintf>:
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	2b 97       	sbiw	r28, 0x0b	; 11
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	6c 01       	movw	r12, r24
    1964:	7b 01       	movw	r14, r22
    1966:	8a 01       	movw	r16, r20
    1968:	fc 01       	movw	r30, r24
    196a:	17 82       	std	Z+7, r1	; 0x07
    196c:	16 82       	std	Z+6, r1	; 0x06
    196e:	83 81       	ldd	r24, Z+3	; 0x03
    1970:	81 ff       	sbrs	r24, 1
    1972:	bf c1       	rjmp	.+894    	; 0x1cf2 <vfprintf+0x3c4>
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	3c 01       	movw	r6, r24
    197a:	f6 01       	movw	r30, r12
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	f7 01       	movw	r30, r14
    1980:	93 fd       	sbrc	r25, 3
    1982:	85 91       	lpm	r24, Z+
    1984:	93 ff       	sbrs	r25, 3
    1986:	81 91       	ld	r24, Z+
    1988:	7f 01       	movw	r14, r30
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <vfprintf+0x62>
    198e:	ad c1       	rjmp	.+858    	; 0x1cea <vfprintf+0x3bc>
    1990:	85 32       	cpi	r24, 0x25	; 37
    1992:	39 f4       	brne	.+14     	; 0x19a2 <vfprintf+0x74>
    1994:	93 fd       	sbrc	r25, 3
    1996:	85 91       	lpm	r24, Z+
    1998:	93 ff       	sbrs	r25, 3
    199a:	81 91       	ld	r24, Z+
    199c:	7f 01       	movw	r14, r30
    199e:	85 32       	cpi	r24, 0x25	; 37
    19a0:	21 f4       	brne	.+8      	; 0x19aa <vfprintf+0x7c>
    19a2:	b6 01       	movw	r22, r12
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	d6 d1       	rcall	.+940    	; 0x1d54 <fputc>
    19a8:	e8 cf       	rjmp	.-48     	; 0x197a <vfprintf+0x4c>
    19aa:	91 2c       	mov	r9, r1
    19ac:	21 2c       	mov	r2, r1
    19ae:	31 2c       	mov	r3, r1
    19b0:	ff e1       	ldi	r31, 0x1F	; 31
    19b2:	f3 15       	cp	r31, r3
    19b4:	d8 f0       	brcs	.+54     	; 0x19ec <vfprintf+0xbe>
    19b6:	8b 32       	cpi	r24, 0x2B	; 43
    19b8:	79 f0       	breq	.+30     	; 0x19d8 <vfprintf+0xaa>
    19ba:	38 f4       	brcc	.+14     	; 0x19ca <vfprintf+0x9c>
    19bc:	80 32       	cpi	r24, 0x20	; 32
    19be:	79 f0       	breq	.+30     	; 0x19de <vfprintf+0xb0>
    19c0:	83 32       	cpi	r24, 0x23	; 35
    19c2:	a1 f4       	brne	.+40     	; 0x19ec <vfprintf+0xbe>
    19c4:	23 2d       	mov	r18, r3
    19c6:	20 61       	ori	r18, 0x10	; 16
    19c8:	1d c0       	rjmp	.+58     	; 0x1a04 <vfprintf+0xd6>
    19ca:	8d 32       	cpi	r24, 0x2D	; 45
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <vfprintf+0xb8>
    19ce:	80 33       	cpi	r24, 0x30	; 48
    19d0:	69 f4       	brne	.+26     	; 0x19ec <vfprintf+0xbe>
    19d2:	23 2d       	mov	r18, r3
    19d4:	21 60       	ori	r18, 0x01	; 1
    19d6:	16 c0       	rjmp	.+44     	; 0x1a04 <vfprintf+0xd6>
    19d8:	83 2d       	mov	r24, r3
    19da:	82 60       	ori	r24, 0x02	; 2
    19dc:	38 2e       	mov	r3, r24
    19de:	e3 2d       	mov	r30, r3
    19e0:	e4 60       	ori	r30, 0x04	; 4
    19e2:	3e 2e       	mov	r3, r30
    19e4:	2a c0       	rjmp	.+84     	; 0x1a3a <vfprintf+0x10c>
    19e6:	f3 2d       	mov	r31, r3
    19e8:	f8 60       	ori	r31, 0x08	; 8
    19ea:	1d c0       	rjmp	.+58     	; 0x1a26 <vfprintf+0xf8>
    19ec:	37 fc       	sbrc	r3, 7
    19ee:	2d c0       	rjmp	.+90     	; 0x1a4a <vfprintf+0x11c>
    19f0:	20 ed       	ldi	r18, 0xD0	; 208
    19f2:	28 0f       	add	r18, r24
    19f4:	2a 30       	cpi	r18, 0x0A	; 10
    19f6:	40 f0       	brcs	.+16     	; 0x1a08 <vfprintf+0xda>
    19f8:	8e 32       	cpi	r24, 0x2E	; 46
    19fa:	b9 f4       	brne	.+46     	; 0x1a2a <vfprintf+0xfc>
    19fc:	36 fc       	sbrc	r3, 6
    19fe:	75 c1       	rjmp	.+746    	; 0x1cea <vfprintf+0x3bc>
    1a00:	23 2d       	mov	r18, r3
    1a02:	20 64       	ori	r18, 0x40	; 64
    1a04:	32 2e       	mov	r3, r18
    1a06:	19 c0       	rjmp	.+50     	; 0x1a3a <vfprintf+0x10c>
    1a08:	36 fe       	sbrs	r3, 6
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <vfprintf+0xea>
    1a0c:	8a e0       	ldi	r24, 0x0A	; 10
    1a0e:	98 9e       	mul	r9, r24
    1a10:	20 0d       	add	r18, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	92 2e       	mov	r9, r18
    1a16:	11 c0       	rjmp	.+34     	; 0x1a3a <vfprintf+0x10c>
    1a18:	ea e0       	ldi	r30, 0x0A	; 10
    1a1a:	2e 9e       	mul	r2, r30
    1a1c:	20 0d       	add	r18, r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	22 2e       	mov	r2, r18
    1a22:	f3 2d       	mov	r31, r3
    1a24:	f0 62       	ori	r31, 0x20	; 32
    1a26:	3f 2e       	mov	r3, r31
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <vfprintf+0x10c>
    1a2a:	8c 36       	cpi	r24, 0x6C	; 108
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <vfprintf+0x108>
    1a2e:	83 2d       	mov	r24, r3
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	38 2e       	mov	r3, r24
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <vfprintf+0x10c>
    1a36:	88 36       	cpi	r24, 0x68	; 104
    1a38:	41 f4       	brne	.+16     	; 0x1a4a <vfprintf+0x11c>
    1a3a:	f7 01       	movw	r30, r14
    1a3c:	93 fd       	sbrc	r25, 3
    1a3e:	85 91       	lpm	r24, Z+
    1a40:	93 ff       	sbrs	r25, 3
    1a42:	81 91       	ld	r24, Z+
    1a44:	7f 01       	movw	r14, r30
    1a46:	81 11       	cpse	r24, r1
    1a48:	b3 cf       	rjmp	.-154    	; 0x19b0 <vfprintf+0x82>
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	9f 7d       	andi	r25, 0xDF	; 223
    1a4e:	95 54       	subi	r25, 0x45	; 69
    1a50:	93 30       	cpi	r25, 0x03	; 3
    1a52:	28 f4       	brcc	.+10     	; 0x1a5e <vfprintf+0x130>
    1a54:	0c 5f       	subi	r16, 0xFC	; 252
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	9f e3       	ldi	r25, 0x3F	; 63
    1a5a:	99 83       	std	Y+1, r25	; 0x01
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <vfprintf+0x14a>
    1a5e:	83 36       	cpi	r24, 0x63	; 99
    1a60:	31 f0       	breq	.+12     	; 0x1a6e <vfprintf+0x140>
    1a62:	83 37       	cpi	r24, 0x73	; 115
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <vfprintf+0x154>
    1a66:	83 35       	cpi	r24, 0x53	; 83
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <vfprintf+0x13e>
    1a6a:	55 c0       	rjmp	.+170    	; 0x1b16 <vfprintf+0x1e8>
    1a6c:	20 c0       	rjmp	.+64     	; 0x1aae <vfprintf+0x180>
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 81       	ld	r24, Z
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	0e 5f       	subi	r16, 0xFE	; 254
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	88 24       	eor	r8, r8
    1a7a:	83 94       	inc	r8
    1a7c:	91 2c       	mov	r9, r1
    1a7e:	53 01       	movw	r10, r6
    1a80:	12 c0       	rjmp	.+36     	; 0x1aa6 <vfprintf+0x178>
    1a82:	28 01       	movw	r4, r16
    1a84:	f2 e0       	ldi	r31, 0x02	; 2
    1a86:	4f 0e       	add	r4, r31
    1a88:	51 1c       	adc	r5, r1
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	a0 80       	ld	r10, Z
    1a8e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a90:	36 fe       	sbrs	r3, 6
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <vfprintf+0x16c>
    1a94:	69 2d       	mov	r22, r9
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <vfprintf+0x170>
    1a9a:	6f ef       	ldi	r22, 0xFF	; 255
    1a9c:	7f ef       	ldi	r23, 0xFF	; 255
    1a9e:	c5 01       	movw	r24, r10
    1aa0:	4e d1       	rcall	.+668    	; 0x1d3e <strnlen>
    1aa2:	4c 01       	movw	r8, r24
    1aa4:	82 01       	movw	r16, r4
    1aa6:	f3 2d       	mov	r31, r3
    1aa8:	ff 77       	andi	r31, 0x7F	; 127
    1aaa:	3f 2e       	mov	r3, r31
    1aac:	15 c0       	rjmp	.+42     	; 0x1ad8 <vfprintf+0x1aa>
    1aae:	28 01       	movw	r4, r16
    1ab0:	22 e0       	ldi	r18, 0x02	; 2
    1ab2:	42 0e       	add	r4, r18
    1ab4:	51 1c       	adc	r5, r1
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	a0 80       	ld	r10, Z
    1aba:	b1 80       	ldd	r11, Z+1	; 0x01
    1abc:	36 fe       	sbrs	r3, 6
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <vfprintf+0x198>
    1ac0:	69 2d       	mov	r22, r9
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x19c>
    1ac6:	6f ef       	ldi	r22, 0xFF	; 255
    1ac8:	7f ef       	ldi	r23, 0xFF	; 255
    1aca:	c5 01       	movw	r24, r10
    1acc:	2d d1       	rcall	.+602    	; 0x1d28 <strnlen_P>
    1ace:	4c 01       	movw	r8, r24
    1ad0:	f3 2d       	mov	r31, r3
    1ad2:	f0 68       	ori	r31, 0x80	; 128
    1ad4:	3f 2e       	mov	r3, r31
    1ad6:	82 01       	movw	r16, r4
    1ad8:	33 fc       	sbrc	r3, 3
    1ada:	19 c0       	rjmp	.+50     	; 0x1b0e <vfprintf+0x1e0>
    1adc:	82 2d       	mov	r24, r2
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	88 16       	cp	r8, r24
    1ae2:	99 06       	cpc	r9, r25
    1ae4:	a0 f4       	brcc	.+40     	; 0x1b0e <vfprintf+0x1e0>
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	33 d1       	rcall	.+614    	; 0x1d54 <fputc>
    1aee:	2a 94       	dec	r2
    1af0:	f5 cf       	rjmp	.-22     	; 0x1adc <vfprintf+0x1ae>
    1af2:	f5 01       	movw	r30, r10
    1af4:	37 fc       	sbrc	r3, 7
    1af6:	85 91       	lpm	r24, Z+
    1af8:	37 fe       	sbrs	r3, 7
    1afa:	81 91       	ld	r24, Z+
    1afc:	5f 01       	movw	r10, r30
    1afe:	b6 01       	movw	r22, r12
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	28 d1       	rcall	.+592    	; 0x1d54 <fputc>
    1b04:	21 10       	cpse	r2, r1
    1b06:	2a 94       	dec	r2
    1b08:	21 e0       	ldi	r18, 0x01	; 1
    1b0a:	82 1a       	sub	r8, r18
    1b0c:	91 08       	sbc	r9, r1
    1b0e:	81 14       	cp	r8, r1
    1b10:	91 04       	cpc	r9, r1
    1b12:	79 f7       	brne	.-34     	; 0x1af2 <vfprintf+0x1c4>
    1b14:	e1 c0       	rjmp	.+450    	; 0x1cd8 <vfprintf+0x3aa>
    1b16:	84 36       	cpi	r24, 0x64	; 100
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <vfprintf+0x1f0>
    1b1a:	89 36       	cpi	r24, 0x69	; 105
    1b1c:	39 f5       	brne	.+78     	; 0x1b6c <vfprintf+0x23e>
    1b1e:	f8 01       	movw	r30, r16
    1b20:	37 fe       	sbrs	r3, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x204>
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0c 5f       	subi	r16, 0xFC	; 252
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <vfprintf+0x214>
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	07 2e       	mov	r0, r23
    1b38:	00 0c       	add	r0, r0
    1b3a:	88 0b       	sbc	r24, r24
    1b3c:	99 0b       	sbc	r25, r25
    1b3e:	0e 5f       	subi	r16, 0xFE	; 254
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	f3 2d       	mov	r31, r3
    1b44:	ff 76       	andi	r31, 0x6F	; 111
    1b46:	3f 2e       	mov	r3, r31
    1b48:	97 ff       	sbrs	r25, 7
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <vfprintf+0x230>
    1b4c:	90 95       	com	r25
    1b4e:	80 95       	com	r24
    1b50:	70 95       	com	r23
    1b52:	61 95       	neg	r22
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	8f 4f       	sbci	r24, 0xFF	; 255
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	f0 68       	ori	r31, 0x80	; 128
    1b5c:	3f 2e       	mov	r3, r31
    1b5e:	2a e0       	ldi	r18, 0x0A	; 10
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	a3 01       	movw	r20, r6
    1b64:	33 d1       	rcall	.+614    	; 0x1dcc <__ultoa_invert>
    1b66:	88 2e       	mov	r8, r24
    1b68:	86 18       	sub	r8, r6
    1b6a:	44 c0       	rjmp	.+136    	; 0x1bf4 <vfprintf+0x2c6>
    1b6c:	85 37       	cpi	r24, 0x75	; 117
    1b6e:	31 f4       	brne	.+12     	; 0x1b7c <vfprintf+0x24e>
    1b70:	23 2d       	mov	r18, r3
    1b72:	2f 7e       	andi	r18, 0xEF	; 239
    1b74:	b2 2e       	mov	r11, r18
    1b76:	2a e0       	ldi	r18, 0x0A	; 10
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	25 c0       	rjmp	.+74     	; 0x1bc6 <vfprintf+0x298>
    1b7c:	93 2d       	mov	r25, r3
    1b7e:	99 7f       	andi	r25, 0xF9	; 249
    1b80:	b9 2e       	mov	r11, r25
    1b82:	8f 36       	cpi	r24, 0x6F	; 111
    1b84:	c1 f0       	breq	.+48     	; 0x1bb6 <vfprintf+0x288>
    1b86:	18 f4       	brcc	.+6      	; 0x1b8e <vfprintf+0x260>
    1b88:	88 35       	cpi	r24, 0x58	; 88
    1b8a:	79 f0       	breq	.+30     	; 0x1baa <vfprintf+0x27c>
    1b8c:	ae c0       	rjmp	.+348    	; 0x1cea <vfprintf+0x3bc>
    1b8e:	80 37       	cpi	r24, 0x70	; 112
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <vfprintf+0x26a>
    1b92:	88 37       	cpi	r24, 0x78	; 120
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <vfprintf+0x270>
    1b96:	a9 c0       	rjmp	.+338    	; 0x1cea <vfprintf+0x3bc>
    1b98:	e9 2f       	mov	r30, r25
    1b9a:	e0 61       	ori	r30, 0x10	; 16
    1b9c:	be 2e       	mov	r11, r30
    1b9e:	b4 fe       	sbrs	r11, 4
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <vfprintf+0x28e>
    1ba2:	fb 2d       	mov	r31, r11
    1ba4:	f4 60       	ori	r31, 0x04	; 4
    1ba6:	bf 2e       	mov	r11, r31
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <vfprintf+0x28e>
    1baa:	34 fe       	sbrs	r3, 4
    1bac:	0a c0       	rjmp	.+20     	; 0x1bc2 <vfprintf+0x294>
    1bae:	29 2f       	mov	r18, r25
    1bb0:	26 60       	ori	r18, 0x06	; 6
    1bb2:	b2 2e       	mov	r11, r18
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <vfprintf+0x294>
    1bb6:	28 e0       	ldi	r18, 0x08	; 8
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <vfprintf+0x298>
    1bbc:	20 e1       	ldi	r18, 0x10	; 16
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <vfprintf+0x298>
    1bc2:	20 e1       	ldi	r18, 0x10	; 16
    1bc4:	32 e0       	ldi	r19, 0x02	; 2
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	b7 fe       	sbrs	r11, 7
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <vfprintf+0x2ac>
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	0c 5f       	subi	r16, 0xFC	; 252
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	06 c0       	rjmp	.+12     	; 0x1be6 <vfprintf+0x2b8>
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 5f       	subi	r16, 0xFE	; 254
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	a3 01       	movw	r20, r6
    1be8:	f1 d0       	rcall	.+482    	; 0x1dcc <__ultoa_invert>
    1bea:	88 2e       	mov	r8, r24
    1bec:	86 18       	sub	r8, r6
    1bee:	fb 2d       	mov	r31, r11
    1bf0:	ff 77       	andi	r31, 0x7F	; 127
    1bf2:	3f 2e       	mov	r3, r31
    1bf4:	36 fe       	sbrs	r3, 6
    1bf6:	0d c0       	rjmp	.+26     	; 0x1c12 <vfprintf+0x2e4>
    1bf8:	23 2d       	mov	r18, r3
    1bfa:	2e 7f       	andi	r18, 0xFE	; 254
    1bfc:	a2 2e       	mov	r10, r18
    1bfe:	89 14       	cp	r8, r9
    1c00:	58 f4       	brcc	.+22     	; 0x1c18 <vfprintf+0x2ea>
    1c02:	34 fe       	sbrs	r3, 4
    1c04:	0b c0       	rjmp	.+22     	; 0x1c1c <vfprintf+0x2ee>
    1c06:	32 fc       	sbrc	r3, 2
    1c08:	09 c0       	rjmp	.+18     	; 0x1c1c <vfprintf+0x2ee>
    1c0a:	83 2d       	mov	r24, r3
    1c0c:	8e 7e       	andi	r24, 0xEE	; 238
    1c0e:	a8 2e       	mov	r10, r24
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <vfprintf+0x2ee>
    1c12:	b8 2c       	mov	r11, r8
    1c14:	a3 2c       	mov	r10, r3
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <vfprintf+0x2f0>
    1c18:	b8 2c       	mov	r11, r8
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <vfprintf+0x2f0>
    1c1c:	b9 2c       	mov	r11, r9
    1c1e:	a4 fe       	sbrs	r10, 4
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <vfprintf+0x312>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e8 0d       	add	r30, r8
    1c26:	f1 1d       	adc	r31, r1
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 33       	cpi	r24, 0x30	; 48
    1c2c:	21 f4       	brne	.+8      	; 0x1c36 <vfprintf+0x308>
    1c2e:	9a 2d       	mov	r25, r10
    1c30:	99 7e       	andi	r25, 0xE9	; 233
    1c32:	a9 2e       	mov	r10, r25
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <vfprintf+0x31a>
    1c36:	a2 fe       	sbrs	r10, 2
    1c38:	06 c0       	rjmp	.+12     	; 0x1c46 <vfprintf+0x318>
    1c3a:	b3 94       	inc	r11
    1c3c:	b3 94       	inc	r11
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <vfprintf+0x31a>
    1c40:	8a 2d       	mov	r24, r10
    1c42:	86 78       	andi	r24, 0x86	; 134
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <vfprintf+0x31a>
    1c46:	b3 94       	inc	r11
    1c48:	a3 fc       	sbrc	r10, 3
    1c4a:	10 c0       	rjmp	.+32     	; 0x1c6c <vfprintf+0x33e>
    1c4c:	a0 fe       	sbrs	r10, 0
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <vfprintf+0x32e>
    1c50:	b2 14       	cp	r11, r2
    1c52:	80 f4       	brcc	.+32     	; 0x1c74 <vfprintf+0x346>
    1c54:	28 0c       	add	r2, r8
    1c56:	92 2c       	mov	r9, r2
    1c58:	9b 18       	sub	r9, r11
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <vfprintf+0x348>
    1c5c:	b2 14       	cp	r11, r2
    1c5e:	58 f4       	brcc	.+22     	; 0x1c76 <vfprintf+0x348>
    1c60:	b6 01       	movw	r22, r12
    1c62:	80 e2       	ldi	r24, 0x20	; 32
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	76 d0       	rcall	.+236    	; 0x1d54 <fputc>
    1c68:	b3 94       	inc	r11
    1c6a:	f8 cf       	rjmp	.-16     	; 0x1c5c <vfprintf+0x32e>
    1c6c:	b2 14       	cp	r11, r2
    1c6e:	18 f4       	brcc	.+6      	; 0x1c76 <vfprintf+0x348>
    1c70:	2b 18       	sub	r2, r11
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <vfprintf+0x34a>
    1c74:	98 2c       	mov	r9, r8
    1c76:	21 2c       	mov	r2, r1
    1c78:	a4 fe       	sbrs	r10, 4
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <vfprintf+0x36c>
    1c7c:	b6 01       	movw	r22, r12
    1c7e:	80 e3       	ldi	r24, 0x30	; 48
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	68 d0       	rcall	.+208    	; 0x1d54 <fputc>
    1c84:	a2 fe       	sbrs	r10, 2
    1c86:	16 c0       	rjmp	.+44     	; 0x1cb4 <vfprintf+0x386>
    1c88:	a1 fc       	sbrc	r10, 1
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <vfprintf+0x364>
    1c8c:	88 e7       	ldi	r24, 0x78	; 120
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x368>
    1c92:	88 e5       	ldi	r24, 0x58	; 88
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	b6 01       	movw	r22, r12
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <vfprintf+0x384>
    1c9a:	8a 2d       	mov	r24, r10
    1c9c:	86 78       	andi	r24, 0x86	; 134
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <vfprintf+0x386>
    1ca0:	a1 fe       	sbrs	r10, 1
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x37a>
    1ca4:	8b e2       	ldi	r24, 0x2B	; 43
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <vfprintf+0x37c>
    1ca8:	80 e2       	ldi	r24, 0x20	; 32
    1caa:	a7 fc       	sbrc	r10, 7
    1cac:	8d e2       	ldi	r24, 0x2D	; 45
    1cae:	b6 01       	movw	r22, r12
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	50 d0       	rcall	.+160    	; 0x1d54 <fputc>
    1cb4:	89 14       	cp	r8, r9
    1cb6:	30 f4       	brcc	.+12     	; 0x1cc4 <vfprintf+0x396>
    1cb8:	b6 01       	movw	r22, r12
    1cba:	80 e3       	ldi	r24, 0x30	; 48
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	4a d0       	rcall	.+148    	; 0x1d54 <fputc>
    1cc0:	9a 94       	dec	r9
    1cc2:	f8 cf       	rjmp	.-16     	; 0x1cb4 <vfprintf+0x386>
    1cc4:	8a 94       	dec	r8
    1cc6:	f3 01       	movw	r30, r6
    1cc8:	e8 0d       	add	r30, r8
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 81       	ld	r24, Z
    1cce:	b6 01       	movw	r22, r12
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	40 d0       	rcall	.+128    	; 0x1d54 <fputc>
    1cd4:	81 10       	cpse	r8, r1
    1cd6:	f6 cf       	rjmp	.-20     	; 0x1cc4 <vfprintf+0x396>
    1cd8:	22 20       	and	r2, r2
    1cda:	09 f4       	brne	.+2      	; 0x1cde <vfprintf+0x3b0>
    1cdc:	4e ce       	rjmp	.-868    	; 0x197a <vfprintf+0x4c>
    1cde:	b6 01       	movw	r22, r12
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	37 d0       	rcall	.+110    	; 0x1d54 <fputc>
    1ce6:	2a 94       	dec	r2
    1ce8:	f7 cf       	rjmp	.-18     	; 0x1cd8 <vfprintf+0x3aa>
    1cea:	f6 01       	movw	r30, r12
    1cec:	86 81       	ldd	r24, Z+6	; 0x06
    1cee:	97 81       	ldd	r25, Z+7	; 0x07
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x3c8>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	2b 96       	adiw	r28, 0x0b	; 11
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	9f 90       	pop	r9
    1d18:	8f 90       	pop	r8
    1d1a:	7f 90       	pop	r7
    1d1c:	6f 90       	pop	r6
    1d1e:	5f 90       	pop	r5
    1d20:	4f 90       	pop	r4
    1d22:	3f 90       	pop	r3
    1d24:	2f 90       	pop	r2
    1d26:	08 95       	ret

00001d28 <strnlen_P>:
    1d28:	fc 01       	movw	r30, r24
    1d2a:	05 90       	lpm	r0, Z+
    1d2c:	61 50       	subi	r22, 0x01	; 1
    1d2e:	70 40       	sbci	r23, 0x00	; 0
    1d30:	01 10       	cpse	r0, r1
    1d32:	d8 f7       	brcc	.-10     	; 0x1d2a <strnlen_P+0x2>
    1d34:	80 95       	com	r24
    1d36:	90 95       	com	r25
    1d38:	8e 0f       	add	r24, r30
    1d3a:	9f 1f       	adc	r25, r31
    1d3c:	08 95       	ret

00001d3e <strnlen>:
    1d3e:	fc 01       	movw	r30, r24
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 90       	ld	r0, Z+
    1d46:	01 10       	cpse	r0, r1
    1d48:	d8 f7       	brcc	.-10     	; 0x1d40 <strnlen+0x2>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	8e 0f       	add	r24, r30
    1d50:	9f 1f       	adc	r25, r31
    1d52:	08 95       	ret

00001d54 <fputc>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	23 81       	ldd	r18, Z+3	; 0x03
    1d60:	21 fd       	sbrc	r18, 1
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <fputc+0x16>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	2c c0       	rjmp	.+88     	; 0x1dc2 <fputc+0x6e>
    1d6a:	22 ff       	sbrs	r18, 2
    1d6c:	16 c0       	rjmp	.+44     	; 0x1d9a <fputc+0x46>
    1d6e:	46 81       	ldd	r20, Z+6	; 0x06
    1d70:	57 81       	ldd	r21, Z+7	; 0x07
    1d72:	24 81       	ldd	r18, Z+4	; 0x04
    1d74:	35 81       	ldd	r19, Z+5	; 0x05
    1d76:	42 17       	cp	r20, r18
    1d78:	53 07       	cpc	r21, r19
    1d7a:	44 f4       	brge	.+16     	; 0x1d8c <fputc+0x38>
    1d7c:	a0 81       	ld	r26, Z
    1d7e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d80:	9d 01       	movw	r18, r26
    1d82:	2f 5f       	subi	r18, 0xFF	; 255
    1d84:	3f 4f       	sbci	r19, 0xFF	; 255
    1d86:	31 83       	std	Z+1, r19	; 0x01
    1d88:	20 83       	st	Z, r18
    1d8a:	8c 93       	st	X, r24
    1d8c:	26 81       	ldd	r18, Z+6	; 0x06
    1d8e:	37 81       	ldd	r19, Z+7	; 0x07
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	37 83       	std	Z+7, r19	; 0x07
    1d96:	26 83       	std	Z+6, r18	; 0x06
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <fputc+0x6e>
    1d9a:	8b 01       	movw	r16, r22
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	fb 01       	movw	r30, r22
    1da0:	00 84       	ldd	r0, Z+8	; 0x08
    1da2:	f1 85       	ldd	r31, Z+9	; 0x09
    1da4:	e0 2d       	mov	r30, r0
    1da6:	09 95       	icall
    1da8:	89 2b       	or	r24, r25
    1daa:	e1 f6       	brne	.-72     	; 0x1d64 <fputc+0x10>
    1dac:	d8 01       	movw	r26, r16
    1dae:	16 96       	adiw	r26, 0x06	; 6
    1db0:	8d 91       	ld	r24, X+
    1db2:	9c 91       	ld	r25, X
    1db4:	17 97       	sbiw	r26, 0x07	; 7
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	17 96       	adiw	r26, 0x07	; 7
    1dba:	9c 93       	st	X, r25
    1dbc:	8e 93       	st	-X, r24
    1dbe:	16 97       	sbiw	r26, 0x06	; 6
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	08 95       	ret

00001dcc <__ultoa_invert>:
    1dcc:	fa 01       	movw	r30, r20
    1dce:	aa 27       	eor	r26, r26
    1dd0:	28 30       	cpi	r18, 0x08	; 8
    1dd2:	51 f1       	breq	.+84     	; 0x1e28 <__ultoa_invert+0x5c>
    1dd4:	20 31       	cpi	r18, 0x10	; 16
    1dd6:	81 f1       	breq	.+96     	; 0x1e38 <__ultoa_invert+0x6c>
    1dd8:	e8 94       	clt
    1dda:	6f 93       	push	r22
    1ddc:	6e 7f       	andi	r22, 0xFE	; 254
    1dde:	6e 5f       	subi	r22, 0xFE	; 254
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	8f 4f       	sbci	r24, 0xFF	; 255
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	af 4f       	sbci	r26, 0xFF	; 255
    1de8:	b1 e0       	ldi	r27, 0x01	; 1
    1dea:	3e d0       	rcall	.+124    	; 0x1e68 <__ultoa_invert+0x9c>
    1dec:	b4 e0       	ldi	r27, 0x04	; 4
    1dee:	3c d0       	rcall	.+120    	; 0x1e68 <__ultoa_invert+0x9c>
    1df0:	67 0f       	add	r22, r23
    1df2:	78 1f       	adc	r23, r24
    1df4:	89 1f       	adc	r24, r25
    1df6:	9a 1f       	adc	r25, r26
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	68 0f       	add	r22, r24
    1dfc:	79 1f       	adc	r23, r25
    1dfe:	8a 1f       	adc	r24, r26
    1e00:	91 1d       	adc	r25, r1
    1e02:	a1 1d       	adc	r26, r1
    1e04:	6a 0f       	add	r22, r26
    1e06:	71 1d       	adc	r23, r1
    1e08:	81 1d       	adc	r24, r1
    1e0a:	91 1d       	adc	r25, r1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	20 d0       	rcall	.+64     	; 0x1e50 <__ultoa_invert+0x84>
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__ultoa_invert+0x48>
    1e12:	68 94       	set
    1e14:	3f 91       	pop	r19
    1e16:	2a e0       	ldi	r18, 0x0A	; 10
    1e18:	26 9f       	mul	r18, r22
    1e1a:	11 24       	eor	r1, r1
    1e1c:	30 19       	sub	r19, r0
    1e1e:	30 5d       	subi	r19, 0xD0	; 208
    1e20:	31 93       	st	Z+, r19
    1e22:	de f6       	brtc	.-74     	; 0x1dda <__ultoa_invert+0xe>
    1e24:	cf 01       	movw	r24, r30
    1e26:	08 95       	ret
    1e28:	46 2f       	mov	r20, r22
    1e2a:	47 70       	andi	r20, 0x07	; 7
    1e2c:	40 5d       	subi	r20, 0xD0	; 208
    1e2e:	41 93       	st	Z+, r20
    1e30:	b3 e0       	ldi	r27, 0x03	; 3
    1e32:	0f d0       	rcall	.+30     	; 0x1e52 <__ultoa_invert+0x86>
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__ultoa_invert+0x5c>
    1e36:	f6 cf       	rjmp	.-20     	; 0x1e24 <__ultoa_invert+0x58>
    1e38:	46 2f       	mov	r20, r22
    1e3a:	4f 70       	andi	r20, 0x0F	; 15
    1e3c:	40 5d       	subi	r20, 0xD0	; 208
    1e3e:	4a 33       	cpi	r20, 0x3A	; 58
    1e40:	18 f0       	brcs	.+6      	; 0x1e48 <__ultoa_invert+0x7c>
    1e42:	49 5d       	subi	r20, 0xD9	; 217
    1e44:	31 fd       	sbrc	r19, 1
    1e46:	40 52       	subi	r20, 0x20	; 32
    1e48:	41 93       	st	Z+, r20
    1e4a:	02 d0       	rcall	.+4      	; 0x1e50 <__ultoa_invert+0x84>
    1e4c:	a9 f7       	brne	.-22     	; 0x1e38 <__ultoa_invert+0x6c>
    1e4e:	ea cf       	rjmp	.-44     	; 0x1e24 <__ultoa_invert+0x58>
    1e50:	b4 e0       	ldi	r27, 0x04	; 4
    1e52:	a6 95       	lsr	r26
    1e54:	97 95       	ror	r25
    1e56:	87 95       	ror	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	ba 95       	dec	r27
    1e5e:	c9 f7       	brne	.-14     	; 0x1e52 <__ultoa_invert+0x86>
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 05       	cpc	r22, r1
    1e64:	71 05       	cpc	r23, r1
    1e66:	08 95       	ret
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	0a 2e       	mov	r0, r26
    1e6e:	06 94       	lsr	r0
    1e70:	57 95       	ror	r21
    1e72:	47 95       	ror	r20
    1e74:	37 95       	ror	r19
    1e76:	27 95       	ror	r18
    1e78:	ba 95       	dec	r27
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__ultoa_invert+0xa2>
    1e7c:	62 0f       	add	r22, r18
    1e7e:	73 1f       	adc	r23, r19
    1e80:	84 1f       	adc	r24, r20
    1e82:	95 1f       	adc	r25, r21
    1e84:	a0 1d       	adc	r26, r0
    1e86:	08 95       	ret

00001e88 <_exit>:
    1e88:	f8 94       	cli

00001e8a <__stop_program>:
    1e8a:	ff cf       	rjmp	.-2      	; 0x1e8a <__stop_program>
